{"ast":null,"code":"export class OpenLine {\n  constructor(chess) {\n    this.chess = chess;\n  }\n\n  description() {\n    return \"OpenLine\";\n  }\n\n  score() {\n    let score = 0;\n    let board = this.chess.board();\n\n    for (let i = 0; i < 8; i++) {\n      let isOpenLine = true;\n      let isSemiOpenLineForWhite = true;\n      let isSemiOpenLineForBlack = true;\n      let countWhiteOnFile = 0;\n      let countBlackOnFile = 0;\n\n      for (let j = 0; j < 8; j++) {\n        let squere = board[j][i];\n\n        if ((squere === null || squere === void 0 ? void 0 : squere.type) === \"r\" || (squere === null || squere === void 0 ? void 0 : squere.type) === \"q\") {\n          if ((squere === null || squere === void 0 ? void 0 : squere.color) === \"w\" && j > 1) {\n            countWhiteOnFile++;\n          } else if (squere.color === \"b\" && j < 6) {\n            countBlackOnFile++;\n          }\n        } else if ((squere === null || squere === void 0 ? void 0 : squere.type) === \"p\") {\n          isOpenLine = false;\n\n          if ((squere === null || squere === void 0 ? void 0 : squere.color) === \"w\") {\n            isSemiOpenLineForWhite = false;\n          } else {\n            isSemiOpenLineForBlack = false;\n          }\n        }\n      }\n\n      if (isOpenLine) {\n        score += 0.1 * (countWhiteOnFile - countBlackOnFile);\n      } else if (isSemiOpenLineForWhite) {\n        score += 0.05 * countWhiteOnFile;\n      } else if (isSemiOpenLineForBlack) {\n        score -= 0.05 * countBlackOnFile;\n      }\n    }\n\n    return score;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}