{"ast":null,"code":"export class PassedPawn {\n  constructor(chess) {\n    this.chess = chess;\n  }\n\n  description() {\n    return \"PassedPawn\";\n  }\n\n  score() {\n    let score = 0;\n    score += this.scoreWhite();\n    score += this.scoreBlack();\n    return score;\n  }\n\n  scoreWhite() {\n    let score = 0;\n    let board = this.chess.board();\n    let isPassed = new Array();\n    let unKnown = 8;\n\n    for (let i = 1; i < 7; i++) {\n      if (unKnown == 0) {\n        break;\n      }\n\n      for (let j = 0; j < 8; j++) {\n        let squere = board[i][j];\n\n        if ((squere === null || squere === void 0 ? void 0 : squere.type) === \"p\") {\n          if ((squere === null || squere === void 0 ? void 0 : squere.color) === \"b\") {\n            isPassed[j] = false;\n            unKnown--;\n\n            if (j > 0 && isPassed[j - 1] == undefined) {\n              isPassed[j - 1] = false;\n              unKnown--;\n            }\n\n            if (j < 7 && isPassed[j + 1] == undefined && !this.isWhitePawn(board[i][j + 1])) {\n              isPassed[j + 1] = false;\n              unKnown--;\n            }\n          } else if ((squere === null || squere === void 0 ? void 0 : squere.color) === \"w\" && isPassed[j] != false) {\n            isPassed[j] = true;\n            score += (7 - i) * (7 - i) * 0.02;\n            unKnown--;\n          }\n        }\n      }\n    }\n\n    return score;\n  }\n\n  scoreBlack() {\n    let score = 0;\n    let board = this.chess.board();\n    let isPassed = new Array();\n    let unKnown = 8;\n\n    for (let i = 7; i > 0; i--) {\n      if (unKnown == 0) {\n        break;\n      }\n\n      for (let j = 0; j < 8; j++) {\n        let squere = board[i][j];\n\n        if ((squere === null || squere === void 0 ? void 0 : squere.type) === \"p\") {\n          if ((squere === null || squere === void 0 ? void 0 : squere.color) === \"w\") {\n            isPassed[j] = false;\n            unKnown--;\n\n            if (j > 0 && isPassed[j - 1] == undefined) {\n              isPassed[j - 1] = false;\n              unKnown--;\n            }\n\n            if (j < 7 && isPassed[j + 1] == undefined && !this.isBlackPawn(board[i][j + 1])) {\n              isPassed[j + 1] = false;\n              unKnown--;\n            }\n          } else if ((squere === null || squere === void 0 ? void 0 : squere.color) === \"b\" && isPassed[j] != false) {\n            isPassed[j] = true;\n            score -= i * i * 0.02;\n            unKnown--;\n          }\n        }\n      }\n    }\n\n    return score;\n  }\n\n  isWhitePawn(squere) {\n    return (squere === null || squere === void 0 ? void 0 : squere.type) === \"p\" && (squere === null || squere === void 0 ? void 0 : squere.color) === \"w\";\n  }\n\n  isBlackPawn(squere) {\n    return (squere === null || squere === void 0 ? void 0 : squere.type) === \"p\" && (squere === null || squere === void 0 ? void 0 : squere.color) === \"b\";\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}