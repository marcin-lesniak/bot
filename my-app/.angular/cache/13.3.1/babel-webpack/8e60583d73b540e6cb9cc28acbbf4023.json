{"ast":null,"code":"export class Game {\n  /**\r\n   * Initialise with interface to lichess.\r\n   */\n  constructor(api, name, replyChat, getNextMove) {\n    this.gameId = \"\";\n    this.colour = \"\";\n    this.api = api;\n    this.name = name;\n    this.replyChat = replyChat;\n    this.getNextMove = getNextMove;\n  }\n\n  start(gameId) {\n    this.gameId = gameId;\n    this.api.streamGame(gameId, event => this.handler(event));\n  }\n\n  handleChatLine(event) {\n    if (event.username !== this.name) {\n      const reply = this.replyChat(event);\n\n      if (reply) {\n        this.api.chat(this.gameId, event.room, reply);\n      }\n    }\n  }\n\n  handler(event) {\n    switch (event.type) {\n      case \"chatLine\":\n        this.handleChatLine(event);\n        break;\n\n      case \"gameFull\":\n        this.colour = this.playingAs(event);\n        this.playNextMove(event.state.moves);\n        break;\n\n      case \"gameState\":\n        this.playNextMove(event.moves);\n        break;\n\n      default:\n        console.log(\"Unhandled game event : \" + JSON.stringify(event));\n    }\n  }\n\n  playNextMove(previousMoves) {\n    const moves = previousMoves === \"\" ? [] : previousMoves.split(\" \");\n\n    if (this.isTurn(this.colour, moves)) {\n      const nextMove = this.getNextMove(moves);\n\n      if (nextMove) {\n        console.log(this.name + \" as \" + this.colour + \" to move \" + nextMove);\n        this.api.makeMove(this.gameId, nextMove);\n      }\n    }\n  }\n\n  playingAs(event) {\n    return event.white.name === this.name ? \"white\" : \"black\";\n  }\n\n  isTurn(colour, moves) {\n    var parity = moves.length % 2;\n    return colour === \"white\" ? parity === 0 : parity === 1;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}