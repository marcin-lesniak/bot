{"ast":null,"code":"import { Chess } from 'chess.js';\nimport { Castel } from '../components/castel';\nimport { Center } from '../components/center';\nimport { Peaces } from '../components/peaces';\nimport { MoveEvaluation } from './MoveEvaluation';\nimport { OpenLine } from '../components/open-line';\nimport { LastRanks } from '../components/last-ranks';\nimport { PassedPawn } from '../components/passed-pawn';\nimport { LichessApi } from '../api/LichessApi';\nimport { RobotUser } from '../api/RobotUser';\nimport { Material } from '../components/material';\nimport { TestBot } from '../test/TestBot';\nimport { PawnsStructures } from '../components/pawns-structure';\nimport { HangingPeaces } from '../components/hanging-peaces';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-chess-board\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../chess-move/chess-move.component\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"board\"];\n\nfunction EngineComponent_div_0_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\")(1, \"app-chess-move\", 5);\n    i0.ɵɵlistener(\"selectedMove\", function EngineComponent_div_0_div_8_Template_app_chess_move_selectedMove_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return ctx_r7.makeMove($event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const moveEvaluation_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"moveEvaluation\", moveEvaluation_r6);\n  }\n}\n\nfunction EngineComponent_div_0_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\")(1, \"app-chess-move\", 5);\n    i0.ɵɵlistener(\"selectedMove\", function EngineComponent_div_0_div_12_Template_app_chess_move_selectedMove_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.makeMove($event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const moveEvaluation_r9 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"moveEvaluation\", moveEvaluation_r9);\n  }\n}\n\nfunction EngineComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function EngineComponent_div_0_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.copyPgn();\n    });\n    i0.ɵɵtext(4, \"Kopiuj\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 3)(6, \"h3\");\n    i0.ɵɵtext(7, \"Wszystkie:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, EngineComponent_div_0_div_8_Template, 2, 1, \"div\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 3)(10, \"h3\");\n    i0.ɵɵtext(11, \"Kandydaci:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, EngineComponent_div_0_div_12_Template, 2, 1, \"div\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 3)(14, \"h3\");\n    i0.ɵɵtext(15, \"Wybrany:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"app-chess-move\", 5);\n    i0.ɵɵlistener(\"selectedMove\", function EngineComponent_div_0_Template_app_chess_move_selectedMove_16_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.makeMove($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"form\")(18, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function EngineComponent_div_0_Template_button_click_18_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.moveBack();\n    });\n    i0.ɵɵtext(19, \"Cofnij\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(20, \"br\");\n    i0.ɵɵelementStart(21, \"p\");\n    i0.ɵɵtext(22, \"Ranodm Game\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"form\")(24, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function EngineComponent_div_0_Template_button_click_24_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.startRandomGame();\n    });\n    i0.ɵɵtext(25, \"New game\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(26, \"br\");\n    i0.ɵɵelementStart(27, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function EngineComponent_div_0_Template_button_click_27_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.stopRandomGame();\n    });\n    i0.ɵɵtext(28, \"Stop\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function EngineComponent_div_0_Template_button_click_29_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.resumeRandomGame();\n    });\n    i0.ɵɵtext(30, \"Resume\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(31, \"div\", 7)(32, \"ngx-chess-board\", 8, 9);\n    i0.ɵɵlistener(\"moveChange\", function EngineComponent_div_0_Template_ngx_chess_board_moveChange_32_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.moveCallback($event);\n    });\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"PGN: \", ctx_r0.pgn, \"\");\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.allMoves);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.candidates);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"moveEvaluation\", ctx_r0.bestMove);\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.isRandomGame);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.isRandomGame);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"size\", 400);\n  }\n}\n\nfunction EngineComponent_ng_template_1_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function EngineComponent_ng_template_1_li_2_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r24);\n      const bot_r21 = restoredCtx.$implicit;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return ctx_r23.challenge(bot_r21.id);\n    });\n    i0.ɵɵtext(3, \"challenge\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const bot_r21 = ctx.$implicit;\n    const i_r22 = ctx.index;\n    i0.ɵɵclassProp(\"user-bot\", bot_r21.id === \"marcinlebot\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate3(\" \", i_r22, \" / \", bot_r21.id, \" - \", bot_r21.perfs.bullet.rating, \" \");\n  }\n}\n\nfunction EngineComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Bot mode. \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, EngineComponent_ng_template_1_li_2_Template, 4, 5, \"li\", 10);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.onlineBots);\n  }\n}\n\nexport let EngineComponent = /*#__PURE__*/(() => {\n  class EngineComponent {\n    constructor(cdRef, ngxChessBoardService) {\n      this.cdRef = cdRef;\n      this.ngxChessBoardService = ngxChessBoardService;\n      this.chess = new Chess();\n      this.scoreList = [];\n      this.minScoreList = [];\n      this.MAX_DEPTH = 200;\n      this.scoreMap = new Map();\n      this.currentDepth = 1;\n      this.evaluationScore = 0;\n      this.castel = new Castel(this.chess);\n      this.material = new Material(this.chess);\n      this.fen = \"\";\n      this.pgn = \"\";\n      this.allMoves = [];\n      this.candidates = [];\n      this.bestMove = new MoveEvaluation(this.chess.moves({\n        verbose: true\n      })[0]);\n      this.newMove = \"\";\n      this.isRandomGame = false;\n      this.isBotMode = false;\n      this.lichessApi = new LichessApi();\n      this.SQUARES = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\", \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"];\n    }\n\n    ngAfterViewInit() {\n      this.createScoreList();\n      this.board.reset();\n      this.loadFEN(\"r3r1k1/p3nppp/8/5bN1/5P2/2p5/P3P1PP/3KRB1R w - - 0 21\"); // <--- Do sprawdzenia  \n\n      this.game(); // this.startRandomGame();\n      // this.startBot();\n      // this.testBot();\n    }\n\n    createScoreList() {\n      this.scoreList.push(new Center(this.chess));\n      this.scoreList.push(new Peaces(this.chess));\n      this.scoreList.push(new OpenLine(this.chess));\n      this.scoreList.push(new LastRanks(this.chess));\n      this.scoreList.push(new PassedPawn(this.chess));\n      this.scoreList.push(new PawnsStructures(this.chess, this.material));\n      this.scoreList.push(new HangingPeaces(this.chess, this.material, this.SQUARES));\n      this.minScoreList.push(new OpenLine(this.chess));\n      this.minScoreList.push(new LastRanks(this.chess));\n    }\n\n    startRandomGame() {\n      this.board.reset();\n      this.chess.reset();\n      setTimeout(() => {\n        this.randomGame();\n      }, 3000);\n    }\n\n    randomGame() {\n      this.isRandomGame = true;\n\n      if (!this.chess.isGameOver()) {\n        this.makeMove(this.bestMove);\n      }\n    }\n\n    game(remainingTime) {\n      var self = this;\n      this.fen = this.chess.fen();\n\n      if (this.chess.isGameOver()) {\n        return new MoveEvaluation(this.chess.moves({\n          verbose: true\n        })[0]);\n      }\n\n      this.allMoves = this.getAllMoves();\n      let bestScore = this.getInitialScore();\n      let candidateMovesByMaterial = [];\n      this.currentDepth = 1;\n      this.evaluationScore = this.material.score();\n      this.allMoves.forEach(function (value) {\n        self.evaluate(value, remainingTime);\n\n        if (self.chess.turn() === \"w\" && value.score > bestScore || self.chess.turn() === \"b\" && value.score < bestScore) {\n          bestScore = value.score;\n          candidateMovesByMaterial = [];\n          candidateMovesByMaterial.push(value);\n        } else if (value.score == bestScore) {\n          candidateMovesByMaterial.push(value);\n        }\n      });\n      this.candidates = candidateMovesByMaterial;\n      this.bestMove = candidateMovesByMaterial[Math.floor(Math.random() * candidateMovesByMaterial.length)];\n      this.cdRef.detectChanges();\n      return this.bestMove;\n    }\n\n    getInitialScore() {\n      if (this.chess.turn() === \"w\") {\n        return -1000000;\n      }\n\n      return 1000000;\n    }\n\n    getAllMoves() {\n      let allMoves = [];\n      this.chess.moves({\n        verbose: true\n      }).forEach(move => {\n        allMoves.push(new MoveEvaluation(move));\n      });\n      return allMoves;\n    }\n\n    evaluate(value, remainingTime) {\n      let score = this.scoreForMyMove(value.move, this.evaluationScore, true);\n      this.chess.move(value.move);\n\n      if (this.chess.isCheckmate()) {\n        if (this.chess.turn() === \"b\") {\n          score += 1000;\n        } else {\n          score -= 1000;\n        }\n      } else if (this.isGameDrawn()) {\n        score = 0;\n      } else {\n        if (this.chess.isCheck()) {\n          value.check = 0.1;\n\n          if (this.chess.turn() === \"b\") {\n            score += 0.1;\n          } else {\n            score -= 0.1;\n          }\n        } else {\n          score += this.scoreAttackOnKingRing() * 0.01;\n        }\n\n        if (remainingTime && remainingTime < 15000) {\n          this.minScoreList.forEach(scorePosition => {\n            let s = scorePosition.score();\n            value.scoreList.set(scorePosition.description(), s);\n            score += s;\n          });\n        } else {\n          this.material.refreshPeacesPosition();\n          this.scoreList.forEach(scorePosition => {\n            let s = scorePosition.score();\n            value.scoreList.set(scorePosition.description(), s);\n            score += s;\n          });\n          score += this.castel.evaluateCastel(value);\n          score += this.evaluateCapture(score, value.move);\n        }\n      }\n\n      value.score = Math.round(score * 100) / 100;\n      this.chess.undo();\n    }\n\n    evaluateCapture(currentScore, move) {\n      let score = currentScore;\n\n      if (move.captured) {\n        if (this.chess.turn() === \"b\") {\n          if (score >= 5) {\n            score += 0.5;\n          } else if (score >= 2) {\n            if (move.piece != \"p\") {\n              score += 0.5;\n            } else {\n              if (this.material.whiteCount.pawns > 2) {\n                score += 0.5;\n              } else {\n                score -= 0.5;\n              }\n            }\n          } else if (score <= -2) {\n            if (move.piece == \"p\") {\n              score += 0.5;\n            } else {\n              score -= 0.5;\n            }\n          }\n        } else {\n          if (score <= -5) {\n            score -= 0.5;\n          } else if (score <= -2) {\n            if (move.piece != \"p\") {\n              score -= 0.5;\n            } else {\n              if (this.material.blackCount.pawns > 2) {\n                score -= 0.5;\n              } else {\n                score += 0.5;\n              }\n            }\n          } else if (score >= 2) {\n            if (move.piece == \"p\") {\n              score -= 0.5;\n            } else {\n              score += 0.5;\n            }\n          }\n        }\n      }\n\n      return score;\n    }\n\n    scoreForOponentMove(move, currentEvaluation) {\n      let score = currentEvaluation;\n\n      if (move.captured) {\n        if (this.chess.turn() === \"w\") {\n          score += this.material.evaluatePieceMaterial(move.captured);\n        } else {\n          score -= this.material.evaluatePieceMaterial(move.captured);\n        }\n      }\n\n      if (move.promotion) {\n        let scoreForPromotion = this.material.evaluatePieceMaterial(move.promotion) - 1;\n\n        if (this.chess.turn() === \"w\") {\n          score += scoreForPromotion;\n        } else {\n          score -= scoreForPromotion;\n        }\n      }\n\n      let bestScore = score;\n\n      if (this.currentDepth < this.MAX_DEPTH) {\n        this.currentDepth++;\n        this.chess.move(move);\n        this.chess.moves({\n          verbose: true\n        }).forEach(value => {\n          if (value.captured && value.to === move.to) {\n            let moveScore = this.scoreForMyMove(value, score, false);\n\n            if (moveScore > bestScore && this.chess.turn() === \"w\") {\n              bestScore = moveScore;\n            } else if (moveScore < bestScore && this.chess.turn() === \"b\") {\n              bestScore = moveScore;\n            }\n          }\n        });\n        this.chess.undo();\n        this.currentDepth--;\n      }\n\n      this.scoreMap.set(this.chess.fen(), bestScore);\n      return bestScore;\n    }\n\n    scoreForMyMove(move, currentEvaluation, isFirstMoveOfEvaluation) {\n      let score = currentEvaluation;\n\n      if (move.captured) {\n        if (this.chess.turn() === \"w\") {\n          score += this.material.evaluatePieceMaterial(move.captured);\n        } else {\n          score -= this.material.evaluatePieceMaterial(move.captured);\n        }\n      }\n\n      if (move.promotion) {\n        let scoreForPromotion = this.material.evaluatePieceMaterial(move.promotion) - 1;\n\n        if (this.chess.turn() === \"w\") {\n          score += scoreForPromotion;\n        } else {\n          score -= scoreForPromotion;\n        }\n      }\n\n      let worstScore = score;\n      this.chess.move(move);\n      this.chess.moves({\n        verbose: true\n      }).forEach(value => {\n        if (this.isOponentNextMoveCheckmate(value)) {\n          if (this.chess.turn() === \"b\") {\n            worstScore = -1000;\n          } else {\n            worstScore = 1000;\n          }\n        } else {\n          if (value.promotion || value.captured && (isFirstMoveOfEvaluation || value.to === move.to)) {\n            let moveScore = this.scoreForOponentMove(value, score);\n\n            if (moveScore < worstScore && this.chess.turn() === \"b\") {\n              worstScore = moveScore;\n            } else if (moveScore > worstScore && this.chess.turn() === \"w\") {\n              worstScore = moveScore;\n            }\n          }\n        }\n      });\n      this.chess.undo();\n      this.scoreMap.set(this.chess.fen(), worstScore);\n      return worstScore;\n    }\n\n    isOponentNextMoveCheckmate(move) {\n      this.chess.move(move);\n\n      if (this.chess.isCheckmate()) {\n        this.chess.undo();\n        return true;\n      }\n\n      this.chess.undo();\n      return false;\n    }\n\n    makeMove(newMove) {\n      this.chess.move(newMove.move);\n      let boardMove = this.getBoardMove(newMove);\n      this.board.move(boardMove);\n      this.refresh();\n    }\n\n    getBoardMove(newMove) {\n      let boardMove = newMove.move.from + newMove.move.to;\n\n      if (newMove.move.promotion) {\n        let promotion = newMove.move.promotion;\n\n        switch (promotion) {\n          case \"q\":\n            boardMove += \"1\";\n            break;\n\n          case \"r\":\n            boardMove += \"2\";\n            break;\n\n          case \"b\":\n            boardMove += \"3\";\n            break;\n\n          case \"n\":\n            boardMove += \"4\";\n            break;\n        }\n      }\n\n      return boardMove;\n    }\n\n    moveBack() {\n      this.chess.undo();\n      this.board.undo();\n      this.refresh();\n    }\n\n    refresh() {\n      setTimeout(() => {\n        this.game();\n        this.pgn = this.chess.pgn();\n\n        if (this.isGameDrawn()) {\n          this.pgn += \" 1/2\";\n        }\n\n        this.newMove = \"\";\n\n        if (this.isRandomGame) {\n          this.randomGame();\n        }\n      }, 500);\n    }\n\n    copyPgn() {\n      document.addEventListener('copy', e => {\n        var _a;\n\n        (_a = e.clipboardData) === null || _a === void 0 ? void 0 : _a.setData('text/plain', this.pgn);\n        e.preventDefault(); // document.removeEventListener('copy', null);\n      });\n      document.execCommand('copy');\n    }\n\n    moveCallback(move) {\n      if (this.chess.turn() === move.color[0]) {\n        let chessEngineMove = this.getChessEngineMove(move.move);\n        this.chess.move(chessEngineMove);\n        this.refresh();\n      }\n    }\n\n    getChessEngineMove(move) {\n      let chessEngineMove = move.substring(0, 4);\n\n      if (move.length === 5) {\n        switch (move[4]) {\n          case '1':\n            chessEngineMove += 'q';\n            break;\n\n          case '2':\n            chessEngineMove += 'r';\n            break;\n\n          case '3':\n            chessEngineMove += 'b';\n            break;\n\n          case '4':\n            chessEngineMove += 'n';\n            break;\n        }\n      }\n\n      return chessEngineMove;\n    }\n\n    loadFEN(fen) {\n      this.chess.load(fen);\n      this.board.setFEN(fen);\n    }\n\n    startBot() {\n      this.isBotMode = true;\n      const robot = new RobotUser(this.lichessApi, this.getReply, this.botMove.bind(this));\n      robot.start();\n      this.lichessApi.getOnlineBots().then(bots => {\n        this.onlineBots = bots.data.trim().split(\"\\n\").map(JSON.parse);\n        this.onlineBots.sort((a, b) => {\n          if (a.perfs.bullet.rating > b.perfs.bullet.rating) {\n            return 1;\n          }\n\n          return -1;\n        });\n      });\n      this.cdRef.detectChanges();\n    }\n\n    botMove(moves, remainingTime) {\n      this.chess.reset();\n      moves.forEach(move => this.chess.move(move));\n      let bestMove = this.game(remainingTime);\n      return bestMove.move.from + bestMove.move.to + (bestMove.move.flags === \"p\" ? bestMove.move.piece : \"\");\n    }\n\n    getReply() {\n      return \"hi\";\n    }\n\n    stopRandomGame() {\n      this.isRandomGame = false;\n    }\n\n    resumeRandomGame() {\n      this.isRandomGame = true;\n      this.refresh();\n    }\n\n    isGameDrawn() {\n      return this.chess.isDraw() || this.chess.isStalemate() || this.chess.isThreefoldRepetition();\n    }\n\n    challenge(botId) {\n      this.lichessApi.challenge(botId);\n    }\n\n    testBot() {\n      const testBot = new TestBot(this.chess.load.bind(this.chess), this.game.bind(this));\n      testBot.test();\n    }\n\n    scoreAttackOnKingRing() {\n      let score = 0;\n      let whiteKingRing = this.getKingRing(this.material.whiteKingPosition);\n      let blackKingRing = this.getKingRing(this.material.blackKingPosition);\n      blackKingRing.forEach(field => {\n        if (this.chess.isAttacked(field, 'w')) {\n          score++;\n        }\n      });\n      whiteKingRing.forEach(field => {\n        if (this.chess.isAttacked(field, 'b')) {\n          score--;\n        }\n      });\n      return score;\n    }\n\n    getKingRing(kingPosition) {\n      let kingRing = [];\n      let whiteKingX = kingPosition.x;\n      let whiteKingY = kingPosition.y;\n\n      for (let x = whiteKingX - 1; x <= whiteKingX + 1; x++) {\n        if (x < 0 || x > 7) {\n          continue;\n        }\n\n        for (let y = whiteKingY - 1; y <= whiteKingY + 1; y++) {\n          if (y < 0 || y > 7) {\n            continue;\n          }\n\n          kingRing.push(this.SQUARES[y * 8 + x]);\n        }\n      }\n\n      return kingRing;\n    }\n\n  }\n\n  EngineComponent.ɵfac = function EngineComponent_Factory(t) {\n    return new (t || EngineComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.NgxChessBoardService));\n  };\n\n  EngineComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EngineComponent,\n    selectors: [[\"app-engine\"]],\n    viewQuery: function EngineComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.board = _t.first);\n      }\n    },\n    decls: 3,\n    vars: 2,\n    consts: [[4, \"ngIf\", \"ngIfElse\"], [\"botMode\", \"\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", 3, \"click\"], [1, \"moves-list\"], [4, \"ngFor\", \"ngForOf\"], [3, \"moveEvaluation\", \"selectedMove\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", 3, \"disabled\", \"click\"], [2, \"width\", \"400px\", \"margin-left\", \"auto\", \"margin-right\", \"auto\", \"padding-bottom\", \"100px\", \"max-width\", \"100%\"], [3, \"size\", \"moveChange\"], [\"board\", \"\"], [3, \"user-bot\", 4, \"ngFor\", \"ngForOf\"]],\n    template: function EngineComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, EngineComponent_div_0_Template, 34, 7, \"div\", 0);\n        i0.ɵɵtemplate(1, EngineComponent_ng_template_1_Template, 3, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(2);\n\n        i0.ɵɵproperty(\"ngIf\", !ctx.isBotMode)(\"ngIfElse\", _r1);\n      }\n    },\n    directives: [i2.NgIf, i2.NgForOf, i3.ChessMoveComponent, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.NgForm, i1.NgxChessBoardComponent],\n    styles: [\".move[_ngcontent-%COMP%]{min-width:30px;border:solid 1px;text-align:center;margin-right:2px}.move[_ngcontent-%COMP%]:hover{background-color:#7fffd4}.moves-list[_ngcontent-%COMP%]{display:flex}.user-bot[_ngcontent-%COMP%]{color:red}\"]\n  });\n  return EngineComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}