{"ast":null,"code":"import * as i4 from '@angular/cdk/drag-drop';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Component, ViewChild, Input, EventEmitter, Output, HostListener, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { cloneDeep } from 'lodash';\nconst _c0 = [\"myModal\"];\n\nfunction PiecePromotionModalComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 6);\n    i0.ɵɵlistener(\"click\", function PiecePromotionModalComponent_div_4_Template_div_click_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.changeSelection(1);\n    });\n    i0.ɵɵelement(2, \"img\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 6);\n    i0.ɵɵlistener(\"click\", function PiecePromotionModalComponent_div_4_Template_div_click_3_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.changeSelection(2);\n    });\n    i0.ɵɵelement(4, \"img\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 6);\n    i0.ɵɵlistener(\"click\", function PiecePromotionModalComponent_div_4_Template_div_click_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.changeSelection(3);\n    });\n    i0.ɵɵelement(6, \"img\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 6);\n    i0.ɵɵlistener(\"click\", function PiecePromotionModalComponent_div_4_Template_div_click_7_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.changeSelection(4);\n    });\n    i0.ɵɵelement(8, \"img\", 10);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", ctx_r1.getPieceIcon(\"queen\"), i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", ctx_r1.getPieceIcon(\"rook\"), i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", ctx_r1.getPieceIcon(\"bishop\"), i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", ctx_r1.getPieceIcon(\"knight\"), i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction PiecePromotionModalComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 6);\n    i0.ɵɵlistener(\"click\", function PiecePromotionModalComponent_div_5_Template_div_click_1_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.changeSelection(1);\n    });\n    i0.ɵɵtext(2, \"\\u265B\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 6);\n    i0.ɵɵlistener(\"click\", function PiecePromotionModalComponent_div_5_Template_div_click_3_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.changeSelection(2);\n    });\n    i0.ɵɵtext(4, \"\\u265C\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 6);\n    i0.ɵɵlistener(\"click\", function PiecePromotionModalComponent_div_5_Template_div_click_5_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.changeSelection(3);\n    });\n    i0.ɵɵtext(6, \"\\u265D\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 6);\n    i0.ɵɵlistener(\"click\", function PiecePromotionModalComponent_div_5_Template_div_click_7_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.changeSelection(4);\n    });\n    i0.ɵɵtext(8, \"\\u265E\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nconst _c1 = [\"boardRef\"];\nconst _c2 = [\"modal\"];\n\nfunction NgxChessBoardComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵlistener(\"cdkDragEnded\", function NgxChessBoardComponent_div_3_Template_div_cdkDragEnded_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.dragEnded($event);\n    })(\"cdkDragMoved\", function NgxChessBoardComponent_div_3_Template_div_cdkDragMoved_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.dragMoved($event);\n    })(\"cdkDragStarted\", function NgxChessBoardComponent_div_3_Template_div_cdkDragStarted_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.dragStart($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const piece_r7 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"transform\", \"translate3d(\" + piece_r7.point.col * ctx_r1.pieceSize + \"px, \" + piece_r7.point.row * ctx_r1.pieceSize + \"px,0px)\")(\"max-height\", ctx_r1.pieceSize + \"px\")(\"font-size\", ctx_r1.pieceSize * 0.8 + \"px\")(\"width\", ctx_r1.pieceSize + \"px\")(\"height\", ctx_r1.pieceSize + \"px\");\n    i0.ɵɵproperty(\"cdkDragDisabled\", ctx_r1.engineFacade.dragDisabled)(\"innerHTML\", ctx_r1.engineFacade.pieceIconManager.isDefaultIcons() ? piece_r7.constant.icon : \"\", i0.ɵɵsanitizeHtml)(\"ngStyle\", ctx_r1.engineFacade.pieceIconManager.isDefaultIcons() ? \"\" : ctx_r1.getCustomPieceIcons(piece_r7));\n  }\n}\n\nfunction NgxChessBoardComponent_div_4_div_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const i_r14 = i0.ɵɵnextContext(2).index;\n    const ctx_r18 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"color\", i_r14 % 2 === 0 ? ctx_r18.lightTileColor : ctx_r18.darkTileColor)(\"font-size\", ctx_r18.pieceSize / 4, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r18.engineFacade.coords.yCoords[i_r14], \" \");\n  }\n}\n\nfunction NgxChessBoardComponent_div_4_div_1_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const j_r17 = i0.ɵɵnextContext().index;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"color\", j_r17 % 2 === 0 ? ctx_r19.lightTileColor : ctx_r19.darkTileColor)(\"font-size\", ctx_r19.pieceSize / 4, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r19.engineFacade.coords.xCoords[j_r17], \" \");\n  }\n}\n\nfunction NgxChessBoardComponent_div_4_div_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵelement(1, \"div\", 21);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"font-size\", ctx_r20.pieceSize + \"px\");\n    i0.ɵɵproperty(\"ngClass\", \"piece\");\n  }\n}\n\nfunction NgxChessBoardComponent_div_4_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, NgxChessBoardComponent_div_4_div_1_span_1_Template, 2, 5, \"span\", 15);\n    i0.ɵɵtemplate(2, NgxChessBoardComponent_div_4_div_1_span_2_Template, 2, 5, \"span\", 16);\n    i0.ɵɵtemplate(3, NgxChessBoardComponent_div_4_div_1_div_3_Template, 2, 3, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const j_r17 = ctx.index;\n    const i_r14 = i0.ɵɵnextContext().index;\n    const ctx_r15 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", ctx_r15.getTileBackgroundColor(i_r14, j_r17));\n    i0.ɵɵclassProp(\"current-selection\", ctx_r15.showActivePiece && ctx_r15.engineFacade.board.isXYInActiveMove(i_r14, j_r17))(\"king-check\", ctx_r15.engineFacade.board.isKingChecked(ctx_r15.engineFacade.board.getPieceByPoint(i_r14, j_r17)))(\"point-circle\", ctx_r15.engineFacade.board.isXYInPointSelection(i_r14, j_r17))(\"possible-capture\", ctx_r15.showPossibleCaptures && ctx_r15.engineFacade.board.isXYInPossibleCaptures(i_r14, j_r17))(\"possible-point\", ctx_r15.engineFacade.board.isXYInPossibleMoves(i_r14, j_r17) && ctx_r15.showLegalMoves);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r15.showCoords && j_r17 === 7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r15.showCoords && i_r14 === 7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r15.engineFacade.board.getPieceByPoint(i_r14, j_r17));\n  }\n}\n\nfunction NgxChessBoardComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtemplate(1, NgxChessBoardComponent_div_4_div_1_Template, 4, 15, \"div\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r13 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r13);\n  }\n}\n\nfunction NgxChessBoardComponent__svg_defs_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\")(1, \"marker\", 22);\n    i0.ɵɵelement(2, \"path\", 23);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const color_r25 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", color_r25 + \"Arrow\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"fill\", color_r25);\n  }\n}\n\nfunction NgxChessBoardComponent__svg_line_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 24);\n  }\n\n  if (rf & 2) {\n    const arrow_r26 = ctx.$implicit;\n    i0.ɵɵattribute(\"marker-end\", \"url(#\" + arrow_r26.end.color + \"Arrow)\")(\"stroke\", arrow_r26.end.color)(\"x1\", arrow_r26.start.x)(\"x2\", arrow_r26.end.x)(\"y1\", arrow_r26.start.y)(\"y2\", arrow_r26.end.y);\n  }\n}\n\nfunction NgxChessBoardComponent__svg_circle_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"circle\", 25);\n  }\n\n  if (rf & 2) {\n    const circle_r27 = ctx.$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"cx\", circle_r27.drawPoint.x)(\"cy\", circle_r27.drawPoint.y)(\"r\", ctx_r5.engineFacade.heightAndWidth / 18)(\"stroke\", circle_r27.drawPoint.color);\n  }\n}\n\nconst _c3 = function () {\n  return [\"red\", \"green\", \"blue\", \"orange\"];\n};\n\nvar Color;\n\n(function (Color) {\n  Color[Color[\"WHITE\"] = 0] = \"WHITE\";\n  Color[Color[\"BLACK\"] = 1] = \"BLACK\";\n})(Color || (Color = {}));\n\nclass Piece {\n  constructor(point, color, constant, relValue, board) {\n    this.checkPoints = [];\n    this.color = color;\n    this.constant = constant;\n    this.point = point;\n    this.relValue = relValue;\n    this.board = board;\n  }\n\n}\n\nclass Point {\n  constructor(row, col) {\n    this.row = row;\n    this.col = col;\n  }\n\n  isEqual(that) {\n    return that && this.row === that.row && this.col === that.col;\n  }\n\n  hasCoordsEqual(row, col) {\n    return row && col && this.row === row && this.col === col;\n  }\n\n  isInRange() {\n    return this.row >= 0 && this.row <= 7 && this.col >= 0 && this.col <= 7;\n  }\n\n  clone() {\n    return new Point(this.row, this.col);\n  }\n\n}\n\nclass Rook extends Piece {\n  constructor(point, color, constant, board) {\n    super(point, color, constant, 5, board);\n    this.isMovedAlready = false;\n  }\n\n  getPossibleMoves() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col;\n\n    for (let i = row + 1; i < 8; ++i) {\n      // dol\n      if (this.board.isFieldEmpty(i, col)) {\n        possiblePoints.push(new Point(i, col));\n      } else {\n        break;\n      }\n    }\n\n    for (let i = row - 1; i >= 0; --i) {\n      // gora\n      if (this.board.isFieldEmpty(i, col)) {\n        possiblePoints.push(new Point(i, col));\n      } else {\n        break;\n      }\n    }\n\n    for (let j = col - 1; j >= 0; --j) {\n      // lewo\n      if (this.board.isFieldEmpty(row, j)) {\n        possiblePoints.push(new Point(row, j));\n      } else {\n        break;\n      }\n    }\n\n    for (let j = col + 1; j < 8; ++j) {\n      // prawo\n      if (this.board.isFieldEmpty(row, j)) {\n        possiblePoints.push(new Point(row, j));\n      } else {\n        break;\n      }\n    }\n\n    return possiblePoints;\n  }\n\n  getPossibleCaptures() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col;\n\n    for (let i = row + 1; i < 8; ++i) {\n      // dol\n      if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(i, col));\n        break;\n      } else {\n        if (!this.board.isFieldEmpty(i, col)) {\n          break;\n        }\n      }\n    }\n\n    for (let i = row - 1; i >= 0; --i) {\n      // gora\n      if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(i, col));\n        break;\n      } else {\n        if (!this.board.isFieldEmpty(i, col)) {\n          break;\n        }\n      }\n    }\n\n    for (let j = col - 1; j >= 0; --j) {\n      // lewo\n      if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(row, j));\n        break;\n      } else {\n        if (!this.board.isFieldEmpty(row, j)) {\n          break;\n        }\n      }\n    }\n\n    for (let j = col + 1; j < 8; ++j) {\n      // prawo\n      if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(row, j));\n        break;\n      } else {\n        if (!this.board.isFieldEmpty(row, j)) {\n          break;\n        }\n      }\n    }\n\n    return possiblePoints;\n  }\n\n  getCoveredFields() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col;\n\n    for (let i = row + 1; i < 8; ++i) {\n      // dol\n      if (this.board.isFieldEmpty(i, col)) {\n        possiblePoints.push(new Point(i, col));\n      } else {\n        if (!(this.board.getPieceByField instanceof King)) {\n          possiblePoints.push(new Point(i, col));\n          break;\n        }\n      }\n    }\n\n    for (let i = row - 1; i >= 0; --i) {\n      // gora\n      if (this.board.isFieldEmpty(i, col)) {\n        possiblePoints.push(new Point(i, col));\n      } else {\n        if (!(this.board.getPieceByField instanceof King)) {\n          possiblePoints.push(new Point(i, col));\n          break;\n        }\n      }\n    }\n\n    for (let j = col - 1; j >= 0; --j) {\n      // lewo\n      if (this.board.isFieldEmpty(row, j)) {\n        possiblePoints.push(new Point(row, j));\n      } else {\n        if (!(this.board.getPieceByField instanceof King)) {\n          possiblePoints.push(new Point(row, j));\n          break;\n        }\n      }\n    }\n\n    for (let j = col + 1; j < 8; ++j) {\n      // prawo\n      if (this.board.isFieldEmpty(row, j)) {\n        possiblePoints.push(new Point(row, j));\n      } else {\n        if (!(this.board.getPieceByField instanceof King)) {\n          possiblePoints.push(new Point(row, j));\n          break;\n        }\n      }\n    }\n\n    return possiblePoints;\n  }\n\n}\n\nclass King extends Piece {\n  constructor(point, color, constant, board) {\n    super(point, color, constant, 0, board);\n    this.castledAlready = false;\n    this.shortCastled = false;\n    this.longCastled = false;\n    this.isCastling = false;\n  }\n\n  getPossibleMoves() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col; // lewo\n\n    if (this.board.isFieldEmpty(row, col - 1) && !this.board.isFieldUnderAttack(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row, col - 1));\n    } // prawo\n\n\n    if (this.board.isFieldEmpty(row, col + 1) && !this.board.isFieldUnderAttack(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row, col + 1));\n    } // dol\n\n\n    if (this.board.isFieldEmpty(row + 1, col) && !this.board.isFieldUnderAttack(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row + 1, col));\n    } // gora\n\n\n    if (this.board.isFieldEmpty(row - 1, col) && !this.board.isFieldUnderAttack(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row - 1, col));\n    } // lewo gora\n\n\n    if (this.board.isFieldEmpty(row - 1, col - 1) && !this.board.isFieldUnderAttack(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row - 1, col - 1));\n    } // prawo gora\n\n\n    if (this.board.isFieldEmpty(row - 1, col + 1) && !this.board.isFieldUnderAttack(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row - 1, col + 1));\n    } // lewo dol\n\n\n    if (this.board.isFieldEmpty(row + 1, col - 1) && !this.board.isFieldUnderAttack(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row + 1, col - 1));\n    } // prawo dol\n\n\n    if (this.board.isFieldEmpty(row + 1, col + 1) && !this.board.isFieldUnderAttack(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row + 1, col + 1));\n    }\n\n    if (!this.isMovedAlready) {\n      let longCastlePossible = true;\n\n      for (let i = col - 1; i > 0; --i) {\n        if (!this.board.isFieldEmpty(row, i) || this.board.isFieldUnderAttack(row, i, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n          longCastlePossible = false;\n          break;\n        }\n      }\n\n      if (longCastlePossible && !this.board.isKingInCheck(this.color, this.board.pieces) && this.board.getPieceByField(row, 0)) {\n        const leftRook = this.board.getPieceByField(row, 0);\n\n        if (leftRook instanceof Rook) {\n          if (!leftRook.isMovedAlready) {\n            possiblePoints.push(new Point(row, col - 2));\n          }\n        }\n      }\n\n      let shortCastlePossible = true;\n\n      for (let i = col + 1; i < 7; ++i) {\n        if (!this.board.isFieldEmpty(row, i) || this.board.isFieldUnderAttack(row, i, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n          shortCastlePossible = false;\n          break;\n        }\n      }\n\n      if (shortCastlePossible && !this.board.isKingInCheck(this.color, this.board.pieces) && this.board.getPieceByField(row, 7)) {\n        const rightRook = this.board.getPieceByField(row, 7);\n\n        if (rightRook instanceof Rook) {\n          if (!rightRook.isMovedAlready) {\n            possiblePoints.push(new Point(row, col + 2));\n          }\n        }\n      }\n    }\n\n    return possiblePoints;\n  }\n\n  getPossibleCaptures() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col; // lewo\n\n    if (this.board.isFieldTakenByEnemy(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row, col - 1));\n    } // prawo\n\n\n    if (this.board.isFieldTakenByEnemy(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row, col + 1));\n    } // dol\n\n\n    if (this.board.isFieldTakenByEnemy(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row + 1, col));\n    } // gora\n\n\n    if (this.board.isFieldTakenByEnemy(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row - 1, col));\n    } // lewo gora\n\n\n    if (this.board.isFieldTakenByEnemy(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row - 1, col - 1));\n    } // prawo gora\n\n\n    if (this.board.isFieldTakenByEnemy(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row - 1, col + 1));\n    } // lewo dol\n\n\n    if (this.board.isFieldTakenByEnemy(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row + 1, col - 1));\n    } // prawo dol\n\n\n    if (this.board.isFieldTakenByEnemy(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) && !this.board.isFieldUnderAttack(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row + 1, col + 1));\n    }\n\n    return possiblePoints;\n  }\n\n  getCoveredFields() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col; // lewo\n\n    possiblePoints.push(new Point(row, col - 1)); // prawo\n\n    possiblePoints.push(new Point(row, col + 1)); // dol\n\n    possiblePoints.push(new Point(row + 1, col)); // gora\n\n    possiblePoints.push(new Point(row - 1, col)); // lewo gora\n\n    possiblePoints.push(new Point(row - 1, col - 1)); // prawo gora\n\n    possiblePoints.push(new Point(row - 1, col + 1)); // lewo dol\n\n    possiblePoints.push(new Point(row + 1, col - 1)); // prawo dol\n\n    possiblePoints.push(new Point(row + 1, col + 1));\n    return possiblePoints;\n  }\n\n}\n\nclass Bishop extends Piece {\n  constructor(point, color, constant, board) {\n    super(point, color, constant, 3, board);\n  }\n\n  getPossibleMoves() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col;\n\n    for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n      // lewa gorna przekatna\n      if (this.board.isFieldEmpty(i, j)) {\n        possiblePoints.push(new Point(i, j));\n      } else {\n        break;\n      }\n    }\n\n    for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n      // prawa gorna przekatna\n      if (this.board.isFieldEmpty(i, j)) {\n        possiblePoints.push(new Point(i, j));\n      } else {\n        break;\n      }\n    }\n\n    for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n      // lewa dolna przekatna\n      if (this.board.isFieldEmpty(i, j)) {\n        possiblePoints.push(new Point(i, j));\n      } else {\n        break;\n      }\n    }\n\n    for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n      // prawa dolna przekatna\n      if (this.board.isFieldEmpty(i, j)) {\n        possiblePoints.push(new Point(i, j));\n      } else {\n        break;\n      }\n    }\n\n    return possiblePoints;\n  }\n\n  getPossibleCaptures() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col;\n\n    for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n      // lewa gorna przekatna\n      if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(i, j));\n        break;\n      } else {\n        if (!this.board.isFieldEmpty(i, j)) {\n          break;\n        }\n      }\n    }\n\n    for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n      // prawa gorna przekatna\n      if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(i, j));\n        break;\n      } else {\n        if (!this.board.isFieldEmpty(i, j)) {\n          break;\n        }\n      }\n    }\n\n    for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n      // lewa dolna przekatna\n      if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(i, j));\n        break;\n      } else {\n        if (!this.board.isFieldEmpty(i, j)) {\n          break;\n        }\n      }\n    }\n\n    for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n      // prawa dolna przekatna\n      if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(i, j));\n        break;\n      } else {\n        if (!this.board.isFieldEmpty(i, j)) {\n          break;\n        }\n      }\n    }\n\n    return possiblePoints;\n  }\n\n  getCoveredFields() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col;\n\n    for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n      // lewa gorna przekatna\n      if (this.board.isFieldEmpty(i, j)) {\n        possiblePoints.push(new Point(i, j));\n      } else {\n        if (!(this.board.getPieceByField(i, j) instanceof King)) {\n          possiblePoints.push(new Point(i, j));\n        }\n\n        break;\n      }\n    }\n\n    for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n      // prawa gorna przekatna\n      if (this.board.isFieldEmpty(i, j)) {\n        possiblePoints.push(new Point(i, j));\n      } else {\n        if (!(this.board.getPieceByField(i, j) instanceof King)) {\n          possiblePoints.push(new Point(i, j));\n        }\n\n        break;\n      }\n    }\n\n    for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n      // lewa dolna przekatna\n      if (this.board.isFieldEmpty(i, j)) {\n        possiblePoints.push(new Point(i, j));\n      } else {\n        if (!(this.board.getPieceByField(i, j) instanceof King)) {\n          possiblePoints.push(new Point(i, j));\n        }\n\n        break;\n      }\n    }\n\n    for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n      // prawa dolna przekatna\n      if (this.board.isFieldEmpty(i, j)) {\n        possiblePoints.push(new Point(i, j));\n      } else {\n        if (!(this.board.getPieceByField(i, j) instanceof King)) {\n          possiblePoints.push(new Point(i, j));\n        }\n\n        break;\n      }\n    }\n\n    return possiblePoints;\n  }\n\n}\n\nclass Knight extends Piece {\n  constructor(point, color, constant, board) {\n    super(point, color, constant, 3, board);\n    this.isMovedAlready = false;\n  }\n\n  getPossibleMoves() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col; // gora -> lewo\n\n    if (this.board.isFieldEmpty(row - 2, col - 1)) {\n      possiblePoints.push(new Point(row - 2, col - 1));\n    } // gora -> prawo\n\n\n    if (this.board.isFieldEmpty(row - 2, col + 1)) {\n      possiblePoints.push(new Point(row - 2, col + 1));\n    } // lewo -> gora\n\n\n    if (this.board.isFieldEmpty(row - 1, col - 2)) {\n      possiblePoints.push(new Point(row - 1, col - 2));\n    } // prawo -> gora\n\n\n    if (this.board.isFieldEmpty(row - 1, col + 2)) {\n      possiblePoints.push(new Point(row - 1, col + 2));\n    } // lewo -> dol\n\n\n    if (this.board.isFieldEmpty(row + 1, col - 2)) {\n      possiblePoints.push(new Point(row + 1, col - 2));\n    } // prawo -> dol\n\n\n    if (this.board.isFieldEmpty(row + 1, col + 2)) {\n      possiblePoints.push(new Point(row + 1, col + 2));\n    } // dol -> lewo\n\n\n    if (this.board.isFieldEmpty(row + 2, col - 1)) {\n      possiblePoints.push(new Point(row + 2, col - 1));\n    } // dol -> prawo\n\n\n    if (this.board.isFieldEmpty(row + 2, col + 1)) {\n      possiblePoints.push(new Point(row + 2, col + 1));\n    }\n\n    return possiblePoints;\n  }\n\n  getPossibleCaptures() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col; // gora -> lewo\n\n    if (this.board.isFieldTakenByEnemy(row - 2, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row - 2, col - 1));\n    } // gora -> prawo\n\n\n    if (this.board.isFieldTakenByEnemy(row - 2, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row - 2, col + 1));\n    } // lewo -> gora\n\n\n    if (this.board.isFieldTakenByEnemy(row - 1, col - 2, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row - 1, col - 2));\n    } // prawo -> gora\n\n\n    if (this.board.isFieldTakenByEnemy(row - 1, col + 2, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row - 1, col + 2));\n    } // lewo -> dol\n\n\n    if (this.board.isFieldTakenByEnemy(row + 1, col - 2, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row + 1, col - 2));\n    } // prawo -> dol\n\n\n    if (this.board.isFieldTakenByEnemy(row + 1, col + 2, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row + 1, col + 2));\n    } // dol -> lewo\n\n\n    if (this.board.isFieldTakenByEnemy(row + 2, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row + 2, col - 1));\n    } // dol -> prawo\n\n\n    if (this.board.isFieldTakenByEnemy(row + 2, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      possiblePoints.push(new Point(row + 2, col + 1));\n    }\n\n    return possiblePoints;\n  }\n\n  getCoveredFields() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col; // gora -> lewo\n\n    possiblePoints.push(new Point(row - 2, col - 1)); // gora -> prawo\n\n    possiblePoints.push(new Point(row - 2, col + 1)); // lewo -> gora\n\n    possiblePoints.push(new Point(row - 1, col - 2)); // prawo -> gora\n\n    possiblePoints.push(new Point(row - 1, col + 2)); // lewo -> dol\n\n    possiblePoints.push(new Point(row + 1, col - 2)); // prawo -> dol\n\n    possiblePoints.push(new Point(row + 1, col + 2)); // dol -> lewo\n\n    possiblePoints.push(new Point(row + 2, col - 1)); // dol -> prawo\n\n    possiblePoints.push(new Point(row + 2, col + 1));\n    return possiblePoints;\n  }\n\n}\n\nclass Pawn extends Piece {\n  constructor(point, color, constant, board) {\n    super(point, color, constant, 1, board);\n    this.isMovedAlready = false;\n  }\n\n  getPossibleMoves() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col;\n\n    if (!this.board.reverted && this.color === Color.WHITE || this.board.reverted && this.color === Color.BLACK) {\n      if (this.board.isFieldEmpty(row - 1, col)) {\n        possiblePoints.push(new Point(row - 1, col));\n\n        if (!this.isMovedAlready && this.board.isFieldEmpty(row - 2, col)) {\n          possiblePoints.push(new Point(row - 2, col));\n        }\n      }\n    } else {\n      if (\n      /*!board.isFieldTakenByEnemy(row + 1, col, Color.WHITE) &&*/\n      this.board.isFieldEmpty(row + 1, col)) {\n        possiblePoints.push(new Point(row + 1, col));\n\n        if (!this.isMovedAlready && this.board.isFieldEmpty(row + 2, col)) {\n          possiblePoints.push(new Point(row + 2, col));\n        }\n      }\n    }\n\n    return possiblePoints;\n  }\n\n  getPossibleCaptures() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col;\n\n    if (!this.board.reverted && this.color === Color.WHITE || this.board.reverted && this.color === Color.BLACK) {\n      if (this.board.isFieldTakenByEnemy(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(row - 1, col - 1));\n      }\n\n      if (this.board.isFieldTakenByEnemy(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(row - 1, col + 1));\n      }\n    } else {\n      if (this.board.isFieldTakenByEnemy(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(row + 1, col - 1));\n      }\n\n      if (this.board.isFieldTakenByEnemy(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(row + 1, col + 1));\n      }\n    }\n\n    if (this.board.enPassantPoint && this.board.enPassantPiece.color === (this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n      if (row === this.board.enPassantPiece.point.row && Math.abs(this.board.enPassantPiece.point.col - col) === 1) {\n        possiblePoints.push(this.board.enPassantPoint);\n      }\n    }\n\n    return possiblePoints;\n  }\n\n  getCoveredFields() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col;\n\n    if (!this.board.reverted && this.color === Color.WHITE || this.board.reverted && this.color === Color.BLACK) {\n      possiblePoints.push(new Point(row - 1, col - 1));\n      possiblePoints.push(new Point(row - 1, col + 1));\n    } else {\n      possiblePoints.push(new Point(row + 1, col - 1));\n      possiblePoints.push(new Point(row + 1, col + 1));\n    }\n\n    return possiblePoints;\n  }\n\n}\n\nclass Queen extends Piece {\n  constructor(point, color, constant, board) {\n    super(point, color, constant, 9, board);\n  }\n\n  getPossibleMoves() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col;\n\n    for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n      // lewa gorna przekatna\n      if (this.board.isFieldEmpty(i, j)) {\n        possiblePoints.push(new Point(i, j));\n      } else {\n        break;\n      }\n    }\n\n    for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n      // prawa gorna przekatna\n      if (this.board.isFieldEmpty(i, j)) {\n        possiblePoints.push(new Point(i, j));\n      } else {\n        break;\n      }\n    }\n\n    for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n      // lewa dolna przekatna\n      if (this.board.isFieldEmpty(i, j)) {\n        possiblePoints.push(new Point(i, j));\n      } else {\n        break;\n      }\n    }\n\n    for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n      // prawa dolna przekatna\n      if (this.board.isFieldEmpty(i, j)) {\n        possiblePoints.push(new Point(i, j));\n      } else {\n        break;\n      }\n    }\n\n    for (let i = row + 1; i < 8; ++i) {\n      // dol\n      if (this.board.isFieldEmpty(i, col)) {\n        possiblePoints.push(new Point(i, col));\n      } else {\n        break;\n      }\n    }\n\n    for (let i = row - 1; i >= 0; --i) {\n      // gora\n      if (this.board.isFieldEmpty(i, col)) {\n        possiblePoints.push(new Point(i, col));\n      } else {\n        break;\n      }\n    }\n\n    for (let j = col - 1; j >= 0; --j) {\n      // lewo\n      if (this.board.isFieldEmpty(row, j)) {\n        possiblePoints.push(new Point(row, j));\n      } else {\n        break;\n      }\n    }\n\n    for (let j = col + 1; j < 8; ++j) {\n      // prawo\n      if (this.board.isFieldEmpty(row, j)) {\n        possiblePoints.push(new Point(row, j));\n      } else {\n        break;\n      }\n    }\n\n    return possiblePoints;\n  }\n\n  getPossibleCaptures() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col;\n\n    for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n      // lewa gorna przekatna\n      if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(i, j));\n        break;\n      } else {\n        if (!this.board.isFieldEmpty(i, j)) {\n          break;\n        }\n      }\n    }\n\n    for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n      // prawa gorna przekatna\n      if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(i, j));\n        break;\n      } else {\n        if (!this.board.isFieldEmpty(i, j)) {\n          break;\n        }\n      }\n    }\n\n    for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n      // lewa dolna przekatna\n      if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(i, j));\n        break;\n      } else {\n        if (!this.board.isFieldEmpty(i, j)) {\n          break;\n        }\n      }\n    }\n\n    for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n      // prawa dolna przekatna\n      if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(i, j));\n        break;\n      } else {\n        if (!this.board.isFieldEmpty(i, j)) {\n          break;\n        }\n      }\n    }\n\n    for (let i = row + 1; i < 8; ++i) {\n      // dol\n      if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(i, col));\n        break;\n      } else {\n        if (!this.board.isFieldEmpty(i, col)) {\n          break;\n        }\n      }\n    }\n\n    for (let i = row - 1; i >= 0; --i) {\n      // gora\n      if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(i, col));\n        break;\n      } else {\n        if (!this.board.isFieldEmpty(i, col)) {\n          break;\n        }\n      }\n    }\n\n    for (let j = col - 1; j >= 0; --j) {\n      // lewo\n      if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(row, j));\n        break;\n      } else {\n        if (!this.board.isFieldEmpty(row, j)) {\n          break;\n        }\n      }\n    }\n\n    for (let j = col + 1; j < 8; ++j) {\n      // prawo\n      if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\n        possiblePoints.push(new Point(row, j));\n        break;\n      } else {\n        if (!this.board.isFieldEmpty(row, j)) {\n          break;\n        }\n      }\n    }\n\n    return possiblePoints;\n  }\n\n  getCoveredFields() {\n    const possiblePoints = [];\n    const row = this.point.row;\n    const col = this.point.col;\n\n    for (let i = row + 1; i < 8; ++i) {\n      // dol\n      if (this.board.isFieldEmpty(i, col)) {\n        possiblePoints.push(new Point(i, col));\n      } else {\n        if (!(this.board.getPieceByField(i, col) instanceof King)) {\n          possiblePoints.push(new Point(i, col));\n        }\n\n        break;\n      }\n    }\n\n    for (let i = row - 1; i >= 0; --i) {\n      // gora\n      if (this.board.isFieldEmpty(i, col)) {\n        possiblePoints.push(new Point(i, col));\n      } else {\n        if (!(this.board.getPieceByField(i, col) instanceof King)) {\n          possiblePoints.push(new Point(i, col));\n        }\n\n        break;\n      }\n    }\n\n    for (let j = col - 1; j >= 0; --j) {\n      // lewo\n      if (this.board.isFieldEmpty(row, j)) {\n        possiblePoints.push(new Point(row, j));\n      } else {\n        if (!(this.board.getPieceByField(row, j) instanceof King)) {\n          possiblePoints.push(new Point(row, j));\n        }\n\n        break;\n      }\n    }\n\n    for (let j = col + 1; j < 8; ++j) {\n      // prawo\n      if (this.board.isFieldEmpty(row, j)) {\n        possiblePoints.push(new Point(row, j));\n      } else {\n        if (!(this.board.getPieceByField(row, j) instanceof King)) {\n          possiblePoints.push(new Point(row, j));\n        }\n\n        break;\n      }\n    }\n\n    for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\n      // lewa gorna przekatna\n      if (this.board.isFieldEmpty(i, j)) {\n        possiblePoints.push(new Point(i, j));\n      } else {\n        if (!(this.board.getPieceByField(i, j) instanceof King)) {\n          possiblePoints.push(new Point(i, j));\n        }\n\n        break;\n      }\n    }\n\n    for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\n      // prawa gorna przekatna\n      if (this.board.isFieldEmpty(i, j)) {\n        possiblePoints.push(new Point(i, j));\n      } else {\n        if (!(this.board.getPieceByField(i, j) instanceof King)) {\n          possiblePoints.push(new Point(i, j));\n        }\n\n        break;\n      }\n    }\n\n    for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\n      // lewa dolna przekatna\n      if (this.board.isFieldEmpty(i, j)) {\n        possiblePoints.push(new Point(i, j));\n      } else {\n        if (!(this.board.getPieceByField(i, j) instanceof King)) {\n          possiblePoints.push(new Point(i, j));\n        }\n\n        break;\n      }\n    }\n\n    for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\n      // prawa dolna przekatna\n      if (this.board.isFieldEmpty(i, j)) {\n        possiblePoints.push(new Point(i, j));\n      } else {\n        if (!(this.board.getPieceByField(i, j) instanceof King)) {\n          possiblePoints.push(new Point(i, j));\n        }\n\n        break;\n      }\n    }\n\n    return possiblePoints;\n  }\n\n}\n\nconst UnicodeConstants = {\n  WHITE_KING: {\n    name: 'King',\n    icon: '&#x2654;'\n  },\n  WHITE_QUEEN: {\n    name: 'Queen',\n    icon: '&#x2655;'\n  },\n  WHITE_KNIGHT: {\n    name: 'Knight',\n    icon: '&#x2658'\n  },\n  WHITE_ROOK: {\n    name: 'Rook',\n    icon: '&#x2656'\n  },\n  WHITE_PAWN: {\n    name: 'Pawn',\n    icon: '&#x2659'\n  },\n  WHITE_BISHOP: {\n    name: 'Bishop',\n    icon: '&#x2657'\n  },\n  BLACK_KING: {\n    name: 'King',\n    icon: '&#x265A'\n  },\n  BLACK_QUEEN: {\n    name: 'Queen',\n    icon: '&#x265B'\n  },\n  BLACK_KNIGHT: {\n    name: 'Knight',\n    icon: '&#x265E'\n  },\n  BLACK_ROOK: {\n    name: 'Rook',\n    icon: '&#x265C'\n  },\n  BLACK_PAWN: {\n    name: 'Pawn',\n    icon: '&#x265F'\n  },\n  BLACK_BISHOP: {\n    name: 'Bishop',\n    icon: '&#x265D'\n  }\n};\n\nclass DefaultFenProcessor {\n  process(notation, engineFacade) {\n    let fen = notation;\n\n    if (notation) {\n      engineFacade.board.reverted = false;\n      engineFacade.board.pieces = [];\n      const split = fen.split('/');\n\n      for (let i = 0; i < 8; ++i) {\n        let pointer = 0;\n\n        for (let j = 0; j < split[i].split(' ')[0].length; ++j) {\n          const chunk = split[i].charAt(j);\n\n          if (chunk.match(/[0-9]/)) {\n            pointer += Number(chunk);\n          } else {\n            switch (chunk) {\n              case 'r':\n                engineFacade.board.pieces.push(new Rook(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_ROOK, engineFacade.board));\n                break;\n\n              case 'n':\n                engineFacade.board.pieces.push(new Knight(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, engineFacade.board));\n                break;\n\n              case 'b':\n                engineFacade.board.pieces.push(new Bishop(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_BISHOP, engineFacade.board));\n                break;\n\n              case 'q':\n                engineFacade.board.pieces.push(new Queen(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_QUEEN, engineFacade.board));\n                break;\n\n              case 'k':\n                engineFacade.board.pieces.push(new King(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_KING, engineFacade.board));\n                break;\n\n              case 'p':\n                {\n                  const pawn = new Pawn(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_PAWN, engineFacade.board);\n\n                  if (pawn.color === Color.BLACK && pawn.point.row !== 1 || pawn.color === Color.WHITE && pawn.point.row !== 6) {\n                    pawn.isMovedAlready = true;\n                  }\n\n                  engineFacade.board.pieces.push(pawn);\n                  break;\n                }\n\n              case 'R':\n                engineFacade.board.pieces.push(new Rook(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_ROOK, engineFacade.board));\n                break;\n\n              case 'N':\n                engineFacade.board.pieces.push(new Knight(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, engineFacade.board));\n                break;\n\n              case 'B':\n                engineFacade.board.pieces.push(new Bishop(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_BISHOP, engineFacade.board));\n                break;\n\n              case 'Q':\n                engineFacade.board.pieces.push(new Queen(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_QUEEN, engineFacade.board));\n                break;\n\n              case 'K':\n                engineFacade.board.pieces.push(new King(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_KING, engineFacade.board));\n                break;\n\n              case 'P':\n                {\n                  const pawn = new Pawn(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_PAWN, engineFacade.board);\n\n                  if (pawn.color === Color.BLACK && pawn.point.row !== 1 || pawn.color === Color.WHITE && pawn.point.row !== 6) {\n                    pawn.isMovedAlready = true;\n                  }\n\n                  engineFacade.board.pieces.push(pawn);\n                  break;\n                }\n            }\n\n            ++pointer;\n          }\n        }\n      }\n\n      this.setCurrentPlayer(engineFacade.board, fen);\n      this.setCastles(engineFacade.board, fen);\n      this.setEnPassant(fen);\n      this.setFullMoveCount(fen);\n      engineFacade.board.fen = fen;\n    } else {\n      throw Error('Incorrect FEN provided');\n    }\n  }\n\n  setCurrentPlayer(board, fen) {\n    if (fen) {\n      const split = fen.split(' ');\n      board.currentWhitePlayer = split[1] === 'w';\n    }\n  }\n\n  setCastles(board, fen) {\n    if (fen) {\n      const split = fen.split(' ');\n      const castleChunk = split[2];\n\n      if (!castleChunk.includes('K')) {\n        this.setRookAlreadyMoved(board, Color.WHITE, 7);\n      }\n\n      if (!castleChunk.includes('Q')) {\n        this.setRookAlreadyMoved(board, Color.WHITE, 0);\n      }\n\n      if (!castleChunk.includes('k')) {\n        this.setRookAlreadyMoved(board, Color.BLACK, 7);\n      }\n\n      if (!castleChunk.includes('q')) {\n        this.setRookAlreadyMoved(board, Color.BLACK, 0);\n      }\n    }\n  }\n\n  setFullMoveCount(fen) {}\n\n  setEnPassant(fen) {\n    if (fen) {\n      const split = fen.split(' ');\n      const enPassantPoint = split[3];\n\n      if (enPassantPoint === '-') {\n        return;\n      } // if()\n\n    }\n  }\n\n  setRookAlreadyMoved(board, color, col) {\n    const rook = board.pieces.find(piece => piece.color === color && piece instanceof Rook && piece.point.col === col);\n\n    if (rook) {\n      rook.isMovedAlready = true;\n    }\n  }\n\n}\n\nclass MoveTranslation {\n  constructor(xAxis, yAxis, reverted) {\n    this._xAxis = xAxis;\n    this._yAxis = yAxis;\n    this._reverted = reverted;\n  }\n\n  get xAxis() {\n    return this._xAxis;\n  }\n\n  set xAxis(value) {\n    this._xAxis = value;\n  }\n\n  get yAxis() {\n    return this._yAxis;\n  }\n\n  set yAxis(value) {\n    this._yAxis = value;\n  }\n\n  get reverted() {\n    return this._reverted;\n  }\n\n  set reverted(value) {\n    this._reverted = value;\n  }\n\n}\n\nclass MoveUtils {\n  static willMoveCauseCheck(currentColor, row, col, destRow, destCol, board) {\n    const srcPiece = board.getPieceByField(row, col);\n    const destPiece = board.getPieceByField(destRow, destCol);\n\n    if (srcPiece) {\n      srcPiece.point.row = destRow;\n      srcPiece.point.col = destCol;\n    }\n\n    if (destPiece) {\n      board.pieces = board.pieces.filter(piece => piece !== destPiece);\n    }\n\n    const isBound = board.isKingInCheck(currentColor, board.pieces);\n\n    if (srcPiece) {\n      srcPiece.point.col = col;\n      srcPiece.point.row = row;\n    }\n\n    if (destPiece) {\n      board.pieces.push(destPiece);\n    }\n\n    return isBound;\n  }\n\n  static format(sourcePoint, destPoint, reverted) {\n    if (reverted) {\n      const sourceX = 104 - sourcePoint.col;\n      const destX = 104 - destPoint.col;\n      return String.fromCharCode(sourceX) + (sourcePoint.row + 1) + String.fromCharCode(destX) + (destPoint.row + 1);\n    } else {\n      const incrementX = 97;\n      return String.fromCharCode(sourcePoint.col + incrementX) + (Math.abs(sourcePoint.row - 7) + 1) + String.fromCharCode(destPoint.col + incrementX) + (Math.abs(destPoint.row - 7) + 1);\n    }\n  }\n\n  static translateCoordsToIndex(coords, reverted) {\n    let xAxis;\n    let yAxis;\n\n    if (reverted) {\n      xAxis = 104 - coords.charCodeAt(0);\n      yAxis = +coords.charAt(1) - 1;\n    } else {\n      xAxis = coords.charCodeAt(0) - 97;\n      yAxis = Math.abs(+coords.charAt(1) - 8);\n    }\n\n    return new MoveTranslation(xAxis, yAxis, reverted);\n  }\n\n  static findPieceByPossibleMovesContaining(coords, board, color) {\n    let indexes = this.translateCoordsToIndex(coords, board.reverted);\n    let destPoint = new Point(indexes.yAxis, indexes.xAxis);\n    let foundPieces = [];\n\n    for (let piece of board.pieces.filter(piece => piece.color === color)) {\n      for (let point of piece.getPossibleMoves()) {\n        if (!MoveUtils.willMoveCauseCheck(piece.color, piece.point.row, piece.point.col, indexes.yAxis, indexes.xAxis, board) && point.isEqual(destPoint)) {\n          foundPieces.push(piece);\n        }\n      }\n    }\n\n    return foundPieces;\n  }\n\n  static findPieceByPossibleCapturesContaining(coords, board, color) {\n    let indexes = this.translateCoordsToIndex(coords, board.reverted);\n    let destPoint = new Point(indexes.yAxis, indexes.xAxis);\n    let foundPieces = [];\n\n    for (let piece of board.pieces.filter(piece => piece.color === color)) {\n      for (let point of piece.getPossibleCaptures()) {\n        if (!MoveUtils.willMoveCauseCheck(piece.color, piece.point.row, piece.point.col, indexes.yAxis, indexes.xAxis, board) && point.isEqual(destPoint)) {\n          foundPieces.push(piece);\n        }\n      }\n    }\n\n    return foundPieces;\n  }\n\n  static formatSingle(point, reverted) {\n    if (reverted) {\n      const sourceX = 104 - point.col;\n      return String.fromCharCode(sourceX) + (point.row + 1);\n    } else {\n      const incrementX = 97;\n      return String.fromCharCode(point.col + incrementX) + (Math.abs(point.row - 7) + 1);\n    }\n  }\n\n  static getFirstLetterPiece(piece) {\n    if (piece instanceof Pawn) {\n      return 'P';\n    } else {\n      if (piece instanceof Knight) {\n        return 'N';\n      } else {\n        if (piece instanceof Bishop) {\n          return 'B';\n        } else {\n          if (piece instanceof Rook) {\n            return 'R';\n          } else {\n            if (piece instanceof King) {\n              return 'K';\n            } else {\n              if (piece instanceof Queen) {\n                return 'Q';\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return '';\n  }\n\n  static reverse(board, row) {\n    return board.reverted ? row + 1 : Math.abs(row - 7) + 1;\n  }\n\n  static formatCol(board, col) {\n    return board.reverted ? String.fromCharCode(104 - col) : String.fromCharCode(97 + col);\n  }\n\n}\n\nclass DefaultPiecesLoader {\n  static loadDefaultPieces(board) {\n    board.pieces = []; // piony czarne\n\n    for (let i = 0; i < 8; ++i) {\n      board.pieces.push(new Pawn(new Point(1, i), Color.BLACK, UnicodeConstants.BLACK_PAWN, board));\n    }\n\n    board.pieces.push(new Rook(new Point(0, 0), Color.BLACK, UnicodeConstants.BLACK_ROOK, board));\n    board.pieces.push(new Knight(new Point(0, 1), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, board));\n    board.pieces.push(new Bishop(new Point(0, 2), Color.BLACK, UnicodeConstants.BLACK_BISHOP, board));\n    board.pieces.push(new Queen(new Point(0, 3), Color.BLACK, UnicodeConstants.BLACK_QUEEN, board));\n    board.pieces.push(new King(new Point(0, 4), Color.BLACK, UnicodeConstants.BLACK_KING, board));\n    board.pieces.push(new Bishop(new Point(0, 5), Color.BLACK, UnicodeConstants.BLACK_BISHOP, board));\n    board.pieces.push(new Knight(new Point(0, 6), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, board));\n    board.pieces.push(new Rook(new Point(0, 7), Color.BLACK, UnicodeConstants.BLACK_ROOK, board)); // piony biale\n\n    for (let i = 0; i < 8; ++i) {\n      board.pieces.push(new Pawn(new Point(6, i), Color.WHITE, UnicodeConstants.WHITE_PAWN, board));\n    }\n\n    board.pieces.push(new Rook(new Point(7, 0), Color.WHITE, UnicodeConstants.WHITE_ROOK, board));\n    board.pieces.push(new Knight(new Point(7, 1), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, board));\n    board.pieces.push(new Bishop(new Point(7, 2), Color.WHITE, UnicodeConstants.WHITE_BISHOP, board));\n    board.pieces.push(new Queen(new Point(7, 3), Color.WHITE, UnicodeConstants.WHITE_QUEEN, board));\n    board.pieces.push(new King(new Point(7, 4), Color.WHITE, UnicodeConstants.WHITE_KING, board));\n    board.pieces.push(new Bishop(new Point(7, 5), Color.WHITE, UnicodeConstants.WHITE_BISHOP, board));\n    board.pieces.push(new Knight(new Point(7, 6), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, board));\n    board.pieces.push(new Rook(new Point(7, 7), Color.WHITE, UnicodeConstants.WHITE_ROOK, board));\n    board.calculateFEN();\n  }\n\n}\n\nclass DefaultPgnProcessor$1 {\n  process(notation, engineFacade) {\n    if (notation) {\n      engineFacade.board.reverted = false;\n      engineFacade.board.pieces = [];\n      engineFacade.reset();\n      DefaultPiecesLoader.loadDefaultPieces(engineFacade.board);\n      let moves = this.extractMoves(notation);\n      let counter = -1;\n\n      for (let move of moves) {\n        ++counter;\n        move = move.replace(/[+#]/g, '');\n        let promotionIndex = '';\n\n        if (move.includes('=')) {\n          promotionIndex = this.resolvePromotion(move.substring(move.length - 1));\n          move = move.substring(0, move.length - 2);\n        }\n\n        let color = counter === 0 || counter % 2 === 0 ? Color.WHITE : Color.BLACK;\n\n        if (/^[a-z]\\d$/g.test(move)) {\n          // zwykly ruch na wolne pole e4\n          let piece = MoveUtils.findPieceByPossibleMovesContaining(move, engineFacade.board, color).find(piece => piece instanceof Pawn); // en passant check\n\n          if (!piece) {\n            piece = MoveUtils.findPieceByPossibleCapturesContaining(move, engineFacade.board, color).find(piece => piece instanceof Pawn);\n          } // if piece is found for sure\n\n\n          if (piece) {\n            engineFacade.move(MoveUtils.formatSingle(piece.point, false) + move + promotionIndex);\n          }\n        } else {\n          if (/^[A-Z][a-h]\\d$/g.test(move)) {\n            // jezeli ma wielka litere, czyli trzeba odszukac ktora figura Nf3\n            let pieces = MoveUtils.findPieceByPossibleMovesContaining(move.substring(1), engineFacade.board, color);\n            let piece = pieces.find(piece => this.resolvePieceByFirstChar(move.charAt(0), piece));\n\n            if (piece) {\n              engineFacade.move(MoveUtils.formatSingle(piece.point, false) + move.substring(1) + promotionIndex);\n            } else {}\n          } else {\n            if ('O-O' === move) {\n              engineFacade.move(color === Color.WHITE ? 'e1g1' : 'e8g8');\n            } else {\n              if (/^[a-z]x[a-z]\\d$/g.test(move)) {\n                //exd5\n                let pieces = MoveUtils.findPieceByPossibleCapturesContaining(move.substring(move.indexOf('x') + 1), engineFacade.board, color).filter(piece => piece instanceof Pawn);\n                let piece;\n\n                if (pieces.length > 1) {\n                  piece = this.resolveByCol(pieces, move.substring(0, 1));\n                } else {\n                  piece = pieces[0];\n                }\n\n                if (piece) {\n                  engineFacade.move(MoveUtils.formatSingle(piece.point, false) + move.substring(move.indexOf('x') + 1) + promotionIndex);\n                } else {}\n              } else {\n                if (/^[A-Z]x[a-z]\\d$/g.test(move)) {\n                  let piece = MoveUtils.findPieceByPossibleCapturesContaining(move.substring(move.indexOf('x') + 1), engineFacade.board, color).find(piece => this.resolvePieceByFirstChar(move.substring(0, 1), piece));\n\n                  if (piece) {\n                    engineFacade.move(MoveUtils.formatSingle(piece.point, false) + move.substring(move.indexOf('x') + 1) + promotionIndex);\n                  } else {}\n                } else {\n                  if (move === 'O-O-O') {\n                    engineFacade.move(color === Color.WHITE ? 'e1c1' : 'e8c8');\n                  } else {\n                    if (/^[A-Z]\\dx[a-z]\\d$/g.test(move)) {\n                      //Ngxe4 sytuacja 2 skoczkow pion bicie\n                      let pieces = MoveUtils.findPieceByPossibleCapturesContaining(move.substring(move.indexOf('x') + 1), engineFacade.board, color).filter(piece => this.resolvePieceByFirstChar(move.charAt(0), piece));\n                      let piece = this.resolveByRow(pieces, move.substring(1, 2));\n\n                      if (piece) {\n                        engineFacade.move(MoveUtils.formatSingle(piece.point, false) + move.substring(move.indexOf('x') + 1) + promotionIndex);\n                      }\n                    } else {\n                      if (/^[A-Z][a-z][a-z]\\d$/g.test(move)) {\n                        // dwie wieze bez bicia Rac1 pion\n                        let pieces = MoveUtils.findPieceByPossibleMovesContaining(move.substring(2, 4), engineFacade.board, color).filter(piece => this.resolvePieceByFirstChar(move.charAt(0), piece));\n                        let piece = this.resolveByCol(pieces, move.substring(1, 2));\n\n                        if (piece) {\n                          engineFacade.move(MoveUtils.formatSingle(piece.point, false) + move.substring(2, 4) + promotionIndex);\n                        }\n                      } else {\n                        if (/^[A-Z][a-z]x[a-z]\\d$/g.test(move)) {\n                          let pieces = MoveUtils.findPieceByPossibleCapturesContaining(move.substring(move.indexOf('x') + 1), engineFacade.board, color).filter(piece => this.resolvePieceByFirstChar(move.charAt(0), piece));\n                          let piece = this.resolveByCol(pieces, move.substring(1, 2));\n\n                          if (piece) {\n                            engineFacade.move(MoveUtils.formatSingle(piece.point, false) + move.substring(move.indexOf('x') + 1) + promotionIndex);\n                          }\n                        } else {\n                          this.processR1f2(move, engineFacade, color, promotionIndex);\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  processR1f2(move, engineFacade, color, promotionIndex) {\n    if (/^[A-Z]\\d[a-z]\\d$/g.test(move)) {\n      // R1f2\n      let pieces = MoveUtils.findPieceByPossibleMovesContaining(move.substring(2, 4), engineFacade.board, color).filter(piece => this.resolvePieceByFirstChar(move.charAt(0), piece));\n      let piece = this.resolveByRow(pieces, move.substring(1, 2));\n\n      if (piece) {\n        engineFacade.move(MoveUtils.formatSingle(piece.point, false) + move.substring(2, 4) + promotionIndex);\n      }\n    }\n  }\n\n  extractMoves(notation) {\n    return notation.substring(notation.lastIndexOf(']') + 1).replace(/[0-9]+\\./g, '').replace(/\\s+/g, ' ').replace(/{[^}]*}/g, '').trim().split(' ').filter(s => s);\n  }\n\n  movePiece(piece, board, move) {\n    let indexes = MoveUtils.translateCoordsToIndex(move, board.reverted);\n    piece.point.col = indexes.xAxis;\n    piece.point.row = indexes.yAxis;\n  }\n\n  hasUpperCase(move) {\n    return /[A-Z]/.test(move);\n  }\n\n  resolvePieceByFirstChar(move, piece) {\n    let piecesFirstChar = '';\n\n    if (piece instanceof King) {\n      piecesFirstChar = 'K';\n    } else {\n      if (piece instanceof Queen) {\n        piecesFirstChar = 'Q';\n      } else {\n        if (piece instanceof Rook) {\n          piecesFirstChar = 'R';\n        } else {\n          if (piece instanceof Bishop) {\n            piecesFirstChar = 'B';\n          } else {\n            if (piece instanceof Knight) {\n              piecesFirstChar = 'N';\n            } else {\n              if (piece instanceof Pawn) {\n                piecesFirstChar = 'P';\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return move === piecesFirstChar;\n  }\n\n  isShortCastle(move) {\n    return move === 'O-O';\n  }\n\n  removePiece(coords, board) {\n    let indexes = MoveUtils.translateCoordsToIndex(coords, board.reverted);\n    board.pieces = board.pieces.filter(e => !e.point.isEqual(new Point(indexes.yAxis, indexes.xAxis)));\n  }\n\n  isLongCastle(move) {\n    return move === 'O-O-O';\n  }\n\n  resolveByCol(pieces, char) {\n    let firstPieceFormat = MoveUtils.formatSingle(pieces[0].point, false);\n    let secondPieceFormat = MoveUtils.formatSingle(pieces[1].point, false);\n    return firstPieceFormat.substring(0, 1) === char ? pieces[0] : pieces[1];\n  }\n\n  resolveByRow(pieces, char) {\n    let firstPieceFormat = MoveUtils.formatSingle(pieces[0].point, false);\n    let secondPieceFormat = MoveUtils.formatSingle(pieces[1].point, false);\n    return firstPieceFormat.substring(1, 2) === char ? pieces[0] : pieces[1];\n  }\n\n  replacePromotion(move) {\n    return move.replace('=Q', '1').replace('=R', '2').replace('=B', '3').replace('=K', '4');\n  }\n\n  resolvePromotion(promotionChar) {\n    switch (promotionChar) {\n      case 'Q':\n        return '1';\n\n      case 'R':\n        return '2';\n\n      case 'B':\n        return '3';\n\n      case 'N':\n        return '4';\n    }\n\n    return '';\n  }\n\n}\n\nclass NotationProcessorFactory {\n  static getProcessor(type) {\n    switch (type) {\n      case NotationType.FEN:\n        return new DefaultFenProcessor();\n\n      case NotationType.PGN:\n        return new DefaultPgnProcessor$1();\n    }\n  }\n\n  static getDefaultProcessor() {\n    return new DefaultFenProcessor();\n  }\n\n}\n\nvar NotationType;\n\n(function (NotationType) {\n  NotationType[NotationType[\"FEN\"] = 1] = \"FEN\";\n  NotationType[NotationType[\"PGN\"] = 2] = \"PGN\";\n})(NotationType || (NotationType = {}));\n\nclass DrawPoint {\n  constructor(x, y, color) {\n    this.x = x + 0.5;\n    this.y = y + 0.5;\n    this.color = color;\n  }\n\n  isEqual(that) {\n    return that && that.x === this.x && this.y === that.y;\n  }\n\n}\n\nclass ClickUtils {\n  static getClickPoint(event, top, height, left, width) {\n    return new Point(Math.floor((event.y - top) / (height / 8)), Math.floor((event.x - left) / (width / 8)));\n  }\n\n  static getDrawingPoint(tileSize, colorStrategy, x, y, ctrl, alt, shift, xAxis, yAxis) {\n    const squareSize = tileSize / 8;\n    const xx = Math.floor((x - xAxis) / squareSize);\n    const yy = Math.floor((y - yAxis) / squareSize);\n    let color = colorStrategy.resolve(ctrl, shift, alt);\n    return new DrawPoint(Math.floor(xx * squareSize + squareSize / 2), Math.floor(yy * squareSize + squareSize / 2), color);\n  }\n\n}\n\nclass HistoryMove {\n  constructor(move, piece, color, captured) {\n    this.move = move;\n    this.piece = piece;\n    this.color = color;\n    this.x = captured;\n  }\n\n  setGameStates(check, stalemate, mate) {\n    this.check = check;\n    this.stalemate = stalemate;\n    this.mate = mate;\n  }\n\n}\n\nclass HistoryMoveProvider {\n  constructor() {\n    this.historyMovesSubject$ = new BehaviorSubject([]);\n  }\n\n  get historyMoves() {\n    return this.historyMovesSubject$.value;\n  }\n\n  set historyMoves(states) {\n    this.historyMovesSubject$.next(states);\n  }\n\n  addMove(historyMove) {\n    this.historyMoves = [...this.historyMoves, historyMove];\n  }\n\n  pop() {\n    const lastHistoryMove = this.getLastMove();\n    this.historyMoves = this.historyMoves.filter(state => state !== lastHistoryMove);\n    return lastHistoryMove;\n  }\n\n  getAll() {\n    return this.historyMoves;\n  }\n\n  clear() {\n    this.historyMoves = [];\n  }\n\n  getLastMove() {\n    return this.historyMoves[this.getLastMoveIndex()];\n  }\n\n  getLastMoveIndex() {\n    return this.historyMoves.length - 1;\n  }\n\n}\n\nclass Constants {}\n\nConstants.DEFAULT_DARK_TILE_COLOR = 'rgb(97, 84, 61)';\nConstants.DEFAULT_LIGHT_TILE_COLOR = '#BAA378';\nConstants.DEFAULT_SIZE = 500;\nConstants.MIN_BOARD_SIZE = 100;\nConstants.MAX_BOARD_SIZE = 4000;\nConstants.DEFAULT_SOURCE_POINT_COLOR = 'rgba(146, 111, 26, 0.79)';\nConstants.DEFAULT_DESTINATION_POINT_COLOR = '#b28e1a';\nConstants.DEFAULT_LEGAL_MOVE_POINT_COLOR = 'radial-gradient(#13262F 15%, transparent 20%);';\n\nclass PieceIconInputManager {\n  constructor() {\n    this._defaultIcons = false;\n  }\n\n  get pieceIconInput() {\n    return this._pieceIconInput;\n  }\n\n  set pieceIconInput(value) {\n    this._pieceIconInput = value;\n  }\n\n  get defaultIcons() {\n    return this._defaultIcons;\n  }\n\n  set defaultIcons(value) {\n    this._defaultIcons = value;\n  }\n\n  isDefaultIcons() {\n    return this.pieceIconInput === undefined || this.pieceIconInput === null;\n  }\n\n  getPieceIcon(piece) {\n    let isWhite = piece.color === Color.WHITE;\n\n    switch (piece.constructor) {\n      case King:\n        return isWhite ? this.pieceIconInput.whiteKingUrl : this.pieceIconInput.blackKingUrl;\n\n      case Queen:\n        return isWhite ? this.pieceIconInput.whiteQueenUrl : this.pieceIconInput.blackQueenUrl;\n\n      case Rook:\n        return isWhite ? this.pieceIconInput.whiteRookUrl : this.pieceIconInput.blackRookUrl;\n\n      case Bishop:\n        return isWhite ? this.pieceIconInput.whiteBishopUrl : this.pieceIconInput.blackBishopUrl;\n\n      case Knight:\n        return isWhite ? this.pieceIconInput.whiteKnightUrl : this.pieceIconInput.blackKnightUrl;\n\n      case Pawn:\n        return isWhite ? this.pieceIconInput.whitePawnUrl : this.pieceIconInput.blackPawnUrl;\n    }\n  }\n\n  loadDefaultData() {\n    this.pieceIconInput = {\n      blackBishopUrl: '',\n      blackKingUrl: '',\n      blackKnightUrl: '',\n      blackQueenUrl: '',\n      blackRookUrl: '',\n      whiteBishopUrl: '',\n      whiteKingUrl: '',\n      whiteKnightUrl: '',\n      whitePawnUrl: '',\n      whiteQueenUrl: '',\n      whiteRookUrl: '',\n      blackPawnUrl: 'a'\n    };\n  }\n\n}\n\nclass CoordsProvider {\n  constructor() {\n    this.defaultXCoords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    this.defaultYCoords = [8, 7, 6, 5, 4, 3, 2, 1];\n    this.currentXCoords = [...this.defaultXCoords];\n    this.currentYCoords = [...this.defaultYCoords];\n  }\n\n  get xCoords() {\n    return this.currentXCoords;\n  }\n\n  get yCoords() {\n    return this.currentYCoords;\n  }\n\n  reverse() {\n    this.currentXCoords = this.currentXCoords.reverse();\n    this.currentYCoords = this.currentYCoords.reverse();\n  }\n\n  reset() {\n    this.init();\n  }\n\n  init() {\n    this.currentXCoords = [...this.defaultXCoords];\n    this.currentYCoords = [...this.defaultYCoords];\n  }\n\n}\n\nclass AnimationDragEndProcessor {\n  dragEnded(event, disabling, startTrans) {\n    if (!disabling) {\n      if (startTrans) {\n        event.source._dragRef.getRootElement().style.transform = startTrans;\n      }\n    }\n  }\n\n}\n\nclass DragEndStrategy {\n  constructor() {\n    this.dragEndProcessor = new AnimationDragEndProcessor();\n  }\n\n  process(event, disabling, startTrans) {\n    this.dragEndProcessor.dragEnded(event, disabling, startTrans);\n  }\n\n  setDragEndProcessor(processor) {\n    this.dragEndProcessor = processor;\n  }\n\n}\n\nclass AnimationDragStartProcessor {\n  dragStarted(event) {\n    const style = event.source.getRootElement().style;\n    style.zIndex = '1000';\n    style.position = 'absolute';\n  }\n\n}\n\nclass DragStartStrategy {\n  constructor() {\n    this.dragStartProcessor = new AnimationDragStartProcessor();\n  }\n\n  process(event) {\n    this.dragStartProcessor.dragStarted(event);\n  }\n\n  setDragStartProcessor(processor) {\n    this.dragStartProcessor = processor;\n  }\n\n}\n\nclass DefaultColorProcessor {\n  resolve(ctrl, shift, alt) {\n    let color = 'green';\n\n    if (ctrl || shift) {\n      color = 'red';\n    }\n\n    if (alt) {\n      color = 'blue';\n    }\n\n    if ((shift || ctrl) && alt) {\n      color = 'orange';\n    }\n\n    return color;\n  }\n\n}\n\nclass ColorStrategy {\n  constructor() {\n    this.colorProcessor = new DefaultColorProcessor();\n  }\n\n  resolve(ctrl, shift, alt) {\n    return this.colorProcessor.resolve(ctrl, shift, alt);\n  }\n\n  setColorProcessor(colorProcessor) {\n    this.colorProcessor = colorProcessor;\n  }\n\n}\n\nclass DrawProvider {\n  constructor() {\n    this.arrowsSubject$ = new BehaviorSubject([]);\n    this.circlesSubject$ = new BehaviorSubject([]);\n    this.arrows$ = this.arrowsSubject$.asObservable();\n    this.circles$ = this.circlesSubject$.asObservable();\n  }\n\n  get circles() {\n    return this.circlesSubject$.value;\n  }\n\n  set circles(circles) {\n    this.circlesSubject$.next(circles);\n  }\n\n  get arrows() {\n    return this.arrowsSubject$.value;\n  }\n\n  set arrows(arrows) {\n    this.arrowsSubject$.next(arrows);\n  }\n\n  addCircle(circle) {\n    this.circles = [...this.circles, circle];\n  }\n\n  reomveCircle(removeCircle) {\n    this.circles = this.circles.filter(circle => !circle.isEqual(removeCircle));\n  }\n\n  addArrow(arrow) {\n    this.arrows = [...this.arrows, arrow];\n  }\n\n  removeArrow(removeArrow) {\n    this.arrows = this.arrows.filter(arrow => !arrow.isEqual(removeArrow));\n  }\n\n  containsCircle(checkCircle) {\n    return this.circles.some(circle => circle.isEqual(checkCircle));\n  }\n\n  containsArrow(checkArrow) {\n    return this.arrows.some(arrow => arrow.isEqual(checkArrow));\n  }\n\n  clear() {\n    this.arrows = [];\n    this.circles = [];\n  }\n\n}\n\nclass AbstractPgnProcessor {\n  constructor() {\n    this.pgn = '';\n    this.currentIndex = 0.5;\n  }\n\n  getPGN() {\n    return this.pgn;\n  }\n\n  processChecks(checkmate, check, stalemate) {\n    if (checkmate) {\n      this.pgn += '#';\n    } else {\n      if (check) {\n        this.pgn += '+';\n      }\n    }\n  }\n\n  reset() {\n    this.pgn = '';\n    this.currentIndex = 0.5;\n  }\n\n  addPromotionChoice(promotion) {\n    switch (promotion) {\n      case 1:\n        this.pgn += '=Q';\n        break;\n\n      case 2:\n        this.pgn += '=R';\n        break;\n\n      case 3:\n        this.pgn += '=B';\n        break;\n\n      case 4:\n        this.pgn += '=N';\n        break;\n    }\n  }\n\n  removeLast() {\n    if (this.currentIndex >= 0.5) {\n      this.currentIndex -= 0.5;\n      const regex1 = new RegExp(/\\d+\\./g);\n      regex1.test(this.pgn);\n      this.pgn = this.pgn.substring(0, regex1.lastIndex).trim();\n    }\n  }\n\n}\n\nclass DefaultPgnProcessor extends AbstractPgnProcessor {\n  process(board, sourcePiece, destPoint, destPiece) {\n    this.currentIndex += 0.5;\n    this.pgn += this.currentIndex % Math.floor(this.currentIndex) === 0 ? ' ' + this.currentIndex + '. ' : ' ';\n    let possibleCaptures = [];\n    let possibleMoves = [];\n\n    if (destPiece) {\n      possibleCaptures = MoveUtils.findPieceByPossibleCapturesContaining(MoveUtils.formatSingle(destPoint, board.reverted), board, sourcePiece.color).filter(piece => piece.constructor.name === sourcePiece.constructor.name);\n    }\n\n    possibleMoves = MoveUtils.findPieceByPossibleMovesContaining(MoveUtils.formatSingle(destPoint, board.reverted), board, sourcePiece.color).filter(piece => piece.constructor.name === sourcePiece.constructor.name);\n\n    if (sourcePiece instanceof Pawn && !destPiece && possibleCaptures.length === 0) {\n      this.pgn += MoveUtils.formatSingle(destPoint, board.reverted);\n    } else {\n      if (sourcePiece instanceof Pawn && destPiece) {\n        this.pgn += MoveUtils.formatSingle(sourcePiece.point, board.reverted).substring(0, 1) + 'x' + MoveUtils.formatSingle(destPoint, board.reverted);\n      } else {\n        if (sourcePiece instanceof King && Math.abs(sourcePiece.point.col - destPoint.col) === 2) {\n          if (board.reverted) {\n            this.pgn += destPoint.col < 2 ? 'O-O' : 'O-O-O';\n          } else {\n            this.pgn += destPoint.col < 3 ? 'O-O-O' : 'O-O';\n          }\n        } else {\n          if (!(sourcePiece instanceof Pawn) && possibleCaptures.length === 0 && possibleMoves.length < 2) {\n            // Nf3\n            this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.formatSingle(destPoint, board.reverted);\n          } else {\n            if (possibleMoves && possibleMoves.length === 2 && possibleCaptures.length === 0) {\n              // Nbd7\n              if (this.isEqualByCol(possibleMoves[0], possibleMoves[1])) {\n                this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.reverse(board, sourcePiece.point.row) + MoveUtils.formatSingle(destPoint, board.reverted);\n              } else {\n                this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.formatCol(board, sourcePiece.point.col) + MoveUtils.formatSingle(destPoint, board.reverted);\n              }\n            } else {\n              if (possibleCaptures.length > 1) {\n                if (this.isEqualByCol(possibleCaptures[0], possibleCaptures[1])) {\n                  this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.reverse(board, sourcePiece.point.row) + 'x' + MoveUtils.formatSingle(destPoint, board.reverted);\n                } else {\n                  this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.formatCol(board, sourcePiece.point.col) + 'x' + MoveUtils.formatSingle(destPoint, board.reverted);\n                }\n              } else {\n                this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + 'x' + MoveUtils.formatSingle(destPoint, board.reverted);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    this.pgn = this.pgn.trim();\n  }\n\n  resolvePieceByFirstChar(move, piece) {\n    return MoveUtils.getFirstLetterPiece(piece) === move;\n  }\n\n  isEqualByCol(aPiece, bPiece) {\n    return aPiece.point.col === bPiece.point.col;\n  }\n\n}\n\nclass AbstractEngineFacade {\n  constructor(board) {\n    this.dragStartStrategy = new DragStartStrategy();\n    this.dragEndStrategy = new DragEndStrategy();\n    this.pgnProcessor = new DefaultPgnProcessor();\n    this.colorStrategy = new ColorStrategy();\n    this.coords = new CoordsProvider();\n    this.heightAndWidth = Constants.DEFAULT_SIZE;\n    this.freeMode = false;\n    this.drawProvider = new DrawProvider();\n    this.pieceIconManager = new PieceIconInputManager();\n    this.moveHistoryProvider = new HistoryMoveProvider();\n    this.disabling = false;\n    this.board = board;\n  }\n\n  checkIfPawnFirstMove(piece) {\n    if (piece instanceof Pawn) {\n      piece.isMovedAlready = true;\n    }\n  }\n\n  checkIfRookMoved(piece) {\n    if (piece instanceof Rook) {\n      piece.isMovedAlready = true;\n    }\n  }\n\n  checkIfKingMoved(piece) {\n    if (piece instanceof King) {\n      piece.isMovedAlready = true;\n    }\n  }\n\n  getMoveHistory() {\n    return this.moveHistoryProvider.getAll();\n  }\n\n}\n\nclass BoardLoader {\n  constructor(engineFacade, notationProcessor) {\n    this.engineFacade = engineFacade;\n\n    if (notationProcessor) {\n      this.notationProcessor = notationProcessor;\n    } else {\n      this.notationProcessor = NotationProcessorFactory.getDefaultProcessor();\n    }\n  }\n\n  addPieces() {\n    DefaultPiecesLoader.loadDefaultPieces(this.engineFacade.board);\n  }\n\n  loadFEN(fen) {\n    this.notationProcessor.process(fen, this.engineFacade);\n  }\n\n  loadPGN(pgn) {\n    this.notationProcessor.process(pgn, this.engineFacade);\n  }\n\n  setEngineFacade(engineFacade) {\n    this.engineFacade = engineFacade;\n  }\n\n  setNotationProcessor(notationProcessor) {\n    this.notationProcessor = notationProcessor;\n  }\n\n}\n\nclass BoardState {\n  constructor(board) {\n    this.board = board;\n  }\n\n}\n\nclass BoardStateProvider {\n  constructor() {\n    this.statesSubject$ = new BehaviorSubject([]);\n  }\n\n  get states() {\n    return this.statesSubject$.value;\n  }\n\n  set states(states) {\n    this.statesSubject$.next(states);\n  }\n\n  addMove(state) {\n    this.states = [...this.states, state];\n  }\n\n  getStates() {\n    return this.states;\n  }\n\n  pop() {\n    const lastState = this.getLastState();\n    this.states = this.states.filter(state => state !== lastState);\n    return lastState;\n  }\n\n  isEmpty() {\n    return this.states.length === 0;\n  }\n\n  clear() {\n    this.states = [];\n  }\n\n  getLastState() {\n    return this.states[this.getLastStateIndex()];\n  }\n\n  getLastStateIndex() {\n    return this.states.length - 1;\n  }\n\n}\n\nclass Arrow {\n  isEqual(arrow) {\n    return arrow && this.start.isEqual(arrow.start) && this.end.isEqual(arrow.end);\n  }\n\n}\n\nclass Circle {\n  isEqual(circle) {\n    return circle && this.drawPoint.isEqual(circle.drawPoint);\n  }\n\n}\n\nclass PieceAbstractDecorator {\n  constructor(piece) {\n    this.piece = piece;\n  }\n\n}\n\nclass AvailableMoveDecorator extends PieceAbstractDecorator {\n  constructor(piece, pointClicked, color, board) {\n    super(piece);\n    this.pointClicked = pointClicked;\n    this.color = color;\n    this.board = board;\n  }\n\n  getPossibleCaptures() {\n    return this.piece.getPossibleCaptures().filter(point => !MoveUtils.willMoveCauseCheck(this.color, this.pointClicked.row, this.pointClicked.col, point.row, point.col, this.board));\n  }\n\n  getPossibleMoves() {\n    return this.piece.getPossibleMoves().filter(point => !MoveUtils.willMoveCauseCheck(this.color, this.pointClicked.row, this.pointClicked.col, point.row, point.col, this.board));\n  }\n\n}\n\nclass PiecePromotionResolver {\n  static resolvePromotionChoice(board, piece, index) {\n    const isWhite = piece.color === Color.WHITE;\n\n    switch (index) {\n      case 1:\n        board.pieces.push(new Queen(piece.point, piece.color, isWhite ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN, board));\n        break;\n\n      case 2:\n        board.pieces.push(new Rook(piece.point, piece.color, isWhite ? UnicodeConstants.WHITE_ROOK : UnicodeConstants.BLACK_ROOK, board));\n        break;\n\n      case 3:\n        board.pieces.push(new Bishop(piece.point, piece.color, isWhite ? UnicodeConstants.WHITE_BISHOP : UnicodeConstants.BLACK_BISHOP, board));\n        break;\n\n      case 4:\n        board.pieces.push(new Knight(piece.point, piece.color, isWhite ? UnicodeConstants.WHITE_KNIGHT : UnicodeConstants.BLACK_KNIGHT, board));\n        break;\n    }\n  }\n\n}\n\nvar PieceTypeInput;\n\n(function (PieceTypeInput) {\n  PieceTypeInput[PieceTypeInput[\"KING\"] = 1] = \"KING\";\n  PieceTypeInput[PieceTypeInput[\"QUEEN\"] = 2] = \"QUEEN\";\n  PieceTypeInput[PieceTypeInput[\"BISHOP\"] = 3] = \"BISHOP\";\n  PieceTypeInput[PieceTypeInput[\"KNIGHT\"] = 4] = \"KNIGHT\";\n  PieceTypeInput[PieceTypeInput[\"ROOK\"] = 5] = \"ROOK\";\n  PieceTypeInput[PieceTypeInput[\"PAWN\"] = 6] = \"PAWN\";\n})(PieceTypeInput || (PieceTypeInput = {}));\n\nvar ColorInput;\n\n(function (ColorInput) {\n  ColorInput[ColorInput[\"LIGHT\"] = 1] = \"LIGHT\";\n  ColorInput[ColorInput[\"DARK\"] = 2] = \"DARK\";\n})(ColorInput || (ColorInput = {}));\n\nclass PieceFactory {\n  static create(indexes, pieceTypeInput, colorInput, board) {\n    let piece;\n    let color = colorInput === ColorInput.LIGHT ? Color.WHITE : Color.BLACK;\n\n    switch (pieceTypeInput) {\n      case PieceTypeInput.QUEEN:\n        piece = new Queen(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN, board);\n        break;\n\n      case PieceTypeInput.KING:\n        piece = new King(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_KING : UnicodeConstants.BLACK_KING, board);\n        break;\n\n      case PieceTypeInput.KNIGHT:\n        piece = new Knight(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_KNIGHT : UnicodeConstants.BLACK_KNIGHT, board);\n        break;\n\n      case PieceTypeInput.BISHOP:\n        piece = new Bishop(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_BISHOP : UnicodeConstants.BLACK_BISHOP, board);\n        break;\n\n      case PieceTypeInput.ROOK:\n        piece = new Rook(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_ROOK : UnicodeConstants.BLACK_ROOK, board);\n        break;\n\n      case PieceTypeInput.PAWN:\n        piece = new Pawn(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_PAWN : UnicodeConstants.BLACK_PAWN, board);\n        break;\n    }\n\n    return piece;\n  }\n\n}\n\nclass EngineFacade extends AbstractEngineFacade {\n  constructor(board, moveChange) {\n    super(board);\n    this._selected = false;\n    this.moveChange = moveChange;\n    this.boardLoader = new BoardLoader(this);\n    this.boardLoader.addPieces();\n    this.boardStateProvider = new BoardStateProvider();\n  }\n\n  reset() {\n    this.boardStateProvider.clear();\n    this.moveHistoryProvider.clear();\n    this.boardLoader.addPieces();\n    this.board.reset();\n    this.coords.reset();\n    this.drawProvider.clear();\n    this.pgnProcessor.reset();\n  }\n\n  undo() {\n    if (!this.boardStateProvider.isEmpty()) {\n      const lastBoard = this.boardStateProvider.pop().board;\n\n      if (this.board.reverted) {\n        lastBoard.reverse();\n      }\n\n      this.board = lastBoard;\n      this.board.possibleCaptures = [];\n      this.board.possibleMoves = [];\n      this.board.activePiece = null;\n      this.moveHistoryProvider.pop();\n      this.board.calculateFEN();\n      this.pgnProcessor.removeLast();\n    }\n  }\n\n  saveMoveClone() {\n    const clone = this.board.clone();\n\n    if (this.board.reverted) {\n      clone.reverse();\n    }\n\n    this.moveStateProvider.addMove(new BoardState(clone));\n  }\n\n  move(coords) {\n    if (coords) {\n      const sourceIndexes = MoveUtils.translateCoordsToIndex(coords.substring(0, 2), this.board.reverted);\n      const destIndexes = MoveUtils.translateCoordsToIndex(coords.substring(2, 4), this.board.reverted);\n      const srcPiece = this.board.getPieceByPoint(sourceIndexes.yAxis, sourceIndexes.xAxis);\n\n      if (srcPiece) {\n        if (this.board.currentWhitePlayer && srcPiece.color === Color.BLACK || !this.board.currentWhitePlayer && srcPiece.color === Color.WHITE) {\n          return;\n        }\n\n        this.prepareActivePiece(srcPiece, srcPiece.point);\n\n        if (this.board.isPointInPossibleMoves(new Point(destIndexes.yAxis, destIndexes.xAxis)) || this.board.isPointInPossibleCaptures(new Point(destIndexes.yAxis, destIndexes.xAxis))) {\n          this.saveClone();\n          this.movePiece(srcPiece, new Point(destIndexes.yAxis, destIndexes.xAxis), coords.length === 5 ? +coords.substring(4, 5) : 0);\n          this.board.lastMoveSrc = new Point(sourceIndexes.yAxis, sourceIndexes.xAxis);\n          this.board.lastMoveDest = new Point(destIndexes.yAxis, destIndexes.xAxis);\n          this.disableSelection();\n        } else {\n          this.disableSelection();\n        }\n      }\n    }\n  }\n\n  prepareActivePiece(pieceClicked, pointClicked) {\n    this.board.activePiece = pieceClicked;\n    this._selected = true;\n    this.board.possibleCaptures = new AvailableMoveDecorator(pieceClicked, pointClicked, this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK, this.board).getPossibleCaptures();\n    this.board.possibleMoves = new AvailableMoveDecorator(pieceClicked, pointClicked, this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK, this.board).getPossibleMoves();\n  }\n\n  onPieceClicked(pieceClicked, pointClicked) {\n    if (this.board.currentWhitePlayer && pieceClicked.color === Color.BLACK || !this.board.currentWhitePlayer && pieceClicked.color === Color.WHITE) {\n      return;\n    }\n\n    this.prepareActivePiece(pieceClicked, pointClicked);\n  }\n\n  handleClickEvent(pointClicked, isMouseDown) {\n    let moving = false;\n\n    if ((this.board.isPointInPossibleMoves(pointClicked) || this.board.isPointInPossibleCaptures(pointClicked) || this.freeMode) && pointClicked.isInRange()) {\n      this.saveClone();\n      this.board.lastMoveSrc = new Point(this.board.activePiece.point.row, this.board.activePiece.point.col);\n      this.board.lastMoveDest = pointClicked.clone();\n      this.movePiece(this.board.activePiece, pointClicked);\n\n      if (!this.board.activePiece.point.isEqual(this.board.lastMoveSrc)) {\n        moving = true;\n      }\n    }\n\n    if (isMouseDown || moving) {\n      this.disableSelection();\n    }\n\n    this.disableSelection();\n    const pieceClicked = this.board.getPieceByPoint(pointClicked.row, pointClicked.col);\n\n    if (pieceClicked && !moving) {\n      this.onFreeMode(pieceClicked);\n      this.onPieceClicked(pieceClicked, pointClicked);\n    }\n  }\n\n  onMouseDown(event, pointClicked, left, top) {\n    this.moveDone = false;\n\n    if (event.button !== 0) {\n      this.drawPoint = ClickUtils.getDrawingPoint(this.heightAndWidth, this.colorStrategy, event.x, event.y, event.ctrlKey, event.altKey, event.shiftKey, left, top);\n      return;\n    }\n\n    this.drawProvider.clear();\n\n    if (this.board.activePiece && pointClicked.isEqual(this.board.activePiece.point)) {\n      this.disabling = true;\n      return;\n    }\n\n    const pieceClicked = this.board.getPieceByPoint(pointClicked.row, pointClicked.col);\n\n    if (this.freeMode) {\n      if (pieceClicked) {\n        if (event.ctrlKey) {\n          this.board.pieces = this.board.pieces.filter(e => e !== pieceClicked);\n          return;\n        }\n\n        this.board.currentWhitePlayer = pieceClicked.color === Color.WHITE;\n      }\n    }\n\n    if (this.isPieceDisabled(pieceClicked)) {\n      return;\n    }\n\n    if (this._selected) {\n      this.handleClickEvent(pointClicked, true);\n    } else {\n      if (pieceClicked) {\n        this.onFreeMode(pieceClicked);\n        this.onPieceClicked(pieceClicked, pointClicked);\n      }\n    }\n  }\n\n  onMouseUp(event, pointClicked, left, top) {\n    this.moveDone = false;\n\n    if (event.button !== 0 && !this.drawDisabled) {\n      this.addDrawPoint(event.x, event.y, event.ctrlKey, event.altKey, event.shiftKey, left, top);\n      return;\n    }\n\n    this.drawProvider.clear();\n\n    if (this.dragDisabled) {\n      return;\n    }\n\n    if (this.board.activePiece && pointClicked.isEqual(this.board.activePiece.point) && this.disabling) {\n      this.disableSelection();\n      this.disabling = false;\n      return;\n    }\n\n    const pieceClicked = this.board.getPieceByPoint(pointClicked.row, pointClicked.col);\n\n    if (this.isPieceDisabled(pieceClicked)) {\n      return;\n    }\n\n    if (this._selected) {\n      this.handleClickEvent(pointClicked, false); //   this.possibleMoves = activePiece.getPossibleMoves();\n    }\n  }\n\n  saveClone() {\n    const clone = this.board.clone();\n\n    if (this.board.reverted) {\n      clone.reverse();\n    }\n\n    this.boardStateProvider.addMove(new BoardState(clone));\n  }\n\n  movePiece(toMovePiece, newPoint, promotionIndex) {\n    const destPiece = this.board.pieces.find(piece => piece.point.col === newPoint.col && piece.point.row === newPoint.row);\n    this.pgnProcessor.process(this.board, toMovePiece, newPoint, destPiece);\n\n    if (destPiece && toMovePiece.color !== destPiece.color) {\n      this.board.pieces = this.board.pieces.filter(piece => piece !== destPiece);\n    } else {\n      if (destPiece && toMovePiece.color === destPiece.color) {\n        return;\n      }\n    }\n\n    this.historyMoveCandidate = new HistoryMove(MoveUtils.format(toMovePiece.point, newPoint, this.board.reverted), toMovePiece.constant.name, toMovePiece.color === Color.WHITE ? 'white' : 'black', !!destPiece);\n    this.moveHistoryProvider.addMove(this.historyMoveCandidate);\n\n    if (toMovePiece instanceof King) {\n      const squaresMoved = Math.abs(newPoint.col - toMovePiece.point.col);\n\n      if (squaresMoved > 1) {\n        if (newPoint.col < 3) {\n          const leftRook = this.board.getPieceByField(toMovePiece.point.row, 0);\n\n          if (!this.freeMode) {\n            leftRook.point.col = this.board.reverted ? 2 : 3;\n          }\n        } else {\n          const rightRook = this.board.getPieceByField(toMovePiece.point.row, 7);\n\n          if (!this.freeMode) {\n            rightRook.point.col = this.board.reverted ? 4 : 5;\n          }\n        }\n      }\n    }\n\n    if (toMovePiece instanceof Pawn) {\n      this.board.checkIfPawnTakesEnPassant(newPoint);\n      this.board.checkIfPawnEnpassanted(toMovePiece, newPoint);\n    } else {\n      this.board.enPassantPoint = null;\n      this.board.enPassantPiece = null;\n    }\n\n    toMovePiece.point = newPoint;\n    this.increaseFullMoveCount();\n    this.board.currentWhitePlayer = !this.board.currentWhitePlayer;\n\n    if (!this.checkForPawnPromote(toMovePiece, promotionIndex)) {\n      this.afterMoveActions();\n    }\n  }\n\n  checkForPawnPromote(toPromotePiece, promotionIndex) {\n    if (!(toPromotePiece instanceof Pawn)) {\n      return;\n    }\n\n    if (toPromotePiece.point.row === 0 || toPromotePiece.point.row === 7) {\n      this.board.pieces = this.board.pieces.filter(piece => piece !== toPromotePiece); // When we make move manually, we pass promotion index already, so we don't need\n      // to acquire it from promote dialog\n\n      if (!promotionIndex) {\n        this.openPromoteDialog(toPromotePiece);\n      } else {\n        PiecePromotionResolver.resolvePromotionChoice(this.board, toPromotePiece, promotionIndex);\n        this.afterMoveActions(promotionIndex);\n      }\n\n      return true;\n    }\n  }\n\n  afterMoveActions(promotionIndex) {\n    this.checkIfPawnFirstMove(this.board.activePiece);\n    this.checkIfRookMoved(this.board.activePiece);\n    this.checkIfKingMoved(this.board.activePiece);\n    this.board.blackKingChecked = this.board.isKingInCheck(Color.BLACK, this.board.pieces);\n    this.board.whiteKingChecked = this.board.isKingInCheck(Color.WHITE, this.board.pieces);\n    const check = this.board.blackKingChecked || this.board.whiteKingChecked;\n    const checkmate = this.checkForPossibleMoves(Color.BLACK) || this.checkForPossibleMoves(Color.WHITE);\n    const stalemate = this.checkForPat(Color.BLACK) || this.checkForPat(Color.WHITE);\n    this.historyMoveCandidate.setGameStates(check, stalemate, checkmate);\n    this.pgnProcessor.processChecks(checkmate, check, stalemate);\n    this.pgnProcessor.addPromotionChoice(promotionIndex);\n    this.disabling = false;\n    this.board.calculateFEN();\n    const lastMove = this.moveHistoryProvider.getLastMove();\n\n    if (lastMove && promotionIndex) {\n      lastMove.move += promotionIndex;\n    }\n\n    this.moveChange.emit(Object.assign(Object.assign({}, lastMove), {\n      check,\n      checkmate,\n      stalemate,\n      fen: this.board.fen,\n      pgn: {\n        pgn: this.pgnProcessor.getPGN()\n      },\n      freeMode: this.freeMode\n    }));\n    this.moveDone = true;\n  }\n\n  checkForPat(color) {\n    if (color === Color.WHITE && !this.board.whiteKingChecked) {\n      return this.checkForPossibleMoves(color);\n    } else {\n      if (color === Color.BLACK && !this.board.blackKingChecked) {\n        return this.checkForPossibleMoves(color);\n      }\n    }\n  }\n\n  openPromoteDialog(piece) {\n    if (piece.color === this.board.activePiece.color) {\n      this.modal.open(index => {\n        PiecePromotionResolver.resolvePromotionChoice(this.board, piece, index);\n        this.afterMoveActions(index);\n      });\n    }\n  }\n\n  checkForPossibleMoves(color) {\n    return !this.board.pieces.filter(piece => piece.color === color).some(piece => piece.getPossibleMoves().some(move => !MoveUtils.willMoveCauseCheck(color, piece.point.row, piece.point.col, move.row, move.col, this.board)) || piece.getPossibleCaptures().some(capture => !MoveUtils.willMoveCauseCheck(color, piece.point.row, piece.point.col, capture.row, capture.col, this.board)));\n  }\n\n  disableSelection() {\n    this._selected = false;\n    this.board.possibleCaptures = [];\n    this.board.activePiece = null;\n    this.board.possibleMoves = [];\n  }\n  /**\r\n   * Processes logic to allow freeMode based logic processing\r\n   */\n\n\n  onFreeMode(pieceClicked) {\n    if (!this.freeMode || pieceClicked === undefined || pieceClicked === null) {\n      return;\n    } // sets player as white in-case white pieces are selected, and vice-versa when black is selected\n\n\n    this.board.currentWhitePlayer = pieceClicked.color === Color.WHITE;\n  }\n\n  isPieceDisabled(pieceClicked) {\n    if (pieceClicked && pieceClicked.point) {\n      const foundCapture = this.board.possibleCaptures.find(capture => capture.col === pieceClicked.point.col && capture.row === pieceClicked.point.row);\n\n      if (foundCapture) {\n        return false;\n      }\n    }\n\n    return pieceClicked && (this.lightDisabled && pieceClicked.color === Color.WHITE || this.darkDisabled && pieceClicked.color === Color.BLACK);\n  }\n\n  addDrawPoint(x, y, crtl, alt, shift, left, top) {\n    const upPoint = ClickUtils.getDrawingPoint(this.heightAndWidth, this.colorStrategy, x, y, crtl, alt, shift, left, top);\n\n    if (this.drawPoint.isEqual(upPoint)) {\n      const circle = new Circle();\n      circle.drawPoint = upPoint;\n\n      if (!this.drawProvider.containsCircle(circle)) {\n        this.drawProvider.addCircle(circle);\n      } else {\n        this.drawProvider.reomveCircle(circle);\n      }\n    } else {\n      const arrow = new Arrow();\n      arrow.start = this.drawPoint;\n      arrow.end = upPoint;\n\n      if (!this.drawProvider.containsArrow(arrow)) {\n        this.drawProvider.addArrow(arrow);\n      } else {\n        this.drawProvider.removeArrow(arrow);\n      }\n    }\n  }\n\n  increaseFullMoveCount() {\n    if (!this.board.currentWhitePlayer) {\n      ++this.board.fullMoveCount;\n    }\n  }\n\n  addPiece(pieceTypeInput, colorInput, coords) {\n    if (this.freeMode && coords && pieceTypeInput > 0 && colorInput > 0) {\n      let indexes = MoveUtils.translateCoordsToIndex(coords, this.board.reverted);\n      let existing = this.board.getPieceByPoint(indexes.yAxis, indexes.xAxis);\n\n      if (existing) {\n        this.board.pieces = this.board.pieces.filter(e => e !== existing);\n      }\n\n      let createdPiece = PieceFactory.create(indexes, pieceTypeInput, colorInput, this.board);\n      this.saveClone();\n      this.board.pieces.push(createdPiece);\n      this.afterMoveActions();\n    }\n  }\n\n}\n\nclass Board {\n  constructor() {\n    this.board = [];\n    this.pieces = [];\n    this.enPassantPoint = null;\n    this.enPassantPiece = null;\n    this.lastMoveSrc = null;\n    this.lastMoveDest = null;\n    this.possibleCaptures = [];\n    this.possibleMoves = [];\n    this.currentWhitePlayer = true;\n    this.reverted = false;\n    this.fullMoveCount = 1;\n\n    for (let i = 0; i < 8; ++i) {\n      this.board[i] = [];\n\n      for (let j = 0; j < 8; ++j) {\n        this.board[i][j] = 0;\n      }\n    }\n  }\n\n  isXYInPossibleMoves(row, col) {\n    return this.possibleMoves.some(move => move.row === row && move.col === col);\n  }\n\n  isXYInPossibleCaptures(row, col) {\n    return this.possibleCaptures.some(capture => capture.row === row && capture.col === col);\n  }\n\n  isXYInSourceMove(i, j) {\n    return this.lastMoveSrc && this.lastMoveSrc.row === i && this.lastMoveSrc.col === j;\n  }\n\n  isXYInDestMove(i, j) {\n    return this.lastMoveDest && this.lastMoveDest.row === i && this.lastMoveDest.col === j;\n  }\n\n  isXYInActiveMove(i, j) {\n    return this.activePiece && this.activePiece.point.row === i && this.activePiece.point.col === j;\n  }\n\n  isPointInPossibleMoves(point) {\n    return this.possibleMoves.some(move => move.row === point.row && move.col === point.col);\n  }\n\n  isPointInPossibleCaptures(point) {\n    return this.possibleCaptures.some(capture => capture.row === point.row && capture.col === point.col);\n  }\n\n  reset() {\n    this.lastMoveDest = null;\n    this.lastMoveSrc = null;\n    this.whiteKingChecked = false;\n    this.blackKingChecked = false;\n    this.possibleCaptures = [];\n    this.possibleMoves = [];\n    this.activePiece = null;\n    this.reverted = false;\n    this.currentWhitePlayer = true;\n    this.enPassantPoint = null;\n    this.enPassantPiece = null;\n    this.fullMoveCount = 1;\n    this.calculateFEN();\n  }\n\n  reverse() {\n    this.reverted = !this.reverted;\n    this.activePiece = null;\n    this.possibleMoves = [];\n    this.possibleCaptures = [];\n    this.pieces.forEach(piece => this.reversePoint(piece.point));\n    this.reversePoint(this.lastMoveSrc);\n    this.reversePoint(this.lastMoveDest);\n\n    if (this.enPassantPoint && this.enPassantPiece) {\n      this.reversePoint(this.enPassantPoint);\n    }\n  }\n\n  clone() {\n    return cloneDeep(this);\n  }\n\n  isFieldTakenByEnemy(row, col, enemyColor) {\n    if (row > 7 || row < 0 || col > 7 || col < 0) {\n      return false;\n    }\n\n    return this.pieces.some(piece => piece.point.col === col && piece.point.row === row && piece.color === enemyColor);\n  }\n\n  isFieldEmpty(row, col) {\n    if (row > 7 || row < 0 || col > 7 || col < 0) {\n      return false;\n    }\n\n    return !this.pieces.some(piece => piece.point.col === col && piece.point.row === row);\n  }\n\n  isFieldUnderAttack(row, col, color) {\n    return this.pieces.filter(piece => piece.color === color).some(piece => piece.getCoveredFields().some(field => field.col === col && field.row === row));\n  }\n\n  getPieceByField(row, col) {\n    if (this.isFieldEmpty(row, col)) {\n      //   throw new Error('Piece not found');\n      return undefined;\n    }\n\n    return this.pieces.find(piece => piece.point.col === col && piece.point.row === row);\n  }\n\n  isKingInCheck(color, pieces) {\n    const king = pieces.find(piece => piece.color === color && piece instanceof King);\n\n    if (king) {\n      return pieces.some(piece => piece.getPossibleCaptures().some(point => point.col === king.point.col && point.row === king.point.row) && piece.color !== color);\n    }\n\n    return false;\n  }\n\n  getKingByColor(color) {\n    return this.pieces.find(piece => piece instanceof King && piece.color === color);\n  }\n\n  getCastleFENString(color) {\n    const king = this.getKingByColor(color);\n\n    if (!king || king.isMovedAlready) {\n      return '';\n    }\n\n    let fen = '';\n    const leftRook = this.getPieceByField(king.point.row, 0);\n    const rightRook = this.getPieceByField(king.point.row, 7);\n\n    if (rightRook instanceof Rook && rightRook.color === color) {\n      if (!rightRook.isMovedAlready) {\n        fen += this.reverted ? 'q' : 'k';\n      }\n    }\n\n    if (leftRook instanceof Rook && leftRook.color === color) {\n      if (!leftRook.isMovedAlready) {\n        fen += this.reverted ? 'k' : 'q';\n      }\n    }\n\n    fen = fen.split('').sort().join('');\n    return color === Color.BLACK ? fen : fen.toUpperCase();\n  }\n\n  getEnPassantFENString() {\n    if (this.enPassantPoint) {\n      if (this.reverted) {\n        return String.fromCharCode(104 - this.enPassantPoint.col) + (this.enPassantPoint.row + 1);\n      } else {\n        return String.fromCharCode(97 + this.enPassantPoint.col) + (Math.abs(this.enPassantPoint.row - 7) + 1);\n      }\n    } else {\n      return '-';\n    }\n  }\n\n  calculateFEN() {\n    let fen = '';\n\n    for (let i = 0; i < 8; ++i) {\n      let emptyFields = 0;\n\n      for (let j = 0; j < 8; ++j) {\n        const foundPiece = this.pieces.find(piece => piece.point.col === j && piece.point.row === i);\n\n        if (foundPiece) {\n          if (emptyFields > 0) {\n            fen += emptyFields;\n            emptyFields = 0;\n          }\n\n          if (foundPiece instanceof Rook) {\n            fen += foundPiece.color === Color.BLACK ? 'r' : 'R';\n          } else {\n            if (foundPiece instanceof Knight) {\n              fen += foundPiece.color === Color.BLACK ? 'n' : 'N';\n            } else {\n              if (foundPiece instanceof Bishop) {\n                fen += foundPiece.color === Color.BLACK ? 'b' : 'B';\n              } else {\n                if (foundPiece instanceof Queen) {\n                  fen += foundPiece.color === Color.BLACK ? 'q' : 'Q';\n                } else {\n                  if (foundPiece instanceof King) {\n                    fen += foundPiece.color === Color.BLACK ? 'k' : 'K';\n                  } else {\n                    if (foundPiece instanceof Pawn) {\n                      fen += foundPiece.color === Color.BLACK ? 'p' : 'P';\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          ++emptyFields;\n        }\n      }\n\n      if (emptyFields > 0) {\n        fen += emptyFields;\n      }\n\n      fen += '/';\n    }\n\n    fen = fen.substr(0, fen.length - 1);\n\n    if (this.reverted) {\n      fen = fen.split('').reverse().join('');\n    }\n\n    fen += ' ' + (this.currentWhitePlayer ? 'w' : 'b');\n    const whiteEnPassant = this.getCastleFENString(Color.WHITE);\n    const blackEnPassant = this.getCastleFENString(Color.BLACK);\n    let concatedEnPassant = whiteEnPassant + blackEnPassant;\n\n    if (!concatedEnPassant) {\n      concatedEnPassant = '-';\n    }\n\n    fen += ' ' + concatedEnPassant;\n    fen += ' ' + this.getEnPassantFENString();\n    fen += ' ' + 0;\n    fen += ' ' + this.fullMoveCount;\n    this.fen = fen;\n  }\n\n  isXYInPointSelection(i, j) {\n    return false;\n  }\n\n  reversePoint(point) {\n    if (point) {\n      point.row = Math.abs(point.row - 7);\n      point.col = Math.abs(point.col - 7);\n    }\n  }\n\n  getPieceByPoint(row, col) {\n    row = Math.floor(row);\n    col = Math.floor(col);\n    return this.pieces.find(piece => piece.point.col === col && piece.point.row === row);\n  }\n\n  checkIfPawnTakesEnPassant(newPoint) {\n    if (newPoint.isEqual(this.enPassantPoint)) {\n      this.pieces = this.pieces.filter(piece => piece !== this.enPassantPiece);\n      this.enPassantPoint = null;\n      this.enPassantPiece = null;\n    }\n  }\n\n  checkIfPawnEnpassanted(piece, newPoint) {\n    if (Math.abs(piece.point.row - newPoint.row) > 1) {\n      this.enPassantPiece = piece;\n      this.enPassantPoint = new Point((piece.point.row + newPoint.row) / 2, piece.point.col);\n    } else {\n      this.enPassantPoint = null;\n      this.enPassantPiece = null;\n    }\n  }\n\n  isKingChecked(piece) {\n    if (piece instanceof King) {\n      return piece.color === Color.WHITE ? this.whiteKingChecked : this.blackKingChecked;\n    }\n  }\n\n  getCurrentPlayerColor() {\n    return this.currentWhitePlayer ? Color.WHITE : Color.BLACK;\n  }\n\n}\n\nclass NgxChessBoardService {\n  constructor() {\n    this.componentMethodCallSource = new Subject();\n    this.componentMethodCalled$ = this.componentMethodCallSource.asObservable();\n  }\n\n  reset() {\n    this.componentMethodCallSource.next();\n  }\n\n}\n\nNgxChessBoardService.ɵfac = function NgxChessBoardService_Factory(t) {\n  return new (t || NgxChessBoardService)();\n};\n\nNgxChessBoardService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxChessBoardService,\n  factory: NgxChessBoardService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxChessBoardService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nclass PiecePromotionModalComponent {\n  constructor() {\n    this.color = 'white';\n    this.opened = false;\n  }\n\n  open(closeCallback) {\n    this.opened = true;\n    this.onCloseCallback = closeCallback;\n    this.modal.nativeElement.style.display = 'block';\n  }\n\n  changeSelection(index) {\n    this.modal.nativeElement.style.display = 'none';\n    this.opened = false;\n    this.onCloseCallback(index);\n  }\n\n  getPieceIcon(piece) {\n    let coloredPiece = '';\n\n    switch (piece.toLowerCase()) {\n      case 'queen':\n        coloredPiece = this.color === 'white' ? this.pieceIconInput.whiteQueenUrl : this.pieceIconInput.blackQueenUrl;\n        break;\n\n      case 'rook':\n        coloredPiece = this.color === 'white' ? this.pieceIconInput.whiteRookUrl : this.pieceIconInput.blackRookUrl;\n        break;\n\n      case 'bishop':\n        coloredPiece = this.color === 'white' ? this.pieceIconInput.whiteBishopUrl : this.pieceIconInput.blackBishopUrl;\n        break;\n\n      case 'knight':\n        coloredPiece = this.color === 'white' ? this.pieceIconInput.whiteKnightUrl : this.pieceIconInput.blackKnightUrl;\n        break;\n    }\n\n    return coloredPiece;\n  }\n\n}\n\nPiecePromotionModalComponent.ɵfac = function PiecePromotionModalComponent_Factory(t) {\n  return new (t || PiecePromotionModalComponent)();\n};\n\nPiecePromotionModalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PiecePromotionModalComponent,\n  selectors: [[\"app-piece-promotion-modal\"]],\n  viewQuery: function PiecePromotionModalComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modal = _t.first);\n    }\n  },\n  inputs: {\n    pieceIconInput: \"pieceIconInput\",\n    color: \"color\"\n  },\n  decls: 6,\n  vars: 2,\n  consts: [[1, \"container\"], [\"myModal\", \"\"], [1, \"wrapper\"], [1, \"content\"], [\"class\", \"piece-wrapper\", 4, \"ngIf\"], [1, \"piece-wrapper\"], [1, \"piece\", 3, \"click\"], [\"alt\", \"Queen\", 3, \"src\"], [\"alt\", \"Rook\", 3, \"src\"], [\"alt\", \"Bishop\", 3, \"src\"], [\"alt\", \"Knight\", 3, \"src\"]],\n  template: function PiecePromotionModalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"div\", 2)(3, \"div\", 3);\n      i0.ɵɵtemplate(4, PiecePromotionModalComponent_div_4_Template, 9, 4, \"div\", 4);\n      i0.ɵɵtemplate(5, PiecePromotionModalComponent_div_5_Template, 9, 0, \"div\", 4);\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.pieceIconInput);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.pieceIconInput);\n    }\n  },\n  directives: [i3.NgIf],\n  styles: [\".container[_ngcontent-%COMP%]{display:none;position:absolute;z-index:9999;top:0;color:#000;width:100%;height:100%;overflow:auto;background-color:#0006}.wrapper[_ngcontent-%COMP%]{position:relative;height:100%;width:100%}.content[_ngcontent-%COMP%]{background-color:#fefefe;margin:auto;position:relative;top:30%;font-size:100%;height:40%;padding:10px;border:1px solid #888;width:90%}.piece[_ngcontent-%COMP%]{font-size:5rem;height:100%;width:25%;cursor:pointer;display:inline-block;text-align:center}.piece[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{max-width:100%}.piece[_ngcontent-%COMP%]:hover{background-color:#ccc;border-radius:5px}.piece-wrapper[_ngcontent-%COMP%]{height:80%;width:100%}#close-button[_ngcontent-%COMP%]{border-radius:4px;background-color:#4caf50;border:none;color:#fff;padding-left:5px;padding-right:5px;text-align:center;text-decoration:none;display:inline-block}.selected[_ngcontent-%COMP%]{border:2px solid #00B919;border-radius:4px;box-sizing:border-box}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PiecePromotionModalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-piece-promotion-modal',\n      template: \"<div #myModal class=\\\"container\\\">\\r\\n    <div class=\\\"wrapper\\\">\\r\\n        <div class=\\\"content\\\">\\r\\n            <div class=\\\"piece-wrapper\\\" *ngIf=\\\"pieceIconInput\\\">\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(1)\\\">\\r\\n                    <img [src]=\\\"getPieceIcon('queen')\\\" alt=\\\"Queen\\\">\\r\\n                </div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(2)\\\">\\r\\n                    <img [src]=\\\"getPieceIcon('rook')\\\" alt=\\\"Rook\\\">\\r\\n                </div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(3)\\\">\\r\\n                    <img [src]=\\\"getPieceIcon('bishop')\\\" alt=\\\"Bishop\\\">\\r\\n                </div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(4)\\\">\\r\\n                    <img [src]=\\\"getPieceIcon('knight')\\\" alt=\\\"Knight\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"piece-wrapper\\\" *ngIf=\\\"!pieceIconInput\\\">\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(1)\\\">&#x265B;</div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(2)\\\">&#x265C;</div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(3)\\\">&#x265D;</div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(4)\\\">&#x265E;</div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\",\n      styles: [\".container{display:none;position:absolute;z-index:9999;top:0;color:#000;width:100%;height:100%;overflow:auto;background-color:#0006}.wrapper{position:relative;height:100%;width:100%}.content{background-color:#fefefe;margin:auto;position:relative;top:30%;font-size:100%;height:40%;padding:10px;border:1px solid #888;width:90%}.piece{font-size:5rem;height:100%;width:25%;cursor:pointer;display:inline-block;text-align:center}.piece img{max-width:100%}.piece:hover{background-color:#ccc;border-radius:5px}.piece-wrapper{height:80%;width:100%}#close-button{border-radius:4px;background-color:#4caf50;border:none;color:#fff;padding-left:5px;padding-right:5px;text-align:center;text-decoration:none;display:inline-block}.selected{border:2px solid #00B919;border-radius:4px;box-sizing:border-box}\\n\"]\n    }]\n  }], null, {\n    modal: [{\n      type: ViewChild,\n      args: ['myModal', {\n        static: false\n      }]\n    }],\n    pieceIconInput: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NgxChessBoardComponent {\n  constructor(ngxChessBoardService) {\n    this.ngxChessBoardService = ngxChessBoardService;\n    this.darkTileColor = Constants.DEFAULT_DARK_TILE_COLOR;\n    this.lightTileColor = Constants.DEFAULT_LIGHT_TILE_COLOR;\n    this.showCoords = true;\n    this.sourcePointColor = Constants.DEFAULT_SOURCE_POINT_COLOR;\n    this.destinationPointColor = Constants.DEFAULT_DESTINATION_POINT_COLOR;\n    this.legalMovesPointColor = Constants.DEFAULT_LEGAL_MOVE_POINT_COLOR;\n    this.showLastMove = true;\n    this.showLegalMoves = true;\n    this.showActivePiece = true;\n    this.showPossibleCaptures = true;\n    /**\r\n     * Enabling free mode removes turn-based restriction and allows to move any piece freely!\r\n     */\n\n    this.moveChange = new EventEmitter();\n    this.checkmate = new EventEmitter();\n    this.stalemate = new EventEmitter();\n    this.selected = false;\n    this.isDragging = false;\n    this.startTransition = '';\n    this.engineFacade = new EngineFacade(new Board(), this.moveChange);\n  }\n\n  set size(size) {\n    if (size && size >= Constants.MIN_BOARD_SIZE && size <= Constants.MAX_BOARD_SIZE) {\n      this.engineFacade.heightAndWidth = size;\n    } else {\n      this.engineFacade.heightAndWidth = Constants.DEFAULT_SIZE;\n    }\n\n    this.engineFacade.drawProvider.clear();\n    this.calculatePieceSize();\n  }\n\n  set freeMode(freeMode) {\n    this.engineFacade.freeMode = freeMode;\n  }\n\n  set dragDisabled(dragDisabled) {\n    this.engineFacade.dragDisabled = dragDisabled;\n  }\n\n  set drawDisabled(drawDisabled) {\n    this.engineFacade.drawDisabled = drawDisabled;\n  }\n\n  set pieceIcons(pieceIcons) {\n    this.engineFacade.pieceIconManager.pieceIconInput = pieceIcons;\n  }\n\n  set lightDisabled(lightDisabled) {\n    this.engineFacade.lightDisabled = lightDisabled;\n  }\n\n  set darkDisabled(darkDisabled) {\n    this.engineFacade.darkDisabled = darkDisabled;\n  }\n\n  onRightClick(event) {\n    event.preventDefault();\n  }\n\n  ngOnChanges(changes) {\n    if (changes.lightDisabled && this.lightDisabled && this.engineFacade.board.currentWhitePlayer || changes.darkDisabled && this.darkDisabled && !this.engineFacade.board.currentWhitePlayer) {\n      this.engineFacade.board.possibleCaptures = [];\n      this.engineFacade.board.possibleMoves = [];\n    }\n  }\n\n  ngOnInit() {\n    this.ngxChessBoardService.componentMethodCalled$.subscribe(() => {\n      this.engineFacade.reset();\n    });\n  }\n\n  ngAfterViewInit() {\n    this.engineFacade.modal = this.modal;\n    this.calculatePieceSize();\n  }\n\n  onMouseUp(event) {\n    this.engineFacade.onMouseUp(event, this.getClickPoint(event), this.boardRef.nativeElement.getBoundingClientRect().left, this.boardRef.nativeElement.getBoundingClientRect().top);\n  }\n\n  reverse() {\n    this.selected = false;\n    this.engineFacade.board.reverse();\n    this.engineFacade.coords.reverse();\n  }\n\n  updateBoard(board) {\n    this.engineFacade.board = board;\n    this.boardLoader.setEngineFacade(this.engineFacade);\n    this.engineFacade.board.possibleCaptures = [];\n    this.engineFacade.board.possibleMoves = [];\n  }\n\n  setFEN(fen) {\n    try {\n      this.engineFacade.boardLoader.setNotationProcessor(NotationProcessorFactory.getProcessor(NotationType.FEN));\n      this.engineFacade.boardLoader.loadFEN(fen);\n      this.engineFacade.board.possibleCaptures = [];\n      this.engineFacade.board.possibleMoves = [];\n      this.engineFacade.coords.reset();\n    } catch (exception) {\n      this.engineFacade.boardLoader.addPieces();\n    }\n  }\n\n  setPGN(pgn) {\n    try {\n      this.engineFacade.pgnProcessor.reset();\n      this.engineFacade.boardLoader.setNotationProcessor(NotationProcessorFactory.getProcessor(NotationType.PGN));\n      this.engineFacade.boardLoader.loadPGN(pgn);\n      this.engineFacade.board.possibleCaptures = [];\n      this.engineFacade.board.possibleMoves = [];\n      this.engineFacade.coords.reset();\n    } catch (exception) {\n      console.log(exception);\n      this.engineFacade.boardLoader.addPieces();\n    }\n  }\n\n  getFEN() {\n    return this.engineFacade.board.fen;\n  }\n\n  dragEnded(event) {\n    this.isDragging = false;\n    this.engineFacade.dragEndStrategy.process(event, this.engineFacade.moveDone, this.startTransition);\n  }\n\n  dragStart(event) {\n    this.isDragging = true;\n    let trans = event.source.getRootElement().style.transform.split(') '); //   this.startTrans= trans;\n\n    this.startTransition = trans.length === 2 ? trans[1] : trans[0];\n    this.engineFacade.dragStartStrategy.process(event);\n  }\n\n  onMouseDown(event) {\n    this.engineFacade.onMouseDown(event, this.getClickPoint(event), this.boardRef.nativeElement.getBoundingClientRect().left, this.boardRef.nativeElement.getBoundingClientRect().top);\n  }\n\n  getClickPoint(event) {\n    return ClickUtils.getClickPoint(event, this.boardRef.nativeElement.getBoundingClientRect().top, this.boardRef.nativeElement.getBoundingClientRect().height, this.boardRef.nativeElement.getBoundingClientRect().left, this.boardRef.nativeElement.getBoundingClientRect().width);\n  }\n\n  calculatePieceSize() {\n    this.pieceSize = this.engineFacade.heightAndWidth / 8;\n  }\n\n  getCustomPieceIcons(piece) {\n    return JSON.parse(`{ \"background-image\": \"url('${this.engineFacade.pieceIconManager.getPieceIcon(piece)}')\"}`);\n  }\n\n  move(coords) {\n    this.engineFacade.move(coords);\n  }\n\n  getMoveHistory() {\n    return this.engineFacade.getMoveHistory();\n  }\n\n  reset() {\n    this.engineFacade.reset();\n  }\n\n  undo() {\n    this.engineFacade.undo();\n  }\n\n  addPiece(pieceTypeInput, colorInput, coords) {\n    this.engineFacade.addPiece(pieceTypeInput, colorInput, coords);\n  }\n\n  getPGN() {\n    return this.engineFacade.pgnProcessor.getPGN();\n  }\n\n  dragMoved($event) {\n    let x = $event.pointerPosition.x - $event.source.getRootElement().parentElement.getBoundingClientRect().left - this.pieceSize / 2;\n    let y = $event.pointerPosition.y - $event.source.getRootElement().parentElement.getBoundingClientRect().top - this.pieceSize / 2;\n    $event.source.getRootElement().style.transform = 'translate3d(' + x + 'px, ' + y + 'px,0px)';\n  }\n\n  getTileBackgroundColor(i, j) {\n    let color = (i + j) % 2 === 0 ? this.lightTileColor : this.darkTileColor;\n\n    if (this.showLastMove) {\n      if (this.engineFacade.board.isXYInSourceMove(i, j)) {\n        color = this.sourcePointColor;\n      }\n\n      if (this.engineFacade.board.isXYInDestMove(i, j)) {\n        color = this.destinationPointColor;\n      }\n    }\n\n    return color;\n  }\n\n}\n\nNgxChessBoardComponent.ɵfac = function NgxChessBoardComponent_Factory(t) {\n  return new (t || NgxChessBoardComponent)(i0.ɵɵdirectiveInject(NgxChessBoardService));\n};\n\nNgxChessBoardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxChessBoardComponent,\n  selectors: [[\"ngx-chess-board\"]],\n  viewQuery: function NgxChessBoardComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c1, 5);\n      i0.ɵɵviewQuery(_c2, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.boardRef = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modal = _t.first);\n    }\n  },\n  hostBindings: function NgxChessBoardComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"contextmenu\", function NgxChessBoardComponent_contextmenu_HostBindingHandler($event) {\n        return ctx.onRightClick($event);\n      });\n    }\n  },\n  inputs: {\n    darkTileColor: \"darkTileColor\",\n    lightTileColor: \"lightTileColor\",\n    showCoords: \"showCoords\",\n    sourcePointColor: \"sourcePointColor\",\n    destinationPointColor: \"destinationPointColor\",\n    legalMovesPointColor: \"legalMovesPointColor\",\n    showLastMove: \"showLastMove\",\n    showLegalMoves: \"showLegalMoves\",\n    showActivePiece: \"showActivePiece\",\n    showPossibleCaptures: \"showPossibleCaptures\",\n    size: \"size\",\n    freeMode: \"freeMode\",\n    dragDisabled: \"dragDisabled\",\n    drawDisabled: \"drawDisabled\",\n    pieceIcons: \"pieceIcons\",\n    lightDisabled: \"lightDisabled\",\n    darkDisabled: \"darkDisabled\"\n  },\n  outputs: {\n    moveChange: \"moveChange\",\n    checkmate: \"checkmate\",\n    stalemate: \"stalemate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 13,\n  vars: 18,\n  consts: [[\"id\", \"board\", 3, \"pointerdown\", \"pointerup\"], [\"boardRef\", \"\"], [\"id\", \"drag\"], [\"class\", \"single-piece\", \"cdkDrag\", \"\", 3, \"cdkDragDisabled\", \"innerHTML\", \"ngStyle\", \"transform\", \"max-height\", \"font-size\", \"width\", \"height\", \"cdkDragEnded\", \"cdkDragMoved\", \"cdkDragStarted\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"board-row\", 4, \"ngFor\", \"ngForOf\"], [2, \"position\", \"absolute\", \"top\", \"0\", \"pointer-events\", \"none\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"arrow\", 4, \"ngFor\", \"ngForOf\"], [\"fill-opacity\", \"0.0\", \"stroke-width\", \"2\", 4, \"ngFor\", \"ngForOf\"], [3, \"pieceIconInput\", \"color\"], [\"modal\", \"\"], [\"cdkDrag\", \"\", 1, \"single-piece\", 3, \"cdkDragDisabled\", \"innerHTML\", \"ngStyle\", \"cdkDragEnded\", \"cdkDragMoved\", \"cdkDragStarted\"], [1, \"board-row\"], [\"class\", \"board-col\", 3, \"current-selection\", \"king-check\", \"point-circle\", \"possible-capture\", \"possible-point\", \"background-color\", 4, \"ngFor\", \"ngForOf\"], [1, \"board-col\"], [\"class\", \"yCoord\", 3, \"color\", \"font-size\", 4, \"ngIf\"], [\"class\", \"xCoord\", 3, \"color\", \"font-size\", 4, \"ngIf\"], [\"style\", \"height:100%; width:100%\", 4, \"ngIf\"], [1, \"yCoord\"], [1, \"xCoord\"], [2, \"height\", \"100%\", \"width\", \"100%\"], [3, \"ngClass\"], [\"markerHeight\", \"13\", \"markerWidth\", \"13\", \"orient\", \"auto\", \"refX\", \"9\", \"refY\", \"6\", 3, \"id\"], [\"d\", \"M2,2 L2,11 L10,6 L2,2\"], [1, \"arrow\"], [\"fill-opacity\", \"0.0\", \"stroke-width\", \"2\"]],\n  template: function NgxChessBoardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r28 = i0.ɵɵgetCurrentView();\n\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵlistener(\"pointerdown\", function NgxChessBoardComponent_Template_div_pointerdown_0_listener($event) {\n        i0.ɵɵrestoreView(_r28);\n\n        const _r6 = i0.ɵɵreference(12);\n\n        return !_r6.opened && ctx.onMouseDown($event);\n      })(\"pointerup\", function NgxChessBoardComponent_Template_div_pointerup_0_listener($event) {\n        i0.ɵɵrestoreView(_r28);\n\n        const _r6 = i0.ɵɵreference(12);\n\n        return !_r6.opened && ctx.onMouseUp($event);\n      });\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵtemplate(3, NgxChessBoardComponent_div_3_Template, 1, 13, \"div\", 3);\n      i0.ɵɵtemplate(4, NgxChessBoardComponent_div_4_Template, 2, 1, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(5, \"svg\", 5);\n      i0.ɵɵtemplate(6, NgxChessBoardComponent__svg_defs_6_Template, 3, 3, \"defs\", 6);\n      i0.ɵɵtemplate(7, NgxChessBoardComponent__svg_line_7_Template, 1, 6, \"line\", 7);\n      i0.ɵɵpipe(8, \"async\");\n      i0.ɵɵtemplate(9, NgxChessBoardComponent__svg_circle_9_Template, 1, 4, \"circle\", 8);\n      i0.ɵɵpipe(10, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelement(11, \"app-piece-promotion-modal\", 9, 10);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"height\", ctx.engineFacade.heightAndWidth, \"px\")(\"width\", ctx.engineFacade.heightAndWidth, \"px\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.engineFacade.board.pieces);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.engineFacade.board.board);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"height\", ctx.engineFacade.heightAndWidth)(\"width\", ctx.engineFacade.heightAndWidth);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpureFunction0(17, _c3));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 13, ctx.engineFacade.drawProvider.arrows$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(10, 15, ctx.engineFacade.drawProvider.circles$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"pieceIconInput\", ctx.engineFacade.pieceIconManager.pieceIconInput)(\"color\", ctx.engineFacade.board.getCurrentPlayerColor() ? \"white\" : \"black\");\n    }\n  },\n  directives: [PiecePromotionModalComponent, i3.NgForOf, i4.CdkDrag, i3.NgStyle, i3.NgIf, i3.NgClass],\n  pipes: [i3.AsyncPipe],\n  styles: [\"@charset \\\"UTF-8\\\";#board[_ngcontent-%COMP%]{font-family:Courier New,serif;position:relative}.board-row[_ngcontent-%COMP%]{display:block;width:100%;height:12.5%;position:relative}.board-col[_ngcontent-%COMP%]{position:relative;display:inline-block;width:12.5%;vertical-align:top;cursor:default;height:100%}.piece[_ngcontent-%COMP%]{height:100%;cursor:-webkit-grab;cursor:grab;width:100%;-moz-user-select:none;user-select:none;-webkit-user-select:none;background-size:cover;justify-content:center;text-align:center;color:#000!important;box-sizing:border-box}.piece[_ngcontent-%COMP%]:after{content:\\\"\\\\200b\\\";box-sizing:border-box}#drag[_ngcontent-%COMP%]{height:100%;width:100%}.possible-point[_ngcontent-%COMP%]{background:radial-gradient(#13262F 15%,transparent 20%)}.possible-point[_ngcontent-%COMP%]:hover, .possible-capture[_ngcontent-%COMP%]:hover{opacity:.4}.possible-capture[_ngcontent-%COMP%]{background:radial-gradient(transparent 0%,transparent 80%,#13262F 80%);opacity:.5;box-sizing:border-box;margin:0;padding:0}.king-check[_ngcontent-%COMP%]{background:radial-gradient(ellipse at center,red 0%,#e70000 25%,rgba(169,0,0,0) 89%,rgba(158,0,0,0) 100%)}.current-selection[_ngcontent-%COMP%]{background-color:#72620b!important}.yCoord[_ngcontent-%COMP%]{position:absolute;-moz-user-select:none;user-select:none;-webkit-user-select:none;cursor:pointer;right:.2em;font-family:Lucida Console,Courier,monospace;box-sizing:border-box}.xCoord[_ngcontent-%COMP%]{position:absolute;-moz-user-select:none;user-select:none;-webkit-user-select:none;cursor:pointer;left:.2em;bottom:0;font-family:Lucida Console,Courier,monospace;box-sizing:border-box}.hovering[_ngcontent-%COMP%]{background-color:red!important}.arrow[_ngcontent-%COMP%]{stroke-width:2}svg[_ngcontent-%COMP%]{filter:drop-shadow(1px 1px 0px #111) drop-shadow(-1px 1px 0px #111) drop-shadow(1px -1px 0px #111) drop-shadow(-1px -1px 0px #111)}[_nghost-%COMP%]{display:inline-block!important}.single-piece[_ngcontent-%COMP%]{position:absolute;z-index:999;justify-content:center;text-align:center;-moz-user-select:none;user-select:none;-webkit-user-select:none;color:#000!important;cursor:-webkit-grab;cursor:grab;background-size:cover}.single-piece[_ngcontent-%COMP%]:after{content:\\\"\\\\200b\\\";box-sizing:border-box}.cdk-drag[_ngcontent-%COMP%]:not(.cdk-drag-dragging){transition:transform .2s cubic-bezier(0,.3,.14,.49)}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxChessBoardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-chess-board',\n      template: \"<div\\n    id=\\\"board\\\"\\n    [style.height.px]=\\\"engineFacade.heightAndWidth\\\"\\n    [style.width.px]=\\\"engineFacade.heightAndWidth\\\"\\n    (pointerdown)=\\\"!modal.opened && onMouseDown($event)\\\"\\n    (pointerup)=\\\"!modal.opened && onMouseUp($event)\\\"\\n    #boardRef\\n>\\n    <div id=\\\"drag\\\">\\n        <div\\n            [cdkDragDisabled]=\\\"engineFacade.dragDisabled\\\"\\n            (cdkDragEnded)=\\\"dragEnded($event)\\\"\\n            (cdkDragMoved)=\\\"dragMoved($event)\\\"\\n            (cdkDragStarted)=\\\"dragStart($event)\\\"\\n            class=\\\"single-piece\\\" [innerHTML]=\\\"engineFacade.pieceIconManager.isDefaultIcons() ? piece.constant.icon : ''\\\"\\n            [ngStyle]=\\\"engineFacade.pieceIconManager.isDefaultIcons() ? '' : getCustomPieceIcons(piece)\\\"\\n            [style.transform]=\\\"'translate3d(' + piece.point.col * pieceSize + 'px, ' + piece.point.row * pieceSize + 'px,0px)'\\\"\\n            [style.max-height]=\\\"pieceSize + 'px'\\\"\\n            [style.font-size]=\\\"pieceSize * 0.8 + 'px'\\\"\\n            [style.width]=\\\"pieceSize + 'px'\\\"\\n            [style.height]=\\\"pieceSize + 'px'\\\"\\n            cdkDrag\\n            *ngFor=\\\"let piece of engineFacade.board.pieces; let i = index\\\"\\n        >\\n        </div>\\n        <div\\n            class=\\\"board-row\\\"\\n            *ngFor=\\\"let row of engineFacade.board.board; let i = index\\\"\\n        >\\n            <div\\n                class=\\\"board-col\\\"\\n                [class.current-selection]=\\\"showActivePiece && engineFacade.board.isXYInActiveMove(i,j)\\\"\\n                [class.king-check]=\\\" engineFacade.board.isKingChecked(engineFacade.board.getPieceByPoint(i,j))\\\"\\n                [class.point-circle]=\\\"engineFacade.board.isXYInPointSelection(i, j)\\\"\\n                [class.possible-capture]=\\\"showPossibleCaptures && engineFacade.board.isXYInPossibleCaptures(i, j)\\\"\\n                [class.possible-point]=\\\"engineFacade.board.isXYInPossibleMoves(i, j) && showLegalMoves\\\"\\n                [style.background-color]=\\\"getTileBackgroundColor(i, j)\\\"\\n                *ngFor=\\\"let col of row; let j = index\\\"\\n            >\\n                <span\\n                    class=\\\"yCoord\\\"\\n                    [style.color]=\\\"(i % 2 === 0) ? lightTileColor : darkTileColor\\\"\\n                    [style.font-size.px]=\\\"pieceSize / 4\\\"\\n                    *ngIf=\\\"showCoords && j === 7\\\"\\n                >\\n                    {{engineFacade.coords.yCoords[i]}}\\n                </span>\\n                <span\\n                    class=\\\"xCoord\\\"\\n                    [style.color]=\\\"(j % 2 === 0) ? lightTileColor : darkTileColor\\\"\\n                    [style.font-size.px]=\\\"pieceSize / 4\\\"\\n                    *ngIf=\\\"showCoords && i === 7\\\"\\n                >\\n                    {{engineFacade.coords.xCoords[j]}}\\n                </span>\\n                <div\\n                    *ngIf=\\\"engineFacade.board.getPieceByPoint(i, j) as piece\\\"\\n                    style=\\\"height:100%; width:100%\\\"\\n                >\\n                    <div\\n                        [ngClass]=\\\"'piece'\\\"\\n                        [style.font-size]=\\\"pieceSize + 'px'\\\"\\n\\n                    >\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <svg\\n        [attr.height]=\\\"engineFacade.heightAndWidth\\\"\\n        [attr.width]=\\\"engineFacade.heightAndWidth\\\"\\n        style=\\\"position:absolute; top:0; pointer-events: none\\\"\\n    >\\n        <defs *ngFor=\\\"let color of ['red', 'green', 'blue', 'orange']\\\">\\n            <marker\\n                [id]=\\\"color + 'Arrow'\\\"\\n                markerHeight=\\\"13\\\"\\n                markerWidth=\\\"13\\\"\\n                orient=\\\"auto\\\"\\n                refX=\\\"9\\\"\\n                refY=\\\"6\\\"\\n            >\\n                <path\\n                    [style.fill]=\\\"color\\\"\\n                    d=\\\"M2,2 L2,11 L10,6 L2,2\\\"\\n                ></path>\\n            </marker>\\n        </defs>\\n        <line\\n            class=\\\"arrow\\\"\\n            [attr.marker-end]=\\\"'url(#' + arrow.end.color + 'Arrow)'\\\"\\n            [attr.stroke]=\\\"arrow.end.color\\\"\\n            [attr.x1]=\\\"arrow.start.x\\\"\\n            [attr.x2]=\\\"arrow.end.x\\\"\\n            [attr.y1]=\\\"arrow.start.y\\\"\\n            [attr.y2]=\\\"arrow.end.y\\\"\\n            *ngFor=\\\"let arrow of engineFacade.drawProvider.arrows$ | async\\\"\\n        ></line>\\n        <circle\\n            [attr.cx]=\\\"circle.drawPoint.x\\\"\\n            [attr.cy]=\\\"circle.drawPoint.y\\\"\\n            [attr.r]=\\\"engineFacade.heightAndWidth / 18\\\"\\n            [attr.stroke]=\\\"circle.drawPoint.color\\\"\\n            *ngFor=\\\"let circle of engineFacade.drawProvider.circles$ | async\\\"\\n            fill-opacity=\\\"0.0\\\"\\n            stroke-width=\\\"2\\\"\\n        ></circle>\\n    </svg>\\n    <app-piece-promotion-modal #modal\\n                               [pieceIconInput]=\\\"engineFacade.pieceIconManager.pieceIconInput\\\"\\n                               [color]=\\\"engineFacade.board.getCurrentPlayerColor() ? 'white' : 'black'\\\"></app-piece-promotion-modal>\\n</div>\\n\",\n      styles: [\"@charset \\\"UTF-8\\\";#board{font-family:Courier New,serif;position:relative}.board-row{display:block;width:100%;height:12.5%;position:relative}.board-col{position:relative;display:inline-block;width:12.5%;vertical-align:top;cursor:default;height:100%}.piece{height:100%;cursor:-webkit-grab;cursor:grab;width:100%;-moz-user-select:none;user-select:none;-webkit-user-select:none;background-size:cover;justify-content:center;text-align:center;color:#000!important;box-sizing:border-box}.piece:after{content:\\\"\\\\200b\\\";box-sizing:border-box}#drag{height:100%;width:100%}.possible-point{background:radial-gradient(#13262F 15%,transparent 20%)}.possible-point:hover,.possible-capture:hover{opacity:.4}.possible-capture{background:radial-gradient(transparent 0%,transparent 80%,#13262F 80%);opacity:.5;box-sizing:border-box;margin:0;padding:0}.king-check{background:radial-gradient(ellipse at center,red 0%,#e70000 25%,rgba(169,0,0,0) 89%,rgba(158,0,0,0) 100%)}.current-selection{background-color:#72620b!important}.yCoord{position:absolute;-moz-user-select:none;user-select:none;-webkit-user-select:none;cursor:pointer;right:.2em;font-family:Lucida Console,Courier,monospace;box-sizing:border-box}.xCoord{position:absolute;-moz-user-select:none;user-select:none;-webkit-user-select:none;cursor:pointer;left:.2em;bottom:0;font-family:Lucida Console,Courier,monospace;box-sizing:border-box}.hovering{background-color:red!important}.arrow{stroke-width:2}svg{filter:drop-shadow(1px 1px 0px #111) drop-shadow(-1px 1px 0px #111) drop-shadow(1px -1px 0px #111) drop-shadow(-1px -1px 0px #111)}:host{display:inline-block!important}.single-piece{position:absolute;z-index:999;justify-content:center;text-align:center;-moz-user-select:none;user-select:none;-webkit-user-select:none;color:#000!important;cursor:-webkit-grab;cursor:grab;background-size:cover}.single-piece:after{content:\\\"\\\\200b\\\";box-sizing:border-box}.cdk-drag:not(.cdk-drag-dragging){transition:transform .2s cubic-bezier(0,.3,.14,.49)}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgxChessBoardService\n    }];\n  }, {\n    darkTileColor: [{\n      type: Input\n    }],\n    lightTileColor: [{\n      type: Input\n    }],\n    showCoords: [{\n      type: Input\n    }],\n    sourcePointColor: [{\n      type: Input\n    }],\n    destinationPointColor: [{\n      type: Input\n    }],\n    legalMovesPointColor: [{\n      type: Input\n    }],\n    showLastMove: [{\n      type: Input\n    }],\n    showLegalMoves: [{\n      type: Input\n    }],\n    showActivePiece: [{\n      type: Input\n    }],\n    showPossibleCaptures: [{\n      type: Input\n    }],\n    moveChange: [{\n      type: Output\n    }],\n    checkmate: [{\n      type: Output\n    }],\n    stalemate: [{\n      type: Output\n    }],\n    boardRef: [{\n      type: ViewChild,\n      args: ['boardRef']\n    }],\n    modal: [{\n      type: ViewChild,\n      args: ['modal']\n    }],\n    size: [{\n      type: Input,\n      args: ['size']\n    }],\n    freeMode: [{\n      type: Input,\n      args: ['freeMode']\n    }],\n    dragDisabled: [{\n      type: Input,\n      args: ['dragDisabled']\n    }],\n    drawDisabled: [{\n      type: Input,\n      args: ['drawDisabled']\n    }],\n    pieceIcons: [{\n      type: Input,\n      args: ['pieceIcons']\n    }],\n    lightDisabled: [{\n      type: Input,\n      args: ['lightDisabled']\n    }],\n    darkDisabled: [{\n      type: Input,\n      args: ['darkDisabled']\n    }],\n    onRightClick: [{\n      type: HostListener,\n      args: ['contextmenu', ['$event']]\n    }]\n  });\n})();\n\nclass NgxChessBoardModule {\n  static forRoot() {\n    return {\n      ngModule: NgxChessBoardModule,\n      providers: [NgxChessBoardService]\n    };\n  }\n\n}\n\nNgxChessBoardModule.ɵfac = function NgxChessBoardModule_Factory(t) {\n  return new (t || NgxChessBoardModule)();\n};\n\nNgxChessBoardModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxChessBoardModule\n});\nNgxChessBoardModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, DragDropModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxChessBoardModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxChessBoardComponent, PiecePromotionModalComponent],\n      imports: [CommonModule, DragDropModule],\n      exports: [NgxChessBoardComponent]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of ngx-chess-board\r\n */\n\n/*\r\n * Public API Surface of im-grid\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { HistoryMove, NgxChessBoardComponent, NgxChessBoardModule, NgxChessBoardService, PiecePromotionModalComponent };","map":{"version":3,"sources":["C:/Users/Lesiu/Documents/ChessEngineJS/my-app/node_modules/ngx-chess-board/fesm2015/ngx-chess-board.mjs"],"names":["i4","DragDropModule","i3","CommonModule","i0","Injectable","Component","ViewChild","Input","EventEmitter","Output","HostListener","NgModule","BehaviorSubject","Subject","cloneDeep","Color","Piece","constructor","point","color","constant","relValue","board","checkPoints","Point","row","col","isEqual","that","hasCoordsEqual","isInRange","clone","Rook","isMovedAlready","getPossibleMoves","possiblePoints","i","isFieldEmpty","push","j","getPossibleCaptures","isFieldTakenByEnemy","WHITE","BLACK","getCoveredFields","getPieceByField","King","castledAlready","shortCastled","longCastled","isCastling","isFieldUnderAttack","longCastlePossible","isKingInCheck","pieces","leftRook","shortCastlePossible","rightRook","Bishop","Knight","Pawn","reverted","enPassantPoint","enPassantPiece","Math","abs","Queen","UnicodeConstants","WHITE_KING","name","icon","WHITE_QUEEN","WHITE_KNIGHT","WHITE_ROOK","WHITE_PAWN","WHITE_BISHOP","BLACK_KING","BLACK_QUEEN","BLACK_KNIGHT","BLACK_ROOK","BLACK_PAWN","BLACK_BISHOP","DefaultFenProcessor","process","notation","engineFacade","fen","split","pointer","length","chunk","charAt","match","Number","pawn","setCurrentPlayer","setCastles","setEnPassant","setFullMoveCount","Error","currentWhitePlayer","castleChunk","includes","setRookAlreadyMoved","rook","find","piece","MoveTranslation","xAxis","yAxis","_xAxis","_yAxis","_reverted","value","MoveUtils","willMoveCauseCheck","currentColor","destRow","destCol","srcPiece","destPiece","filter","isBound","format","sourcePoint","destPoint","sourceX","destX","String","fromCharCode","incrementX","translateCoordsToIndex","coords","charCodeAt","findPieceByPossibleMovesContaining","indexes","foundPieces","findPieceByPossibleCapturesContaining","formatSingle","getFirstLetterPiece","reverse","formatCol","DefaultPiecesLoader","loadDefaultPieces","calculateFEN","DefaultPgnProcessor$1","reset","moves","extractMoves","counter","move","replace","promotionIndex","resolvePromotion","substring","test","resolvePieceByFirstChar","indexOf","resolveByCol","resolveByRow","processR1f2","lastIndexOf","trim","s","movePiece","hasUpperCase","piecesFirstChar","isShortCastle","removePiece","e","isLongCastle","char","firstPieceFormat","secondPieceFormat","replacePromotion","promotionChar","NotationProcessorFactory","getProcessor","type","NotationType","FEN","PGN","getDefaultProcessor","DrawPoint","x","y","ClickUtils","getClickPoint","event","top","height","left","width","floor","getDrawingPoint","tileSize","colorStrategy","ctrl","alt","shift","squareSize","xx","yy","resolve","HistoryMove","captured","setGameStates","check","stalemate","mate","HistoryMoveProvider","historyMovesSubject$","historyMoves","states","next","addMove","historyMove","pop","lastHistoryMove","getLastMove","state","getAll","clear","getLastMoveIndex","Constants","DEFAULT_DARK_TILE_COLOR","DEFAULT_LIGHT_TILE_COLOR","DEFAULT_SIZE","MIN_BOARD_SIZE","MAX_BOARD_SIZE","DEFAULT_SOURCE_POINT_COLOR","DEFAULT_DESTINATION_POINT_COLOR","DEFAULT_LEGAL_MOVE_POINT_COLOR","PieceIconInputManager","_defaultIcons","pieceIconInput","_pieceIconInput","defaultIcons","isDefaultIcons","undefined","getPieceIcon","isWhite","whiteKingUrl","blackKingUrl","whiteQueenUrl","blackQueenUrl","whiteRookUrl","blackRookUrl","whiteBishopUrl","blackBishopUrl","whiteKnightUrl","blackKnightUrl","whitePawnUrl","blackPawnUrl","loadDefaultData","CoordsProvider","defaultXCoords","defaultYCoords","currentXCoords","currentYCoords","xCoords","yCoords","init","AnimationDragEndProcessor","dragEnded","disabling","startTrans","source","_dragRef","getRootElement","style","transform","DragEndStrategy","dragEndProcessor","setDragEndProcessor","processor","AnimationDragStartProcessor","dragStarted","zIndex","position","DragStartStrategy","dragStartProcessor","setDragStartProcessor","DefaultColorProcessor","ColorStrategy","colorProcessor","setColorProcessor","DrawProvider","arrowsSubject$","circlesSubject$","arrows$","asObservable","circles$","circles","arrows","addCircle","circle","reomveCircle","removeCircle","addArrow","arrow","removeArrow","containsCircle","checkCircle","some","containsArrow","checkArrow","AbstractPgnProcessor","pgn","currentIndex","getPGN","processChecks","checkmate","addPromotionChoice","promotion","removeLast","regex1","RegExp","lastIndex","DefaultPgnProcessor","sourcePiece","possibleCaptures","possibleMoves","isEqualByCol","aPiece","bPiece","AbstractEngineFacade","dragStartStrategy","dragEndStrategy","pgnProcessor","heightAndWidth","freeMode","drawProvider","pieceIconManager","moveHistoryProvider","checkIfPawnFirstMove","checkIfRookMoved","checkIfKingMoved","getMoveHistory","BoardLoader","notationProcessor","addPieces","loadFEN","loadPGN","setEngineFacade","setNotationProcessor","BoardState","BoardStateProvider","statesSubject$","getStates","lastState","getLastState","isEmpty","getLastStateIndex","Arrow","start","end","Circle","drawPoint","PieceAbstractDecorator","AvailableMoveDecorator","pointClicked","PiecePromotionResolver","resolvePromotionChoice","index","PieceTypeInput","ColorInput","PieceFactory","create","pieceTypeInput","colorInput","LIGHT","QUEEN","KING","KNIGHT","BISHOP","ROOK","PAWN","EngineFacade","moveChange","_selected","boardLoader","boardStateProvider","undo","lastBoard","activePiece","saveMoveClone","moveStateProvider","sourceIndexes","destIndexes","getPieceByPoint","prepareActivePiece","isPointInPossibleMoves","isPointInPossibleCaptures","saveClone","lastMoveSrc","lastMoveDest","disableSelection","pieceClicked","onPieceClicked","handleClickEvent","isMouseDown","moving","onFreeMode","onMouseDown","moveDone","button","ctrlKey","altKey","shiftKey","isPieceDisabled","onMouseUp","drawDisabled","addDrawPoint","dragDisabled","toMovePiece","newPoint","historyMoveCandidate","squaresMoved","checkIfPawnTakesEnPassant","checkIfPawnEnpassanted","increaseFullMoveCount","checkForPawnPromote","afterMoveActions","toPromotePiece","openPromoteDialog","blackKingChecked","whiteKingChecked","checkForPossibleMoves","checkForPat","lastMove","emit","Object","assign","modal","open","capture","foundCapture","lightDisabled","darkDisabled","crtl","upPoint","fullMoveCount","addPiece","existing","createdPiece","Board","isXYInPossibleMoves","isXYInPossibleCaptures","isXYInSourceMove","isXYInDestMove","isXYInActiveMove","forEach","reversePoint","enemyColor","field","king","getKingByColor","getCastleFENString","sort","join","toUpperCase","getEnPassantFENString","emptyFields","foundPiece","substr","whiteEnPassant","blackEnPassant","concatedEnPassant","isXYInPointSelection","isKingChecked","getCurrentPlayerColor","NgxChessBoardService","componentMethodCallSource","componentMethodCalled$","ɵfac","ɵprov","args","providedIn","PiecePromotionModalComponent","opened","closeCallback","onCloseCallback","nativeElement","display","changeSelection","coloredPiece","toLowerCase","ɵcmp","NgIf","selector","template","styles","static","NgxChessBoardComponent","ngxChessBoardService","darkTileColor","lightTileColor","showCoords","sourcePointColor","destinationPointColor","legalMovesPointColor","showLastMove","showLegalMoves","showActivePiece","showPossibleCaptures","selected","isDragging","startTransition","size","calculatePieceSize","pieceIcons","onRightClick","preventDefault","ngOnChanges","changes","ngOnInit","subscribe","ngAfterViewInit","boardRef","getBoundingClientRect","updateBoard","setFEN","exception","setPGN","console","log","getFEN","dragStart","trans","pieceSize","getCustomPieceIcons","JSON","parse","dragMoved","$event","pointerPosition","parentElement","getTileBackgroundColor","NgForOf","CdkDrag","NgStyle","NgClass","AsyncPipe","NgxChessBoardModule","forRoot","ngModule","providers","ɵmod","ɵinj","declarations","imports","exports"],"mappings":"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","sourcesContent":["import * as i4 from '@angular/cdk/drag-drop';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Component, ViewChild, Input, EventEmitter, Output, HostListener, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { cloneDeep } from 'lodash';\n\nvar Color;\r\n(function (Color) {\r\n    Color[Color[\"WHITE\"] = 0] = \"WHITE\";\r\n    Color[Color[\"BLACK\"] = 1] = \"BLACK\";\r\n})(Color || (Color = {}));\n\nclass Piece {\r\n    constructor(point, color, constant, relValue, board) {\r\n        this.checkPoints = [];\r\n        this.color = color;\r\n        this.constant = constant;\r\n        this.point = point;\r\n        this.relValue = relValue;\r\n        this.board = board;\r\n    }\r\n}\n\nclass Point {\r\n    constructor(row, col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n    isEqual(that) {\r\n        return that && this.row === that.row && this.col === that.col;\r\n    }\r\n    hasCoordsEqual(row, col) {\r\n        return row && col && this.row === row && this.col === col;\r\n    }\r\n    isInRange() {\r\n        return this.row >= 0 && this.row <= 7 && this.col >= 0 && this.col <= 7;\r\n    }\r\n    clone() {\r\n        return new Point(this.row, this.col);\r\n    }\r\n}\n\nclass Rook extends Piece {\r\n    constructor(point, color, constant, board) {\r\n        super(point, color, constant, 5, board);\r\n        this.isMovedAlready = false;\r\n    }\r\n    getPossibleMoves() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    getPossibleCaptures() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    getCoveredFields() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n}\n\nclass King extends Piece {\r\n    constructor(point, color, constant, board) {\r\n        super(point, color, constant, 0, board);\r\n        this.castledAlready = false;\r\n        this.shortCastled = false;\r\n        this.longCastled = false;\r\n        this.isCastling = false;\r\n    }\r\n    getPossibleMoves() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        // lewo\r\n        if (this.board.isFieldEmpty(row, col - 1) &&\r\n            !this.board.isFieldUnderAttack(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n        // prawo\r\n        if (this.board.isFieldEmpty(row, col + 1) &&\r\n            !this.board.isFieldUnderAttack(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n        // dol\r\n        if (this.board.isFieldEmpty(row + 1, col) &&\r\n            !this.board.isFieldUnderAttack(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n        // gora\r\n        if (this.board.isFieldEmpty(row - 1, col) &&\r\n            !this.board.isFieldUnderAttack(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n        // lewo gora\r\n        if (this.board.isFieldEmpty(row - 1, col - 1) &&\r\n            !this.board.isFieldUnderAttack(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (this.board.isFieldEmpty(row - 1, col + 1) &&\r\n            !this.board.isFieldUnderAttack(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n        // lewo dol\r\n        if (this.board.isFieldEmpty(row + 1, col - 1) &&\r\n            !this.board.isFieldUnderAttack(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (this.board.isFieldEmpty(row + 1, col + 1) &&\r\n            !this.board.isFieldUnderAttack(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n        if (!this.isMovedAlready) {\r\n            let longCastlePossible = true;\r\n            for (let i = col - 1; i > 0; --i) {\r\n                if (!this.board.isFieldEmpty(row, i) ||\r\n                    this.board.isFieldUnderAttack(row, i, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                    longCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (longCastlePossible && !this.board.isKingInCheck(this.color, this.board.pieces) && this.board.getPieceByField(row, 0)) {\r\n                const leftRook = this.board.getPieceByField(row, 0);\r\n                if (leftRook instanceof Rook) {\r\n                    if (!leftRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col - 2));\r\n                    }\r\n                }\r\n            }\r\n            let shortCastlePossible = true;\r\n            for (let i = col + 1; i < 7; ++i) {\r\n                if (!this.board.isFieldEmpty(row, i) ||\r\n                    this.board.isFieldUnderAttack(row, i, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                    shortCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (shortCastlePossible && !this.board.isKingInCheck(this.color, this.board.pieces) && this.board.getPieceByField(row, 7)) {\r\n                const rightRook = this.board.getPieceByField(row, 7);\r\n                if (rightRook instanceof Rook) {\r\n                    if (!rightRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col + 2));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    getPossibleCaptures() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        // lewo\r\n        if (this.board.isFieldTakenByEnemy(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&\r\n            !this.board.isFieldUnderAttack(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n        // prawo\r\n        if (this.board.isFieldTakenByEnemy(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&\r\n            !this.board.isFieldUnderAttack(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n        // dol\r\n        if (this.board.isFieldTakenByEnemy(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&\r\n            !this.board.isFieldUnderAttack(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n        // gora\r\n        if (this.board.isFieldTakenByEnemy(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&\r\n            !this.board.isFieldUnderAttack(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n        // lewo gora\r\n        if (this.board.isFieldTakenByEnemy(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&\r\n            !this.board.isFieldUnderAttack(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (this.board.isFieldTakenByEnemy(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&\r\n            !this.board.isFieldUnderAttack(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n        // lewo dol\r\n        if (this.board.isFieldTakenByEnemy(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&\r\n            !this.board.isFieldUnderAttack(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (this.board.isFieldTakenByEnemy(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&\r\n            !this.board.isFieldUnderAttack(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    getCoveredFields() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        // lewo\r\n        possiblePoints.push(new Point(row, col - 1));\r\n        // prawo\r\n        possiblePoints.push(new Point(row, col + 1));\r\n        // dol\r\n        possiblePoints.push(new Point(row + 1, col));\r\n        // gora\r\n        possiblePoints.push(new Point(row - 1, col));\r\n        // lewo gora\r\n        possiblePoints.push(new Point(row - 1, col - 1));\r\n        // prawo gora\r\n        possiblePoints.push(new Point(row - 1, col + 1));\r\n        // lewo dol\r\n        possiblePoints.push(new Point(row + 1, col - 1));\r\n        // prawo dol\r\n        possiblePoints.push(new Point(row + 1, col + 1));\r\n        return possiblePoints;\r\n    }\r\n}\n\nclass Bishop extends Piece {\r\n    constructor(point, color, constant, board) {\r\n        super(point, color, constant, 3, board);\r\n    }\r\n    getPossibleMoves() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    getPossibleCaptures() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    getCoveredFields() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n}\n\nclass Knight extends Piece {\r\n    constructor(point, color, constant, board) {\r\n        super(point, color, constant, 3, board);\r\n        this.isMovedAlready = false;\r\n    }\r\n    getPossibleMoves() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        // gora -> lewo\r\n        if (this.board.isFieldEmpty(row - 2, col - 1)) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n        // gora -> prawo\r\n        if (this.board.isFieldEmpty(row - 2, col + 1)) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n        // lewo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col - 2)) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n        // prawo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col + 2)) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n        // lewo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col - 2)) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n        // prawo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col + 2)) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n        // dol -> lewo\r\n        if (this.board.isFieldEmpty(row + 2, col - 1)) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n        // dol -> prawo\r\n        if (this.board.isFieldEmpty(row + 2, col + 1)) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    getPossibleCaptures() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        // gora -> lewo\r\n        if (this.board.isFieldTakenByEnemy(row - 2, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n        // gora -> prawo\r\n        if (this.board.isFieldTakenByEnemy(row - 2, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n        // lewo -> gora\r\n        if (this.board.isFieldTakenByEnemy(row - 1, col - 2, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n        // prawo -> gora\r\n        if (this.board.isFieldTakenByEnemy(row - 1, col + 2, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n        // lewo -> dol\r\n        if (this.board.isFieldTakenByEnemy(row + 1, col - 2, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n        // prawo -> dol\r\n        if (this.board.isFieldTakenByEnemy(row + 1, col + 2, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n        // dol -> lewo\r\n        if (this.board.isFieldTakenByEnemy(row + 2, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n        // dol -> prawo\r\n        if (this.board.isFieldTakenByEnemy(row + 2, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    getCoveredFields() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        // gora -> lewo\r\n        possiblePoints.push(new Point(row - 2, col - 1));\r\n        // gora -> prawo\r\n        possiblePoints.push(new Point(row - 2, col + 1));\r\n        // lewo -> gora\r\n        possiblePoints.push(new Point(row - 1, col - 2));\r\n        // prawo -> gora\r\n        possiblePoints.push(new Point(row - 1, col + 2));\r\n        // lewo -> dol\r\n        possiblePoints.push(new Point(row + 1, col - 2));\r\n        // prawo -> dol\r\n        possiblePoints.push(new Point(row + 1, col + 2));\r\n        // dol -> lewo\r\n        possiblePoints.push(new Point(row + 2, col - 1));\r\n        // dol -> prawo\r\n        possiblePoints.push(new Point(row + 2, col + 1));\r\n        return possiblePoints;\r\n    }\r\n}\n\nclass Pawn extends Piece {\r\n    constructor(point, color, constant, board) {\r\n        super(point, color, constant, 1, board);\r\n        this.isMovedAlready = false;\r\n    }\r\n    getPossibleMoves() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        if ((!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)) {\r\n            if (this.board.isFieldEmpty(row - 1, col)) {\r\n                possiblePoints.push(new Point(row - 1, col));\r\n                if (!this.isMovedAlready &&\r\n                    this.board.isFieldEmpty(row - 2, col)) {\r\n                    possiblePoints.push(new Point(row - 2, col));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (\r\n            /*!board.isFieldTakenByEnemy(row + 1, col, Color.WHITE) &&*/ this.board.isFieldEmpty(row + 1, col)) {\r\n                possiblePoints.push(new Point(row + 1, col));\r\n                if (!this.isMovedAlready &&\r\n                    this.board.isFieldEmpty(row + 2, col)) {\r\n                    possiblePoints.push(new Point(row + 2, col));\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    getPossibleCaptures() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        if ((!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)) {\r\n            if (this.board.isFieldTakenByEnemy(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row - 1, col - 1));\r\n            }\r\n            if (this.board.isFieldTakenByEnemy(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row - 1, col + 1));\r\n            }\r\n        }\r\n        else {\r\n            if (this.board.isFieldTakenByEnemy(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row + 1, col - 1));\r\n            }\r\n            if (this.board.isFieldTakenByEnemy(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row + 1, col + 1));\r\n            }\r\n        }\r\n        if (this.board.enPassantPoint &&\r\n            this.board.enPassantPiece.color ===\r\n                (this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n            if (row === this.board.enPassantPiece.point.row &&\r\n                Math.abs(this.board.enPassantPiece.point.col - col) === 1) {\r\n                possiblePoints.push(this.board.enPassantPoint);\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    getCoveredFields() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        if ((!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n        else {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n        return possiblePoints;\r\n    }\r\n}\n\nclass Queen extends Piece {\r\n    constructor(point, color, constant, board) {\r\n        super(point, color, constant, 9, board);\r\n    }\r\n    getPossibleMoves() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    getPossibleCaptures() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldTakenByEnemy(i, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            }\r\n            else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n    getCoveredFields() {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            }\r\n            else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n}\n\nconst UnicodeConstants = {\r\n    WHITE_KING: { name: 'King', icon: '&#x2654;' },\r\n    WHITE_QUEEN: { name: 'Queen', icon: '&#x2655;' },\r\n    WHITE_KNIGHT: { name: 'Knight', icon: '&#x2658' },\r\n    WHITE_ROOK: { name: 'Rook', icon: '&#x2656' },\r\n    WHITE_PAWN: { name: 'Pawn', icon: '&#x2659' },\r\n    WHITE_BISHOP: { name: 'Bishop', icon: '&#x2657' },\r\n    BLACK_KING: { name: 'King', icon: '&#x265A' },\r\n    BLACK_QUEEN: { name: 'Queen', icon: '&#x265B' },\r\n    BLACK_KNIGHT: { name: 'Knight', icon: '&#x265E' },\r\n    BLACK_ROOK: { name: 'Rook', icon: '&#x265C' },\r\n    BLACK_PAWN: { name: 'Pawn', icon: '&#x265F' },\r\n    BLACK_BISHOP: { name: 'Bishop', icon: '&#x265D' },\r\n};\n\nclass DefaultFenProcessor {\r\n    process(notation, engineFacade) {\r\n        let fen = notation;\r\n        if (notation) {\r\n            engineFacade.board.reverted = false;\r\n            engineFacade.board.pieces = [];\r\n            const split = fen.split('/');\r\n            for (let i = 0; i < 8; ++i) {\r\n                let pointer = 0;\r\n                for (let j = 0; j < split[i].split(' ')[0].length; ++j) {\r\n                    const chunk = split[i].charAt(j);\r\n                    if (chunk.match(/[0-9]/)) {\r\n                        pointer += Number(chunk);\r\n                    }\r\n                    else {\r\n                        switch (chunk) {\r\n                            case 'r':\r\n                                engineFacade.board.pieces.push(new Rook(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_ROOK, engineFacade.board));\r\n                                break;\r\n                            case 'n':\r\n                                engineFacade.board.pieces.push(new Knight(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, engineFacade.board));\r\n                                break;\r\n                            case 'b':\r\n                                engineFacade.board.pieces.push(new Bishop(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_BISHOP, engineFacade.board));\r\n                                break;\r\n                            case 'q':\r\n                                engineFacade.board.pieces.push(new Queen(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_QUEEN, engineFacade.board));\r\n                                break;\r\n                            case 'k':\r\n                                engineFacade.board.pieces.push(new King(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_KING, engineFacade.board));\r\n                                break;\r\n                            case 'p': {\r\n                                const pawn = new Pawn(new Point(i, pointer), Color.BLACK, UnicodeConstants.BLACK_PAWN, engineFacade.board);\r\n                                if ((pawn.color === Color.BLACK && pawn.point.row !== 1) ||\r\n                                    (pawn.color === Color.WHITE && pawn.point.row !== 6)) {\r\n                                    pawn.isMovedAlready = true;\r\n                                }\r\n                                engineFacade.board.pieces.push(pawn);\r\n                                break;\r\n                            }\r\n                            case 'R':\r\n                                engineFacade.board.pieces.push(new Rook(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_ROOK, engineFacade.board));\r\n                                break;\r\n                            case 'N':\r\n                                engineFacade.board.pieces.push(new Knight(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, engineFacade.board));\r\n                                break;\r\n                            case 'B':\r\n                                engineFacade.board.pieces.push(new Bishop(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_BISHOP, engineFacade.board));\r\n                                break;\r\n                            case 'Q':\r\n                                engineFacade.board.pieces.push(new Queen(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_QUEEN, engineFacade.board));\r\n                                break;\r\n                            case 'K':\r\n                                engineFacade.board.pieces.push(new King(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_KING, engineFacade.board));\r\n                                break;\r\n                            case 'P': {\r\n                                const pawn = new Pawn(new Point(i, pointer), Color.WHITE, UnicodeConstants.WHITE_PAWN, engineFacade.board);\r\n                                if ((pawn.color === Color.BLACK && pawn.point.row !== 1) ||\r\n                                    (pawn.color === Color.WHITE && pawn.point.row !== 6)) {\r\n                                    pawn.isMovedAlready = true;\r\n                                }\r\n                                engineFacade.board.pieces.push(pawn);\r\n                                break;\r\n                            }\r\n                        }\r\n                        ++pointer;\r\n                    }\r\n                }\r\n            }\r\n            this.setCurrentPlayer(engineFacade.board, fen);\r\n            this.setCastles(engineFacade.board, fen);\r\n            this.setEnPassant(fen);\r\n            this.setFullMoveCount(fen);\r\n            engineFacade.board.fen = fen;\r\n        }\r\n        else {\r\n            throw Error('Incorrect FEN provided');\r\n        }\r\n    }\r\n    setCurrentPlayer(board, fen) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            board.currentWhitePlayer = split[1] === 'w';\r\n        }\r\n    }\r\n    setCastles(board, fen) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            const castleChunk = split[2];\r\n            if (!castleChunk.includes('K')) {\r\n                this.setRookAlreadyMoved(board, Color.WHITE, 7);\r\n            }\r\n            if (!castleChunk.includes('Q')) {\r\n                this.setRookAlreadyMoved(board, Color.WHITE, 0);\r\n            }\r\n            if (!castleChunk.includes('k')) {\r\n                this.setRookAlreadyMoved(board, Color.BLACK, 7);\r\n            }\r\n            if (!castleChunk.includes('q')) {\r\n                this.setRookAlreadyMoved(board, Color.BLACK, 0);\r\n            }\r\n        }\r\n    }\r\n    setFullMoveCount(fen) { }\r\n    setEnPassant(fen) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            const enPassantPoint = split[3];\r\n            if (enPassantPoint === '-') {\r\n                return;\r\n            }\r\n            // if()\r\n        }\r\n    }\r\n    setRookAlreadyMoved(board, color, col) {\r\n        const rook = board.pieces.find((piece) => piece.color === color && piece instanceof Rook && piece.point.col === col);\r\n        if (rook) {\r\n            rook.isMovedAlready = true;\r\n        }\r\n    }\r\n}\n\nclass MoveTranslation {\r\n    constructor(xAxis, yAxis, reverted) {\r\n        this._xAxis = xAxis;\r\n        this._yAxis = yAxis;\r\n        this._reverted = reverted;\r\n    }\r\n    get xAxis() {\r\n        return this._xAxis;\r\n    }\r\n    set xAxis(value) {\r\n        this._xAxis = value;\r\n    }\r\n    get yAxis() {\r\n        return this._yAxis;\r\n    }\r\n    set yAxis(value) {\r\n        this._yAxis = value;\r\n    }\r\n    get reverted() {\r\n        return this._reverted;\r\n    }\r\n    set reverted(value) {\r\n        this._reverted = value;\r\n    }\r\n}\n\nclass MoveUtils {\r\n    static willMoveCauseCheck(currentColor, row, col, destRow, destCol, board) {\r\n        const srcPiece = board.getPieceByField(row, col);\r\n        const destPiece = board.getPieceByField(destRow, destCol);\r\n        if (srcPiece) {\r\n            srcPiece.point.row = destRow;\r\n            srcPiece.point.col = destCol;\r\n        }\r\n        if (destPiece) {\r\n            board.pieces = board.pieces.filter((piece) => piece !== destPiece);\r\n        }\r\n        const isBound = board.isKingInCheck(currentColor, board.pieces);\r\n        if (srcPiece) {\r\n            srcPiece.point.col = col;\r\n            srcPiece.point.row = row;\r\n        }\r\n        if (destPiece) {\r\n            board.pieces.push(destPiece);\r\n        }\r\n        return isBound;\r\n    }\r\n    static format(sourcePoint, destPoint, reverted) {\r\n        if (reverted) {\r\n            const sourceX = 104 - sourcePoint.col;\r\n            const destX = 104 - destPoint.col;\r\n            return (String.fromCharCode(sourceX) +\r\n                (sourcePoint.row + 1) +\r\n                String.fromCharCode(destX) +\r\n                (destPoint.row + 1));\r\n        }\r\n        else {\r\n            const incrementX = 97;\r\n            return (String.fromCharCode(sourcePoint.col + incrementX) +\r\n                (Math.abs(sourcePoint.row - 7) + 1) +\r\n                String.fromCharCode(destPoint.col + incrementX) +\r\n                (Math.abs(destPoint.row - 7) + 1));\r\n        }\r\n    }\r\n    static translateCoordsToIndex(coords, reverted) {\r\n        let xAxis;\r\n        let yAxis;\r\n        if (reverted) {\r\n            xAxis = 104 - coords.charCodeAt(0);\r\n            yAxis = +coords.charAt(1) - 1;\r\n        }\r\n        else {\r\n            xAxis = coords.charCodeAt(0) - 97;\r\n            yAxis = Math.abs(+coords.charAt(1) - 8);\r\n        }\r\n        return new MoveTranslation(xAxis, yAxis, reverted);\r\n    }\r\n    static findPieceByPossibleMovesContaining(coords, board, color) {\r\n        let indexes = this.translateCoordsToIndex(coords, board.reverted);\r\n        let destPoint = new Point(indexes.yAxis, indexes.xAxis);\r\n        let foundPieces = [];\r\n        for (let piece of board.pieces.filter(piece => piece.color === color)) {\r\n            for (let point of piece.getPossibleMoves()) {\r\n                if (!MoveUtils.willMoveCauseCheck(piece.color, piece.point.row, piece.point.col, indexes.yAxis, indexes.xAxis, board) && point.isEqual(destPoint)) {\r\n                    foundPieces.push(piece);\r\n                }\r\n            }\r\n        }\r\n        return foundPieces;\r\n    }\r\n    static findPieceByPossibleCapturesContaining(coords, board, color) {\r\n        let indexes = this.translateCoordsToIndex(coords, board.reverted);\r\n        let destPoint = new Point(indexes.yAxis, indexes.xAxis);\r\n        let foundPieces = [];\r\n        for (let piece of board.pieces.filter(piece => piece.color === color)) {\r\n            for (let point of piece.getPossibleCaptures()) {\r\n                if (!MoveUtils.willMoveCauseCheck(piece.color, piece.point.row, piece.point.col, indexes.yAxis, indexes.xAxis, board) && point.isEqual(destPoint)) {\r\n                    foundPieces.push(piece);\r\n                }\r\n            }\r\n        }\r\n        return foundPieces;\r\n    }\r\n    static formatSingle(point, reverted) {\r\n        if (reverted) {\r\n            const sourceX = 104 - point.col;\r\n            return (String.fromCharCode(sourceX) +\r\n                (point.row + 1));\r\n        }\r\n        else {\r\n            const incrementX = 97;\r\n            return (String.fromCharCode(point.col + incrementX) +\r\n                (Math.abs(point.row - 7) + 1));\r\n        }\r\n    }\r\n    static getFirstLetterPiece(piece) {\r\n        if (piece instanceof Pawn) {\r\n            return 'P';\r\n        }\r\n        else {\r\n            if (piece instanceof Knight) {\r\n                return 'N';\r\n            }\r\n            else {\r\n                if (piece instanceof Bishop) {\r\n                    return 'B';\r\n                }\r\n                else {\r\n                    if (piece instanceof Rook) {\r\n                        return 'R';\r\n                    }\r\n                    else {\r\n                        if (piece instanceof King) {\r\n                            return 'K';\r\n                        }\r\n                        else {\r\n                            if (piece instanceof Queen) {\r\n                                return 'Q';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n    static reverse(board, row) {\r\n        return board.reverted\r\n            ? row + 1\r\n            : Math.abs(row - 7) + 1;\r\n    }\r\n    static formatCol(board, col) {\r\n        return board.reverted\r\n            ? String.fromCharCode(104 - col)\r\n            : String.fromCharCode(97 + col);\r\n    }\r\n}\n\nclass DefaultPiecesLoader {\r\n    static loadDefaultPieces(board) {\r\n        board.pieces = [];\r\n        // piony czarne\r\n        for (let i = 0; i < 8; ++i) {\r\n            board.pieces.push(new Pawn(new Point(1, i), Color.BLACK, UnicodeConstants.BLACK_PAWN, board));\r\n        }\r\n        board.pieces.push(new Rook(new Point(0, 0), Color.BLACK, UnicodeConstants.BLACK_ROOK, board));\r\n        board.pieces.push(new Knight(new Point(0, 1), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, board));\r\n        board.pieces.push(new Bishop(new Point(0, 2), Color.BLACK, UnicodeConstants.BLACK_BISHOP, board));\r\n        board.pieces.push(new Queen(new Point(0, 3), Color.BLACK, UnicodeConstants.BLACK_QUEEN, board));\r\n        board.pieces.push(new King(new Point(0, 4), Color.BLACK, UnicodeConstants.BLACK_KING, board));\r\n        board.pieces.push(new Bishop(new Point(0, 5), Color.BLACK, UnicodeConstants.BLACK_BISHOP, board));\r\n        board.pieces.push(new Knight(new Point(0, 6), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, board));\r\n        board.pieces.push(new Rook(new Point(0, 7), Color.BLACK, UnicodeConstants.BLACK_ROOK, board));\r\n        // piony biale\r\n        for (let i = 0; i < 8; ++i) {\r\n            board.pieces.push(new Pawn(new Point(6, i), Color.WHITE, UnicodeConstants.WHITE_PAWN, board));\r\n        }\r\n        board.pieces.push(new Rook(new Point(7, 0), Color.WHITE, UnicodeConstants.WHITE_ROOK, board));\r\n        board.pieces.push(new Knight(new Point(7, 1), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, board));\r\n        board.pieces.push(new Bishop(new Point(7, 2), Color.WHITE, UnicodeConstants.WHITE_BISHOP, board));\r\n        board.pieces.push(new Queen(new Point(7, 3), Color.WHITE, UnicodeConstants.WHITE_QUEEN, board));\r\n        board.pieces.push(new King(new Point(7, 4), Color.WHITE, UnicodeConstants.WHITE_KING, board));\r\n        board.pieces.push(new Bishop(new Point(7, 5), Color.WHITE, UnicodeConstants.WHITE_BISHOP, board));\r\n        board.pieces.push(new Knight(new Point(7, 6), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, board));\r\n        board.pieces.push(new Rook(new Point(7, 7), Color.WHITE, UnicodeConstants.WHITE_ROOK, board));\r\n        board.calculateFEN();\r\n    }\r\n}\n\nclass DefaultPgnProcessor$1 {\r\n    process(notation, engineFacade) {\r\n        if (notation) {\r\n            engineFacade.board.reverted = false;\r\n            engineFacade.board.pieces = [];\r\n            engineFacade.reset();\r\n            DefaultPiecesLoader.loadDefaultPieces(engineFacade.board);\r\n            let moves = this.extractMoves(notation);\r\n            let counter = -1;\r\n            for (let move of moves) {\r\n                ++counter;\r\n                move = move.replace(/[+#]/g, '');\r\n                let promotionIndex = '';\r\n                if (move.includes('=')) {\r\n                    promotionIndex = this.resolvePromotion(move.substring(move.length - 1));\r\n                    move = move.substring(0, move.length - 2);\r\n                }\r\n                let color = (counter === 0 || counter % 2 === 0)\r\n                    ? Color.WHITE\r\n                    : Color.BLACK;\r\n                if (/^[a-z]\\d$/g.test(move)) { // zwykly ruch na wolne pole e4\r\n                    let piece = MoveUtils.findPieceByPossibleMovesContaining(move, engineFacade.board, color).find(piece => piece instanceof Pawn);\r\n                    // en passant check\r\n                    if (!piece) {\r\n                        piece = MoveUtils.findPieceByPossibleCapturesContaining(move, engineFacade.board, color).find(piece => piece instanceof Pawn);\r\n                    }\r\n                    // if piece is found for sure\r\n                    if (piece) {\r\n                        engineFacade.move(MoveUtils.formatSingle(piece.point, false) + move + promotionIndex);\r\n                    }\r\n                }\r\n                else {\r\n                    if (/^[A-Z][a-h]\\d$/g.test(move)) { // jezeli ma wielka litere, czyli trzeba odszukac ktora figura Nf3\r\n                        let pieces = MoveUtils.findPieceByPossibleMovesContaining(move.substring(1), engineFacade.board, color);\r\n                        let piece = pieces.find(piece => this.resolvePieceByFirstChar(move.charAt(0), piece));\r\n                        if (piece) {\r\n                            engineFacade.move(MoveUtils.formatSingle(piece.point, false) + move.substring(1) + promotionIndex);\r\n                        }\r\n                        else {\r\n                        }\r\n                    }\r\n                    else {\r\n                        if ('O-O' === move) {\r\n                            engineFacade.move(color === Color.WHITE ? 'e1g1' : 'e8g8');\r\n                        }\r\n                        else {\r\n                            if (/^[a-z]x[a-z]\\d$/g.test(move)) { //exd5\r\n                                let pieces = MoveUtils.findPieceByPossibleCapturesContaining(move.substring(move.indexOf('x') + 1), engineFacade.board, color).filter(piece => piece instanceof Pawn);\r\n                                let piece;\r\n                                if (pieces.length > 1) {\r\n                                    piece = this.resolveByCol(pieces, move.substring(0, 1));\r\n                                }\r\n                                else {\r\n                                    piece = pieces[0];\r\n                                }\r\n                                if (piece) {\r\n                                    engineFacade.move(MoveUtils.formatSingle(piece.point, false) + move.substring(move.indexOf('x') + 1) + promotionIndex);\r\n                                }\r\n                                else {\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (/^[A-Z]x[a-z]\\d$/g.test(move)) {\r\n                                    let piece = MoveUtils.findPieceByPossibleCapturesContaining(move.substring(move.indexOf('x') + 1), engineFacade.board, color).find(piece => this.resolvePieceByFirstChar(move.substring(0, 1), piece));\r\n                                    if (piece) {\r\n                                        engineFacade.move(MoveUtils.formatSingle(piece.point, false) + move.substring(move.indexOf('x') + 1) + promotionIndex);\r\n                                    }\r\n                                    else {\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (move === 'O-O-O') {\r\n                                        engineFacade.move(color === Color.WHITE ? 'e1c1' : 'e8c8');\r\n                                    }\r\n                                    else {\r\n                                        if (/^[A-Z]\\dx[a-z]\\d$/g.test(move)) { //Ngxe4 sytuacja 2 skoczkow pion bicie\r\n                                            let pieces = MoveUtils.findPieceByPossibleCapturesContaining(move.substring(move.indexOf('x') + 1), engineFacade.board, color).filter(piece => this.resolvePieceByFirstChar(move.charAt(0), piece));\r\n                                            let piece = this.resolveByRow(pieces, move.substring(1, 2));\r\n                                            if (piece) {\r\n                                                engineFacade.move(MoveUtils.formatSingle(piece.point, false) + move.substring(move.indexOf('x') + 1) + promotionIndex);\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            if (/^[A-Z][a-z][a-z]\\d$/g.test(move)) { // dwie wieze bez bicia Rac1 pion\r\n                                                let pieces = MoveUtils.findPieceByPossibleMovesContaining(move.substring(2, 4), engineFacade.board, color).filter(piece => this.resolvePieceByFirstChar(move.charAt(0), piece));\r\n                                                let piece = this.resolveByCol(pieces, move.substring(1, 2));\r\n                                                if (piece) {\r\n                                                    engineFacade.move(MoveUtils.formatSingle(piece.point, false) + move.substring(2, 4) + promotionIndex);\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                if (/^[A-Z][a-z]x[a-z]\\d$/g.test(move)) {\r\n                                                    let pieces = MoveUtils.findPieceByPossibleCapturesContaining(move.substring(move.indexOf('x') + 1), engineFacade.board, color).filter(piece => this.resolvePieceByFirstChar(move.charAt(0), piece));\r\n                                                    let piece = this.resolveByCol(pieces, move.substring(1, 2));\r\n                                                    if (piece) {\r\n                                                        engineFacade.move(MoveUtils.formatSingle(piece.point, false) + move.substring(move.indexOf('x') + 1) + promotionIndex);\r\n                                                    }\r\n                                                }\r\n                                                else {\r\n                                                    this.processR1f2(move, engineFacade, color, promotionIndex);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    processR1f2(move, engineFacade, color, promotionIndex) {\r\n        if (/^[A-Z]\\d[a-z]\\d$/g.test(move)) { // R1f2\r\n            let pieces = MoveUtils.findPieceByPossibleMovesContaining(move.substring(2, 4), engineFacade.board, color).filter(piece => this.resolvePieceByFirstChar(move.charAt(0), piece));\r\n            let piece = this.resolveByRow(pieces, move.substring(1, 2));\r\n            if (piece) {\r\n                engineFacade.move(MoveUtils.formatSingle(piece.point, false) + move.substring(2, 4) + promotionIndex);\r\n            }\r\n        }\r\n    }\r\n    extractMoves(notation) {\r\n        return notation.substring(notation.lastIndexOf(']') + 1)\r\n            .replace(/[0-9]+\\./g, '')\r\n            .replace(/\\s+/g, ' ')\r\n            .replace(/{[^}]*}/g, '')\r\n            .trim()\r\n            .split(' ')\r\n            .filter(s => s);\r\n    }\r\n    movePiece(piece, board, move) {\r\n        let indexes = MoveUtils.translateCoordsToIndex(move, board.reverted);\r\n        piece.point.col = indexes.xAxis;\r\n        piece.point.row = indexes.yAxis;\r\n    }\r\n    hasUpperCase(move) {\r\n        return /[A-Z]/.test(move);\r\n    }\r\n    resolvePieceByFirstChar(move, piece) {\r\n        let piecesFirstChar = '';\r\n        if (piece instanceof King) {\r\n            piecesFirstChar = 'K';\r\n        }\r\n        else {\r\n            if (piece instanceof Queen) {\r\n                piecesFirstChar = 'Q';\r\n            }\r\n            else {\r\n                if (piece instanceof Rook) {\r\n                    piecesFirstChar = 'R';\r\n                }\r\n                else {\r\n                    if (piece instanceof Bishop) {\r\n                        piecesFirstChar = 'B';\r\n                    }\r\n                    else {\r\n                        if (piece instanceof Knight) {\r\n                            piecesFirstChar = 'N';\r\n                        }\r\n                        else {\r\n                            if (piece instanceof Pawn) {\r\n                                piecesFirstChar = 'P';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return move === piecesFirstChar;\r\n    }\r\n    isShortCastle(move) {\r\n        return move === 'O-O';\r\n    }\r\n    removePiece(coords, board) {\r\n        let indexes = MoveUtils.translateCoordsToIndex(coords, board.reverted);\r\n        board.pieces = board.pieces.filter(e => !e.point.isEqual(new Point(indexes.yAxis, indexes.xAxis)));\r\n    }\r\n    isLongCastle(move) {\r\n        return move === 'O-O-O';\r\n    }\r\n    resolveByCol(pieces, char) {\r\n        let firstPieceFormat = MoveUtils.formatSingle(pieces[0].point, false);\r\n        let secondPieceFormat = MoveUtils.formatSingle(pieces[1].point, false);\r\n        return firstPieceFormat.substring(0, 1) === char\r\n            ? pieces[0]\r\n            : pieces[1];\r\n    }\r\n    resolveByRow(pieces, char) {\r\n        let firstPieceFormat = MoveUtils.formatSingle(pieces[0].point, false);\r\n        let secondPieceFormat = MoveUtils.formatSingle(pieces[1].point, false);\r\n        return firstPieceFormat.substring(1, 2) === char\r\n            ? pieces[0]\r\n            : pieces[1];\r\n    }\r\n    replacePromotion(move) {\r\n        return move\r\n            .replace('=Q', '1')\r\n            .replace('=R', '2')\r\n            .replace('=B', '3')\r\n            .replace('=K', '4');\r\n    }\r\n    resolvePromotion(promotionChar) {\r\n        switch (promotionChar) {\r\n            case 'Q':\r\n                return '1';\r\n            case 'R':\r\n                return '2';\r\n            case 'B':\r\n                return '3';\r\n            case 'N':\r\n                return '4';\r\n        }\r\n        return '';\r\n    }\r\n}\n\nclass NotationProcessorFactory {\r\n    static getProcessor(type) {\r\n        switch (type) {\r\n            case NotationType.FEN:\r\n                return new DefaultFenProcessor();\r\n            case NotationType.PGN:\r\n                return new DefaultPgnProcessor$1();\r\n        }\r\n    }\r\n    static getDefaultProcessor() {\r\n        return new DefaultFenProcessor();\r\n    }\r\n}\r\nvar NotationType;\r\n(function (NotationType) {\r\n    NotationType[NotationType[\"FEN\"] = 1] = \"FEN\";\r\n    NotationType[NotationType[\"PGN\"] = 2] = \"PGN\";\r\n})(NotationType || (NotationType = {}));\n\nclass DrawPoint {\r\n    constructor(x, y, color) {\r\n        this.x = x + 0.5;\r\n        this.y = y + 0.5;\r\n        this.color = color;\r\n    }\r\n    isEqual(that) {\r\n        return that && that.x === this.x && this.y === that.y;\r\n    }\r\n}\n\nclass ClickUtils {\r\n    static getClickPoint(event, top, height, left, width) {\r\n        return new Point(Math.floor((event.y - top) / (height / 8)), Math.floor((event.x - left) / (width / 8)));\r\n    }\r\n    static getDrawingPoint(tileSize, colorStrategy, x, y, ctrl, alt, shift, xAxis, yAxis) {\r\n        const squareSize = tileSize / 8;\r\n        const xx = Math.floor((x - xAxis) /\r\n            squareSize);\r\n        const yy = Math.floor((y - yAxis) /\r\n            squareSize);\r\n        let color = colorStrategy.resolve(ctrl, shift, alt);\r\n        return new DrawPoint(Math.floor(xx * squareSize + squareSize / 2), Math.floor(yy * squareSize + squareSize / 2), color);\r\n    }\r\n}\n\nclass HistoryMove {\r\n    constructor(move, piece, color, captured) {\r\n        this.move = move;\r\n        this.piece = piece;\r\n        this.color = color;\r\n        this.x = captured;\r\n    }\r\n    setGameStates(check, stalemate, mate) {\r\n        this.check = check;\r\n        this.stalemate = stalemate;\r\n        this.mate = mate;\r\n    }\r\n}\n\nclass HistoryMoveProvider {\r\n    constructor() {\r\n        this.historyMovesSubject$ = new BehaviorSubject([]);\r\n    }\r\n    get historyMoves() {\r\n        return this.historyMovesSubject$.value;\r\n    }\r\n    set historyMoves(states) {\r\n        this.historyMovesSubject$.next(states);\r\n    }\r\n    addMove(historyMove) {\r\n        this.historyMoves = [...this.historyMoves, historyMove];\r\n    }\r\n    pop() {\r\n        const lastHistoryMove = this.getLastMove();\r\n        this.historyMoves = this.historyMoves.filter((state) => state !== lastHistoryMove);\r\n        return lastHistoryMove;\r\n    }\r\n    getAll() {\r\n        return this.historyMoves;\r\n    }\r\n    clear() {\r\n        this.historyMoves = [];\r\n    }\r\n    getLastMove() {\r\n        return this.historyMoves[this.getLastMoveIndex()];\r\n    }\r\n    getLastMoveIndex() {\r\n        return this.historyMoves.length - 1;\r\n    }\r\n}\n\nclass Constants {\r\n}\r\nConstants.DEFAULT_DARK_TILE_COLOR = 'rgb(97, 84, 61)';\r\nConstants.DEFAULT_LIGHT_TILE_COLOR = '#BAA378';\r\nConstants.DEFAULT_SIZE = 500;\r\nConstants.MIN_BOARD_SIZE = 100;\r\nConstants.MAX_BOARD_SIZE = 4000;\r\nConstants.DEFAULT_SOURCE_POINT_COLOR = 'rgba(146, 111, 26, 0.79)';\r\nConstants.DEFAULT_DESTINATION_POINT_COLOR = '#b28e1a';\r\nConstants.DEFAULT_LEGAL_MOVE_POINT_COLOR = 'radial-gradient(#13262F 15%, transparent 20%);';\n\nclass PieceIconInputManager {\r\n    constructor() {\r\n        this._defaultIcons = false;\r\n    }\r\n    get pieceIconInput() {\r\n        return this._pieceIconInput;\r\n    }\r\n    set pieceIconInput(value) {\r\n        this._pieceIconInput = value;\r\n    }\r\n    get defaultIcons() {\r\n        return this._defaultIcons;\r\n    }\r\n    set defaultIcons(value) {\r\n        this._defaultIcons = value;\r\n    }\r\n    isDefaultIcons() {\r\n        return this.pieceIconInput === undefined || this.pieceIconInput === null;\r\n    }\r\n    getPieceIcon(piece) {\r\n        let isWhite = (piece.color === Color.WHITE);\r\n        switch (piece.constructor) {\r\n            case King:\r\n                return isWhite ? this.pieceIconInput.whiteKingUrl : this.pieceIconInput.blackKingUrl;\r\n            case Queen:\r\n                return isWhite ? this.pieceIconInput.whiteQueenUrl : this.pieceIconInput.blackQueenUrl;\r\n            case Rook:\r\n                return isWhite ? this.pieceIconInput.whiteRookUrl : this.pieceIconInput.blackRookUrl;\r\n            case Bishop:\r\n                return isWhite ? this.pieceIconInput.whiteBishopUrl : this.pieceIconInput.blackBishopUrl;\r\n            case Knight:\r\n                return isWhite ? this.pieceIconInput.whiteKnightUrl : this.pieceIconInput.blackKnightUrl;\r\n            case Pawn:\r\n                return isWhite ? this.pieceIconInput.whitePawnUrl : this.pieceIconInput.blackPawnUrl;\r\n        }\r\n    }\r\n    loadDefaultData() {\r\n        this.pieceIconInput = {\r\n            blackBishopUrl: '',\r\n            blackKingUrl: '',\r\n            blackKnightUrl: '',\r\n            blackQueenUrl: '',\r\n            blackRookUrl: '',\r\n            whiteBishopUrl: '',\r\n            whiteKingUrl: '',\r\n            whiteKnightUrl: '',\r\n            whitePawnUrl: '',\r\n            whiteQueenUrl: '',\r\n            whiteRookUrl: '',\r\n            blackPawnUrl: 'a'\r\n        };\r\n    }\r\n}\n\nclass CoordsProvider {\r\n    constructor() {\r\n        this.defaultXCoords = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n        this.defaultYCoords = [8, 7, 6, 5, 4, 3, 2, 1];\r\n        this.currentXCoords = [...this.defaultXCoords];\r\n        this.currentYCoords = [...this.defaultYCoords];\r\n    }\r\n    get xCoords() {\r\n        return this.currentXCoords;\r\n    }\r\n    get yCoords() {\r\n        return this.currentYCoords;\r\n    }\r\n    reverse() {\r\n        this.currentXCoords = this.currentXCoords.reverse();\r\n        this.currentYCoords = this.currentYCoords.reverse();\r\n    }\r\n    reset() {\r\n        this.init();\r\n    }\r\n    init() {\r\n        this.currentXCoords = [...this.defaultXCoords];\r\n        this.currentYCoords = [...this.defaultYCoords];\r\n    }\r\n}\n\nclass AnimationDragEndProcessor {\r\n    dragEnded(event, disabling, startTrans) {\r\n        if (!disabling) {\r\n            if (startTrans) {\r\n                event.source._dragRef.getRootElement().style.transform = startTrans;\r\n            }\r\n        }\r\n    }\r\n}\n\nclass DragEndStrategy {\r\n    constructor() {\r\n        this.dragEndProcessor = new AnimationDragEndProcessor();\r\n    }\r\n    process(event, disabling, startTrans) {\r\n        this.dragEndProcessor.dragEnded(event, disabling, startTrans);\r\n    }\r\n    setDragEndProcessor(processor) {\r\n        this.dragEndProcessor = processor;\r\n    }\r\n}\n\nclass AnimationDragStartProcessor {\r\n    dragStarted(event) {\r\n        const style = event.source.getRootElement().style;\r\n        style.zIndex = '1000';\r\n        style.position = 'absolute';\r\n    }\r\n}\n\nclass DragStartStrategy {\r\n    constructor() {\r\n        this.dragStartProcessor = new AnimationDragStartProcessor();\r\n    }\r\n    process(event) {\r\n        this.dragStartProcessor.dragStarted(event);\r\n    }\r\n    setDragStartProcessor(processor) {\r\n        this.dragStartProcessor = processor;\r\n    }\r\n}\n\nclass DefaultColorProcessor {\r\n    resolve(ctrl, shift, alt) {\r\n        let color = 'green';\r\n        if (ctrl || shift) {\r\n            color = 'red';\r\n        }\r\n        if (alt) {\r\n            color = 'blue';\r\n        }\r\n        if ((shift || ctrl) && alt) {\r\n            color = 'orange';\r\n        }\r\n        return color;\r\n    }\r\n}\n\nclass ColorStrategy {\r\n    constructor() {\r\n        this.colorProcessor = new DefaultColorProcessor();\r\n    }\r\n    resolve(ctrl, shift, alt) {\r\n        return this.colorProcessor.resolve(ctrl, shift, alt);\r\n    }\r\n    setColorProcessor(colorProcessor) {\r\n        this.colorProcessor = colorProcessor;\r\n    }\r\n}\n\nclass DrawProvider {\r\n    constructor() {\r\n        this.arrowsSubject$ = new BehaviorSubject([]);\r\n        this.circlesSubject$ = new BehaviorSubject([]);\r\n        this.arrows$ = this.arrowsSubject$.asObservable();\r\n        this.circles$ = this.circlesSubject$.asObservable();\r\n    }\r\n    get circles() {\r\n        return this.circlesSubject$.value;\r\n    }\r\n    set circles(circles) {\r\n        this.circlesSubject$.next(circles);\r\n    }\r\n    get arrows() {\r\n        return this.arrowsSubject$.value;\r\n    }\r\n    set arrows(arrows) {\r\n        this.arrowsSubject$.next(arrows);\r\n    }\r\n    addCircle(circle) {\r\n        this.circles = [...this.circles, circle];\r\n    }\r\n    reomveCircle(removeCircle) {\r\n        this.circles = this.circles.filter((circle) => !circle.isEqual(removeCircle));\r\n    }\r\n    addArrow(arrow) {\r\n        this.arrows = [...this.arrows, arrow];\r\n    }\r\n    removeArrow(removeArrow) {\r\n        this.arrows = this.arrows.filter((arrow) => !arrow.isEqual(removeArrow));\r\n    }\r\n    containsCircle(checkCircle) {\r\n        return this.circles.some((circle) => circle.isEqual(checkCircle));\r\n    }\r\n    containsArrow(checkArrow) {\r\n        return this.arrows.some((arrow) => arrow.isEqual(checkArrow));\r\n    }\r\n    clear() {\r\n        this.arrows = [];\r\n        this.circles = [];\r\n    }\r\n}\n\nclass AbstractPgnProcessor {\r\n    constructor() {\r\n        this.pgn = '';\r\n        this.currentIndex = 0.5;\r\n    }\r\n    getPGN() {\r\n        return this.pgn;\r\n    }\r\n    processChecks(checkmate, check, stalemate) {\r\n        if (checkmate) {\r\n            this.pgn += '#';\r\n        }\r\n        else {\r\n            if (check) {\r\n                this.pgn += '+';\r\n            }\r\n        }\r\n    }\r\n    reset() {\r\n        this.pgn = '';\r\n        this.currentIndex = 0.5;\r\n    }\r\n    addPromotionChoice(promotion) {\r\n        switch (promotion) {\r\n            case 1:\r\n                this.pgn += '=Q';\r\n                break;\r\n            case 2:\r\n                this.pgn += '=R';\r\n                break;\r\n            case 3:\r\n                this.pgn += '=B';\r\n                break;\r\n            case 4:\r\n                this.pgn += '=N';\r\n                break;\r\n        }\r\n    }\r\n    removeLast() {\r\n        if (this.currentIndex >= 0.5) {\r\n            this.currentIndex -= 0.5;\r\n            const regex1 = new RegExp(/\\d+\\./g);\r\n            regex1.test(this.pgn);\r\n            this.pgn = this.pgn.substring(0, regex1.lastIndex).trim();\r\n        }\r\n    }\r\n}\n\nclass DefaultPgnProcessor extends AbstractPgnProcessor {\r\n    process(board, sourcePiece, destPoint, destPiece) {\r\n        this.currentIndex += 0.5;\r\n        this.pgn += (this.currentIndex % Math.floor(this.currentIndex) === 0) ? (' ' + this.currentIndex + '. ') : ' ';\r\n        let possibleCaptures = [];\r\n        let possibleMoves = [];\r\n        if (destPiece) {\r\n            possibleCaptures = MoveUtils.findPieceByPossibleCapturesContaining(MoveUtils.formatSingle(destPoint, board.reverted), board, sourcePiece.color).filter(piece => piece.constructor.name === sourcePiece.constructor.name);\r\n        }\r\n        possibleMoves = MoveUtils.findPieceByPossibleMovesContaining(MoveUtils.formatSingle(destPoint, board.reverted), board, sourcePiece.color).filter(piece => piece.constructor.name === sourcePiece.constructor.name);\r\n        if (sourcePiece instanceof Pawn && !destPiece && possibleCaptures.length === 0) {\r\n            this.pgn += MoveUtils.formatSingle(destPoint, board.reverted);\r\n        }\r\n        else {\r\n            if (sourcePiece instanceof Pawn && destPiece) {\r\n                this.pgn += MoveUtils.formatSingle(sourcePiece.point, board.reverted).substring(0, 1) + 'x' + MoveUtils.formatSingle(destPoint, board.reverted);\r\n            }\r\n            else {\r\n                if (sourcePiece instanceof King && (Math.abs(sourcePiece.point.col - destPoint.col) === 2)) {\r\n                    if (board.reverted) {\r\n                        this.pgn += destPoint.col < 2\r\n                            ? 'O-O'\r\n                            : 'O-O-O';\r\n                    }\r\n                    else {\r\n                        this.pgn += destPoint.col < 3\r\n                            ? 'O-O-O'\r\n                            : 'O-O';\r\n                    }\r\n                }\r\n                else {\r\n                    if (!(sourcePiece instanceof Pawn) && possibleCaptures.length === 0 && possibleMoves.length < 2) { // Nf3\r\n                        this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.formatSingle(destPoint, board.reverted);\r\n                    }\r\n                    else {\r\n                        if (possibleMoves && possibleMoves.length === 2 && possibleCaptures.length === 0) { // Nbd7\r\n                            if (this.isEqualByCol(possibleMoves[0], possibleMoves[1])) {\r\n                                this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.reverse(board, sourcePiece.point.row) + MoveUtils.formatSingle(destPoint, board.reverted);\r\n                            }\r\n                            else {\r\n                                this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.formatCol(board, sourcePiece.point.col) + MoveUtils.formatSingle(destPoint, board.reverted);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (possibleCaptures.length > 1) {\r\n                                if ((this.isEqualByCol(possibleCaptures[0], possibleCaptures[1]))) {\r\n                                    this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.reverse(board, sourcePiece.point.row) + 'x' + MoveUtils.formatSingle(destPoint, board.reverted);\r\n                                }\r\n                                else {\r\n                                    this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.formatCol(board, sourcePiece.point.col) + 'x' + MoveUtils.formatSingle(destPoint, board.reverted);\r\n                                }\r\n                            }\r\n                            else {\r\n                                this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + 'x' + MoveUtils.formatSingle(destPoint, board.reverted);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.pgn = this.pgn.trim();\r\n    }\r\n    resolvePieceByFirstChar(move, piece) {\r\n        return MoveUtils.getFirstLetterPiece(piece) === move;\r\n    }\r\n    isEqualByCol(aPiece, bPiece) {\r\n        return aPiece.point.col === bPiece.point.col;\r\n    }\r\n}\n\nclass AbstractEngineFacade {\r\n    constructor(board) {\r\n        this.dragStartStrategy = new DragStartStrategy();\r\n        this.dragEndStrategy = new DragEndStrategy();\r\n        this.pgnProcessor = new DefaultPgnProcessor();\r\n        this.colorStrategy = new ColorStrategy();\r\n        this.coords = new CoordsProvider();\r\n        this.heightAndWidth = Constants.DEFAULT_SIZE;\r\n        this.freeMode = false;\r\n        this.drawProvider = new DrawProvider();\r\n        this.pieceIconManager = new PieceIconInputManager();\r\n        this.moveHistoryProvider = new HistoryMoveProvider();\r\n        this.disabling = false;\r\n        this.board = board;\r\n    }\r\n    checkIfPawnFirstMove(piece) {\r\n        if (piece instanceof Pawn) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n    checkIfRookMoved(piece) {\r\n        if (piece instanceof Rook) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n    checkIfKingMoved(piece) {\r\n        if (piece instanceof King) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n    getMoveHistory() {\r\n        return this.moveHistoryProvider.getAll();\r\n    }\r\n}\n\nclass BoardLoader {\r\n    constructor(engineFacade, notationProcessor) {\r\n        this.engineFacade = engineFacade;\r\n        if (notationProcessor) {\r\n            this.notationProcessor = notationProcessor;\r\n        }\r\n        else {\r\n            this.notationProcessor = NotationProcessorFactory.getDefaultProcessor();\r\n        }\r\n    }\r\n    addPieces() {\r\n        DefaultPiecesLoader.loadDefaultPieces(this.engineFacade.board);\r\n    }\r\n    loadFEN(fen) {\r\n        this.notationProcessor.process(fen, this.engineFacade);\r\n    }\r\n    loadPGN(pgn) {\r\n        this.notationProcessor.process(pgn, this.engineFacade);\r\n    }\r\n    setEngineFacade(engineFacade) {\r\n        this.engineFacade = engineFacade;\r\n    }\r\n    setNotationProcessor(notationProcessor) {\r\n        this.notationProcessor = notationProcessor;\r\n    }\r\n}\n\nclass BoardState {\r\n    constructor(board) {\r\n        this.board = board;\r\n    }\r\n}\n\nclass BoardStateProvider {\r\n    constructor() {\r\n        this.statesSubject$ = new BehaviorSubject([]);\r\n    }\r\n    get states() {\r\n        return this.statesSubject$.value;\r\n    }\r\n    set states(states) {\r\n        this.statesSubject$.next(states);\r\n    }\r\n    addMove(state) {\r\n        this.states = [...this.states, state];\r\n    }\r\n    getStates() {\r\n        return this.states;\r\n    }\r\n    pop() {\r\n        const lastState = this.getLastState();\r\n        this.states = this.states.filter((state) => state !== lastState);\r\n        return lastState;\r\n    }\r\n    isEmpty() {\r\n        return this.states.length === 0;\r\n    }\r\n    clear() {\r\n        this.states = [];\r\n    }\r\n    getLastState() {\r\n        return this.states[this.getLastStateIndex()];\r\n    }\r\n    getLastStateIndex() {\r\n        return this.states.length - 1;\r\n    }\r\n}\n\nclass Arrow {\r\n    isEqual(arrow) {\r\n        return arrow && this.start.isEqual(arrow.start) && this.end.isEqual(arrow.end);\r\n    }\r\n}\n\nclass Circle {\r\n    isEqual(circle) {\r\n        return circle && this.drawPoint.isEqual(circle.drawPoint);\r\n    }\r\n}\n\nclass PieceAbstractDecorator {\r\n    constructor(piece) {\r\n        this.piece = piece;\r\n    }\r\n}\n\nclass AvailableMoveDecorator extends PieceAbstractDecorator {\r\n    constructor(piece, pointClicked, color, board) {\r\n        super(piece);\r\n        this.pointClicked = pointClicked;\r\n        this.color = color;\r\n        this.board = board;\r\n    }\r\n    getPossibleCaptures() {\r\n        return this.piece\r\n            .getPossibleCaptures()\r\n            .filter((point) => !MoveUtils.willMoveCauseCheck(this.color, this.pointClicked.row, this.pointClicked.col, point.row, point.col, this.board));\r\n    }\r\n    getPossibleMoves() {\r\n        return this.piece\r\n            .getPossibleMoves()\r\n            .filter((point) => !MoveUtils.willMoveCauseCheck(this.color, this.pointClicked.row, this.pointClicked.col, point.row, point.col, this.board));\r\n    }\r\n}\n\nclass PiecePromotionResolver {\r\n    static resolvePromotionChoice(board, piece, index) {\r\n        const isWhite = piece.color === Color.WHITE;\r\n        switch (index) {\r\n            case 1:\r\n                board.pieces.push(new Queen(piece.point, piece.color, isWhite\r\n                    ? UnicodeConstants.WHITE_QUEEN\r\n                    : UnicodeConstants.BLACK_QUEEN, board));\r\n                break;\r\n            case 2:\r\n                board.pieces.push(new Rook(piece.point, piece.color, isWhite\r\n                    ? UnicodeConstants.WHITE_ROOK\r\n                    : UnicodeConstants.BLACK_ROOK, board));\r\n                break;\r\n            case 3:\r\n                board.pieces.push(new Bishop(piece.point, piece.color, isWhite\r\n                    ? UnicodeConstants.WHITE_BISHOP\r\n                    : UnicodeConstants.BLACK_BISHOP, board));\r\n                break;\r\n            case 4:\r\n                board.pieces.push(new Knight(piece.point, piece.color, isWhite\r\n                    ? UnicodeConstants.WHITE_KNIGHT\r\n                    : UnicodeConstants.BLACK_KNIGHT, board));\r\n                break;\r\n        }\r\n    }\r\n}\n\nvar PieceTypeInput;\r\n(function (PieceTypeInput) {\r\n    PieceTypeInput[PieceTypeInput[\"KING\"] = 1] = \"KING\";\r\n    PieceTypeInput[PieceTypeInput[\"QUEEN\"] = 2] = \"QUEEN\";\r\n    PieceTypeInput[PieceTypeInput[\"BISHOP\"] = 3] = \"BISHOP\";\r\n    PieceTypeInput[PieceTypeInput[\"KNIGHT\"] = 4] = \"KNIGHT\";\r\n    PieceTypeInput[PieceTypeInput[\"ROOK\"] = 5] = \"ROOK\";\r\n    PieceTypeInput[PieceTypeInput[\"PAWN\"] = 6] = \"PAWN\";\r\n})(PieceTypeInput || (PieceTypeInput = {}));\r\nvar ColorInput;\r\n(function (ColorInput) {\r\n    ColorInput[ColorInput[\"LIGHT\"] = 1] = \"LIGHT\";\r\n    ColorInput[ColorInput[\"DARK\"] = 2] = \"DARK\";\r\n})(ColorInput || (ColorInput = {}));\n\nclass PieceFactory {\r\n    static create(indexes, pieceTypeInput, colorInput, board) {\r\n        let piece;\r\n        let color = colorInput === ColorInput.LIGHT\r\n            ? Color.WHITE\r\n            : Color.BLACK;\r\n        switch (pieceTypeInput) {\r\n            case PieceTypeInput.QUEEN:\r\n                piece = new Queen(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN, board);\r\n                break;\r\n            case PieceTypeInput.KING:\r\n                piece = new King(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_KING : UnicodeConstants.BLACK_KING, board);\r\n                break;\r\n            case PieceTypeInput.KNIGHT:\r\n                piece = new Knight(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_KNIGHT : UnicodeConstants.BLACK_KNIGHT, board);\r\n                break;\r\n            case PieceTypeInput.BISHOP:\r\n                piece = new Bishop(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_BISHOP : UnicodeConstants.BLACK_BISHOP, board);\r\n                break;\r\n            case PieceTypeInput.ROOK:\r\n                piece = new Rook(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_ROOK : UnicodeConstants.BLACK_ROOK, board);\r\n                break;\r\n            case PieceTypeInput.PAWN:\r\n                piece = new Pawn(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_PAWN : UnicodeConstants.BLACK_PAWN, board);\r\n                break;\r\n        }\r\n        return piece;\r\n    }\r\n}\n\nclass EngineFacade extends AbstractEngineFacade {\r\n    constructor(board, moveChange) {\r\n        super(board);\r\n        this._selected = false;\r\n        this.moveChange = moveChange;\r\n        this.boardLoader = new BoardLoader(this);\r\n        this.boardLoader.addPieces();\r\n        this.boardStateProvider = new BoardStateProvider();\r\n    }\r\n    reset() {\r\n        this.boardStateProvider.clear();\r\n        this.moveHistoryProvider.clear();\r\n        this.boardLoader.addPieces();\r\n        this.board.reset();\r\n        this.coords.reset();\r\n        this.drawProvider.clear();\r\n        this.pgnProcessor.reset();\r\n    }\r\n    undo() {\r\n        if (!this.boardStateProvider.isEmpty()) {\r\n            const lastBoard = this.boardStateProvider.pop().board;\r\n            if (this.board.reverted) {\r\n                lastBoard.reverse();\r\n            }\r\n            this.board = lastBoard;\r\n            this.board.possibleCaptures = [];\r\n            this.board.possibleMoves = [];\r\n            this.board.activePiece = null;\r\n            this.moveHistoryProvider.pop();\r\n            this.board.calculateFEN();\r\n            this.pgnProcessor.removeLast();\r\n        }\r\n    }\r\n    saveMoveClone() {\r\n        const clone = this.board.clone();\r\n        if (this.board.reverted) {\r\n            clone.reverse();\r\n        }\r\n        this.moveStateProvider.addMove(new BoardState(clone));\r\n    }\r\n    move(coords) {\r\n        if (coords) {\r\n            const sourceIndexes = MoveUtils.translateCoordsToIndex(coords.substring(0, 2), this.board.reverted);\r\n            const destIndexes = MoveUtils.translateCoordsToIndex(coords.substring(2, 4), this.board.reverted);\r\n            const srcPiece = this.board.getPieceByPoint(sourceIndexes.yAxis, sourceIndexes.xAxis);\r\n            if (srcPiece) {\r\n                if ((this.board.currentWhitePlayer &&\r\n                    srcPiece.color === Color.BLACK) ||\r\n                    (!this.board.currentWhitePlayer &&\r\n                        srcPiece.color === Color.WHITE)) {\r\n                    return;\r\n                }\r\n                this.prepareActivePiece(srcPiece, srcPiece.point);\r\n                if (this.board.isPointInPossibleMoves(new Point(destIndexes.yAxis, destIndexes.xAxis)) ||\r\n                    this.board.isPointInPossibleCaptures(new Point(destIndexes.yAxis, destIndexes.xAxis))) {\r\n                    this.saveClone();\r\n                    this.movePiece(srcPiece, new Point(destIndexes.yAxis, destIndexes.xAxis), coords.length === 5 ? +coords.substring(4, 5) : 0);\r\n                    this.board.lastMoveSrc = new Point(sourceIndexes.yAxis, sourceIndexes.xAxis);\r\n                    this.board.lastMoveDest = new Point(destIndexes.yAxis, destIndexes.xAxis);\r\n                    this.disableSelection();\r\n                }\r\n                else {\r\n                    this.disableSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    prepareActivePiece(pieceClicked, pointClicked) {\r\n        this.board.activePiece = pieceClicked;\r\n        this._selected = true;\r\n        this.board.possibleCaptures = new AvailableMoveDecorator(pieceClicked, pointClicked, this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK, this.board).getPossibleCaptures();\r\n        this.board.possibleMoves = new AvailableMoveDecorator(pieceClicked, pointClicked, this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK, this.board).getPossibleMoves();\r\n    }\r\n    onPieceClicked(pieceClicked, pointClicked) {\r\n        if ((this.board.currentWhitePlayer && pieceClicked.color === Color.BLACK) ||\r\n            (!this.board.currentWhitePlayer && pieceClicked.color === Color.WHITE)) {\r\n            return;\r\n        }\r\n        this.prepareActivePiece(pieceClicked, pointClicked);\r\n    }\r\n    handleClickEvent(pointClicked, isMouseDown) {\r\n        let moving = false;\r\n        if (((this.board.isPointInPossibleMoves(pointClicked) ||\r\n            this.board.isPointInPossibleCaptures(pointClicked)) || this.freeMode) && pointClicked.isInRange()) {\r\n            this.saveClone();\r\n            this.board.lastMoveSrc = new Point(this.board.activePiece.point.row, this.board.activePiece.point.col);\r\n            this.board.lastMoveDest = pointClicked.clone();\r\n            this.movePiece(this.board.activePiece, pointClicked);\r\n            if (!this.board.activePiece.point.isEqual(this.board.lastMoveSrc)) {\r\n                moving = true;\r\n            }\r\n        }\r\n        if (isMouseDown || moving) {\r\n            this.disableSelection();\r\n        }\r\n        this.disableSelection();\r\n        const pieceClicked = this.board.getPieceByPoint(pointClicked.row, pointClicked.col);\r\n        if (pieceClicked && !moving) {\r\n            this.onFreeMode(pieceClicked);\r\n            this.onPieceClicked(pieceClicked, pointClicked);\r\n        }\r\n    }\r\n    onMouseDown(event, pointClicked, left, top) {\r\n        this.moveDone = false;\r\n        if (event.button !== 0) {\r\n            this.drawPoint = ClickUtils.getDrawingPoint(this.heightAndWidth, this.colorStrategy, event.x, event.y, event.ctrlKey, event.altKey, event.shiftKey, left, top);\r\n            return;\r\n        }\r\n        this.drawProvider.clear();\r\n        if (this.board.activePiece &&\r\n            pointClicked.isEqual(this.board.activePiece.point)) {\r\n            this.disabling = true;\r\n            return;\r\n        }\r\n        const pieceClicked = this.board.getPieceByPoint(pointClicked.row, pointClicked.col);\r\n        if (this.freeMode) {\r\n            if (pieceClicked) {\r\n                if (event.ctrlKey) {\r\n                    this.board.pieces = this.board.pieces.filter(e => e !== pieceClicked);\r\n                    return;\r\n                }\r\n                this.board.currentWhitePlayer = (pieceClicked.color === Color.WHITE);\r\n            }\r\n        }\r\n        if (this.isPieceDisabled(pieceClicked)) {\r\n            return;\r\n        }\r\n        if (this._selected) {\r\n            this.handleClickEvent(pointClicked, true);\r\n        }\r\n        else {\r\n            if (pieceClicked) {\r\n                this.onFreeMode(pieceClicked);\r\n                this.onPieceClicked(pieceClicked, pointClicked);\r\n            }\r\n        }\r\n    }\r\n    onMouseUp(event, pointClicked, left, top) {\r\n        this.moveDone = false;\r\n        if (event.button !== 0 && !this.drawDisabled) {\r\n            this.addDrawPoint(event.x, event.y, event.ctrlKey, event.altKey, event.shiftKey, left, top);\r\n            return;\r\n        }\r\n        this.drawProvider.clear();\r\n        if (this.dragDisabled) {\r\n            return;\r\n        }\r\n        if (this.board.activePiece &&\r\n            pointClicked.isEqual(this.board.activePiece.point) &&\r\n            this.disabling) {\r\n            this.disableSelection();\r\n            this.disabling = false;\r\n            return;\r\n        }\r\n        const pieceClicked = this.board.getPieceByPoint(pointClicked.row, pointClicked.col);\r\n        if (this.isPieceDisabled(pieceClicked)) {\r\n            return;\r\n        }\r\n        if (this._selected) {\r\n            this.handleClickEvent(pointClicked, false);\r\n            //   this.possibleMoves = activePiece.getPossibleMoves();\r\n        }\r\n    }\r\n    saveClone() {\r\n        const clone = this.board.clone();\r\n        if (this.board.reverted) {\r\n            clone.reverse();\r\n        }\r\n        this.boardStateProvider.addMove(new BoardState(clone));\r\n    }\r\n    movePiece(toMovePiece, newPoint, promotionIndex) {\r\n        const destPiece = this.board.pieces.find((piece) => piece.point.col === newPoint.col &&\r\n            piece.point.row === newPoint.row);\r\n        this.pgnProcessor.process(this.board, toMovePiece, newPoint, destPiece);\r\n        if (destPiece && toMovePiece.color !== destPiece.color) {\r\n            this.board.pieces = this.board.pieces.filter((piece) => piece !== destPiece);\r\n        }\r\n        else {\r\n            if (destPiece && toMovePiece.color === destPiece.color) {\r\n                return;\r\n            }\r\n        }\r\n        this.historyMoveCandidate = new HistoryMove(MoveUtils.format(toMovePiece.point, newPoint, this.board.reverted), toMovePiece.constant.name, toMovePiece.color === Color.WHITE ? 'white' : 'black', !!destPiece);\r\n        this.moveHistoryProvider.addMove(this.historyMoveCandidate);\r\n        if (toMovePiece instanceof King) {\r\n            const squaresMoved = Math.abs(newPoint.col - toMovePiece.point.col);\r\n            if (squaresMoved > 1) {\r\n                if (newPoint.col < 3) {\r\n                    const leftRook = this.board.getPieceByField(toMovePiece.point.row, 0);\r\n                    if (!this.freeMode) {\r\n                        leftRook.point.col = this.board.reverted ? 2 : 3;\r\n                    }\r\n                }\r\n                else {\r\n                    const rightRook = this.board.getPieceByField(toMovePiece.point.row, 7);\r\n                    if (!this.freeMode) {\r\n                        rightRook.point.col = this.board.reverted ? 4 : 5;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (toMovePiece instanceof Pawn) {\r\n            this.board.checkIfPawnTakesEnPassant(newPoint);\r\n            this.board.checkIfPawnEnpassanted(toMovePiece, newPoint);\r\n        }\r\n        else {\r\n            this.board.enPassantPoint = null;\r\n            this.board.enPassantPiece = null;\r\n        }\r\n        toMovePiece.point = newPoint;\r\n        this.increaseFullMoveCount();\r\n        this.board.currentWhitePlayer = !this.board.currentWhitePlayer;\r\n        if (!this.checkForPawnPromote(toMovePiece, promotionIndex)) {\r\n            this.afterMoveActions();\r\n        }\r\n    }\r\n    checkForPawnPromote(toPromotePiece, promotionIndex) {\r\n        if (!(toPromotePiece instanceof Pawn)) {\r\n            return;\r\n        }\r\n        if (toPromotePiece.point.row === 0 || toPromotePiece.point.row === 7) {\r\n            this.board.pieces = this.board.pieces.filter((piece) => piece !== toPromotePiece);\r\n            // When we make move manually, we pass promotion index already, so we don't need\r\n            // to acquire it from promote dialog\r\n            if (!promotionIndex) {\r\n                this.openPromoteDialog(toPromotePiece);\r\n            }\r\n            else {\r\n                PiecePromotionResolver.resolvePromotionChoice(this.board, toPromotePiece, promotionIndex);\r\n                this.afterMoveActions(promotionIndex);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    afterMoveActions(promotionIndex) {\r\n        this.checkIfPawnFirstMove(this.board.activePiece);\r\n        this.checkIfRookMoved(this.board.activePiece);\r\n        this.checkIfKingMoved(this.board.activePiece);\r\n        this.board.blackKingChecked = this.board.isKingInCheck(Color.BLACK, this.board.pieces);\r\n        this.board.whiteKingChecked = this.board.isKingInCheck(Color.WHITE, this.board.pieces);\r\n        const check = this.board.blackKingChecked || this.board.whiteKingChecked;\r\n        const checkmate = this.checkForPossibleMoves(Color.BLACK) ||\r\n            this.checkForPossibleMoves(Color.WHITE);\r\n        const stalemate = this.checkForPat(Color.BLACK) || this.checkForPat(Color.WHITE);\r\n        this.historyMoveCandidate.setGameStates(check, stalemate, checkmate);\r\n        this.pgnProcessor.processChecks(checkmate, check, stalemate);\r\n        this.pgnProcessor.addPromotionChoice(promotionIndex);\r\n        this.disabling = false;\r\n        this.board.calculateFEN();\r\n        const lastMove = this.moveHistoryProvider.getLastMove();\r\n        if (lastMove && promotionIndex) {\r\n            lastMove.move += promotionIndex;\r\n        }\r\n        this.moveChange.emit(Object.assign(Object.assign({}, lastMove), { check,\r\n            checkmate,\r\n            stalemate, fen: this.board.fen, pgn: {\r\n                pgn: this.pgnProcessor.getPGN()\r\n            }, freeMode: this.freeMode }));\r\n        this.moveDone = true;\r\n    }\r\n    checkForPat(color) {\r\n        if (color === Color.WHITE && !this.board.whiteKingChecked) {\r\n            return this.checkForPossibleMoves(color);\r\n        }\r\n        else {\r\n            if (color === Color.BLACK && !this.board.blackKingChecked) {\r\n                return this.checkForPossibleMoves(color);\r\n            }\r\n        }\r\n    }\r\n    openPromoteDialog(piece) {\r\n        if (piece.color === this.board.activePiece.color) {\r\n            this.modal.open((index) => {\r\n                PiecePromotionResolver.resolvePromotionChoice(this.board, piece, index);\r\n                this.afterMoveActions(index);\r\n            });\r\n        }\r\n    }\r\n    checkForPossibleMoves(color) {\r\n        return !this.board.pieces\r\n            .filter((piece) => piece.color === color)\r\n            .some((piece) => piece\r\n            .getPossibleMoves()\r\n            .some((move) => !MoveUtils.willMoveCauseCheck(color, piece.point.row, piece.point.col, move.row, move.col, this.board)) ||\r\n            piece\r\n                .getPossibleCaptures()\r\n                .some((capture) => !MoveUtils.willMoveCauseCheck(color, piece.point.row, piece.point.col, capture.row, capture.col, this.board)));\r\n    }\r\n    disableSelection() {\r\n        this._selected = false;\r\n        this.board.possibleCaptures = [];\r\n        this.board.activePiece = null;\r\n        this.board.possibleMoves = [];\r\n    }\r\n    /**\r\n     * Processes logic to allow freeMode based logic processing\r\n     */\r\n    onFreeMode(pieceClicked) {\r\n        if (!this.freeMode ||\r\n            pieceClicked === undefined ||\r\n            pieceClicked === null) {\r\n            return;\r\n        }\r\n        // sets player as white in-case white pieces are selected, and vice-versa when black is selected\r\n        this.board.currentWhitePlayer = pieceClicked.color === Color.WHITE;\r\n    }\r\n    isPieceDisabled(pieceClicked) {\r\n        if (pieceClicked && pieceClicked.point) {\r\n            const foundCapture = this.board.possibleCaptures.find((capture) => capture.col === pieceClicked.point.col &&\r\n                capture.row === pieceClicked.point.row);\r\n            if (foundCapture) {\r\n                return false;\r\n            }\r\n        }\r\n        return (pieceClicked &&\r\n            ((this.lightDisabled && pieceClicked.color === Color.WHITE) ||\r\n                (this.darkDisabled && pieceClicked.color === Color.BLACK)));\r\n    }\r\n    addDrawPoint(x, y, crtl, alt, shift, left, top) {\r\n        const upPoint = ClickUtils.getDrawingPoint(this.heightAndWidth, this.colorStrategy, x, y, crtl, alt, shift, left, top);\r\n        if (this.drawPoint.isEqual(upPoint)) {\r\n            const circle = new Circle();\r\n            circle.drawPoint = upPoint;\r\n            if (!this.drawProvider.containsCircle(circle)) {\r\n                this.drawProvider.addCircle(circle);\r\n            }\r\n            else {\r\n                this.drawProvider.reomveCircle(circle);\r\n            }\r\n        }\r\n        else {\r\n            const arrow = new Arrow();\r\n            arrow.start = this.drawPoint;\r\n            arrow.end = upPoint;\r\n            if (!this.drawProvider.containsArrow(arrow)) {\r\n                this.drawProvider.addArrow(arrow);\r\n            }\r\n            else {\r\n                this.drawProvider.removeArrow(arrow);\r\n            }\r\n        }\r\n    }\r\n    increaseFullMoveCount() {\r\n        if (!this.board.currentWhitePlayer) {\r\n            ++this.board.fullMoveCount;\r\n        }\r\n    }\r\n    addPiece(pieceTypeInput, colorInput, coords) {\r\n        if (this.freeMode && coords && pieceTypeInput > 0 && colorInput > 0) {\r\n            let indexes = MoveUtils.translateCoordsToIndex(coords, this.board.reverted);\r\n            let existing = this.board.getPieceByPoint(indexes.yAxis, indexes.xAxis);\r\n            if (existing) {\r\n                this.board.pieces = this.board.pieces.filter(e => e !== existing);\r\n            }\r\n            let createdPiece = PieceFactory.create(indexes, pieceTypeInput, colorInput, this.board);\r\n            this.saveClone();\r\n            this.board.pieces.push(createdPiece);\r\n            this.afterMoveActions();\r\n        }\r\n    }\r\n}\n\nclass Board {\r\n    constructor() {\r\n        this.board = [];\r\n        this.pieces = [];\r\n        this.enPassantPoint = null;\r\n        this.enPassantPiece = null;\r\n        this.lastMoveSrc = null;\r\n        this.lastMoveDest = null;\r\n        this.possibleCaptures = [];\r\n        this.possibleMoves = [];\r\n        this.currentWhitePlayer = true;\r\n        this.reverted = false;\r\n        this.fullMoveCount = 1;\r\n        for (let i = 0; i < 8; ++i) {\r\n            this.board[i] = [];\r\n            for (let j = 0; j < 8; ++j) {\r\n                this.board[i][j] = 0;\r\n            }\r\n        }\r\n    }\r\n    isXYInPossibleMoves(row, col) {\r\n        return this.possibleMoves.some((move) => move.row === row && move.col === col);\r\n    }\r\n    isXYInPossibleCaptures(row, col) {\r\n        return this.possibleCaptures.some((capture) => capture.row === row && capture.col === col);\r\n    }\r\n    isXYInSourceMove(i, j) {\r\n        return this.lastMoveSrc && this.lastMoveSrc.row === i && this.lastMoveSrc.col === j;\r\n    }\r\n    isXYInDestMove(i, j) {\r\n        return this.lastMoveDest && this.lastMoveDest.row === i && this.lastMoveDest.col === j;\r\n    }\r\n    isXYInActiveMove(i, j) {\r\n        return this.activePiece && this.activePiece.point.row === i && this.activePiece.point.col === j;\r\n    }\r\n    isPointInPossibleMoves(point) {\r\n        return this.possibleMoves.some((move) => move.row === point.row && move.col === point.col);\r\n    }\r\n    isPointInPossibleCaptures(point) {\r\n        return this.possibleCaptures.some((capture) => capture.row === point.row && capture.col === point.col);\r\n    }\r\n    reset() {\r\n        this.lastMoveDest = null;\r\n        this.lastMoveSrc = null;\r\n        this.whiteKingChecked = false;\r\n        this.blackKingChecked = false;\r\n        this.possibleCaptures = [];\r\n        this.possibleMoves = [];\r\n        this.activePiece = null;\r\n        this.reverted = false;\r\n        this.currentWhitePlayer = true;\r\n        this.enPassantPoint = null;\r\n        this.enPassantPiece = null;\r\n        this.fullMoveCount = 1;\r\n        this.calculateFEN();\r\n    }\r\n    reverse() {\r\n        this.reverted = !this.reverted;\r\n        this.activePiece = null;\r\n        this.possibleMoves = [];\r\n        this.possibleCaptures = [];\r\n        this.pieces.forEach((piece) => this.reversePoint(piece.point));\r\n        this.reversePoint(this.lastMoveSrc);\r\n        this.reversePoint(this.lastMoveDest);\r\n        if (this.enPassantPoint && this.enPassantPiece) {\r\n            this.reversePoint(this.enPassantPoint);\r\n        }\r\n    }\r\n    clone() {\r\n        return cloneDeep(this);\r\n    }\r\n    isFieldTakenByEnemy(row, col, enemyColor) {\r\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\r\n            return false;\r\n        }\r\n        return this.pieces.some((piece) => piece.point.col === col && piece.point.row === row && piece.color === enemyColor);\r\n    }\r\n    isFieldEmpty(row, col) {\r\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\r\n            return false;\r\n        }\r\n        return !this.pieces.some((piece) => piece.point.col === col && piece.point.row === row);\r\n    }\r\n    isFieldUnderAttack(row, col, color) {\r\n        return this.pieces\r\n            .filter((piece) => piece.color === color)\r\n            .some((piece) => piece.getCoveredFields().some((field) => field.col === col && field.row === row));\r\n    }\r\n    getPieceByField(row, col) {\r\n        if (this.isFieldEmpty(row, col)) {\r\n            //   throw new Error('Piece not found');\r\n            return undefined;\r\n        }\r\n        return this.pieces.find((piece) => piece.point.col === col && piece.point.row === row);\r\n    }\r\n    isKingInCheck(color, pieces) {\r\n        const king = pieces.find((piece) => piece.color === color && piece instanceof King);\r\n        if (king) {\r\n            return pieces.some((piece) => piece\r\n                .getPossibleCaptures()\r\n                .some((point) => point.col === king.point.col && point.row === king.point.row) &&\r\n                piece.color !== color);\r\n        }\r\n        return false;\r\n    }\r\n    getKingByColor(color) {\r\n        return this.pieces.find((piece) => piece instanceof King && piece.color === color);\r\n    }\r\n    getCastleFENString(color) {\r\n        const king = this.getKingByColor(color);\r\n        if (!king || king.isMovedAlready) {\r\n            return '';\r\n        }\r\n        let fen = '';\r\n        const leftRook = this.getPieceByField(king.point.row, 0);\r\n        const rightRook = this.getPieceByField(king.point.row, 7);\r\n        if (rightRook instanceof Rook && rightRook.color === color) {\r\n            if (!rightRook.isMovedAlready) {\r\n                fen += this.reverted ? 'q' : 'k';\r\n            }\r\n        }\r\n        if (leftRook instanceof Rook && leftRook.color === color) {\r\n            if (!leftRook.isMovedAlready) {\r\n                fen += this.reverted ? 'k' : 'q';\r\n            }\r\n        }\r\n        fen = fen.split('').sort().join('');\r\n        return color === Color.BLACK ? fen : fen.toUpperCase();\r\n    }\r\n    getEnPassantFENString() {\r\n        if (this.enPassantPoint) {\r\n            if (this.reverted) {\r\n                return String.fromCharCode(104 - this.enPassantPoint.col) + (this.enPassantPoint.row + 1);\r\n            }\r\n            else {\r\n                return String.fromCharCode(97 + this.enPassantPoint.col) + (Math.abs(this.enPassantPoint.row - 7) + 1);\r\n            }\r\n        }\r\n        else {\r\n            return '-';\r\n        }\r\n    }\r\n    calculateFEN() {\r\n        let fen = '';\r\n        for (let i = 0; i < 8; ++i) {\r\n            let emptyFields = 0;\r\n            for (let j = 0; j < 8; ++j) {\r\n                const foundPiece = this.pieces.find((piece) => piece.point.col === j && piece.point.row === i);\r\n                if (foundPiece) {\r\n                    if (emptyFields > 0) {\r\n                        fen += emptyFields;\r\n                        emptyFields = 0;\r\n                    }\r\n                    if (foundPiece instanceof Rook) {\r\n                        fen += foundPiece.color === Color.BLACK ? 'r' : 'R';\r\n                    }\r\n                    else {\r\n                        if (foundPiece instanceof Knight) {\r\n                            fen += foundPiece.color === Color.BLACK ? 'n' : 'N';\r\n                        }\r\n                        else {\r\n                            if (foundPiece instanceof Bishop) {\r\n                                fen += foundPiece.color === Color.BLACK ? 'b' : 'B';\r\n                            }\r\n                            else {\r\n                                if (foundPiece instanceof Queen) {\r\n                                    fen += foundPiece.color === Color.BLACK ? 'q' : 'Q';\r\n                                }\r\n                                else {\r\n                                    if (foundPiece instanceof King) {\r\n                                        fen += foundPiece.color === Color.BLACK ? 'k' : 'K';\r\n                                    }\r\n                                    else {\r\n                                        if (foundPiece instanceof Pawn) {\r\n                                            fen += foundPiece.color === Color.BLACK ? 'p' : 'P';\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    ++emptyFields;\r\n                }\r\n            }\r\n            if (emptyFields > 0) {\r\n                fen += emptyFields;\r\n            }\r\n            fen += '/';\r\n        }\r\n        fen = fen.substr(0, fen.length - 1);\r\n        if (this.reverted) {\r\n            fen = fen.split('').reverse().join('');\r\n        }\r\n        fen += ' ' + (this.currentWhitePlayer ? 'w' : 'b');\r\n        const whiteEnPassant = this.getCastleFENString(Color.WHITE);\r\n        const blackEnPassant = this.getCastleFENString(Color.BLACK);\r\n        let concatedEnPassant = whiteEnPassant + blackEnPassant;\r\n        if (!concatedEnPassant) {\r\n            concatedEnPassant = '-';\r\n        }\r\n        fen += ' ' + concatedEnPassant;\r\n        fen += ' ' + this.getEnPassantFENString();\r\n        fen += ' ' + 0;\r\n        fen += ' ' + this.fullMoveCount;\r\n        this.fen = fen;\r\n    }\r\n    isXYInPointSelection(i, j) {\r\n        return false;\r\n    }\r\n    reversePoint(point) {\r\n        if (point) {\r\n            point.row = Math.abs(point.row - 7);\r\n            point.col = Math.abs(point.col - 7);\r\n        }\r\n    }\r\n    getPieceByPoint(row, col) {\r\n        row = Math.floor(row);\r\n        col = Math.floor(col);\r\n        return this.pieces.find((piece) => piece.point.col === col && piece.point.row === row);\r\n    }\r\n    checkIfPawnTakesEnPassant(newPoint) {\r\n        if (newPoint.isEqual(this.enPassantPoint)) {\r\n            this.pieces = this.pieces.filter((piece) => piece !== this.enPassantPiece);\r\n            this.enPassantPoint = null;\r\n            this.enPassantPiece = null;\r\n        }\r\n    }\r\n    checkIfPawnEnpassanted(piece, newPoint) {\r\n        if (Math.abs(piece.point.row - newPoint.row) > 1) {\r\n            this.enPassantPiece = piece;\r\n            this.enPassantPoint = new Point((piece.point.row + newPoint.row) / 2, piece.point.col);\r\n        }\r\n        else {\r\n            this.enPassantPoint = null;\r\n            this.enPassantPiece = null;\r\n        }\r\n    }\r\n    isKingChecked(piece) {\r\n        if (piece instanceof King) {\r\n            return piece.color === Color.WHITE\r\n                ? this.whiteKingChecked\r\n                : this.blackKingChecked;\r\n        }\r\n    }\r\n    getCurrentPlayerColor() {\r\n        return this.currentWhitePlayer ? Color.WHITE : Color.BLACK;\r\n    }\r\n}\n\nclass NgxChessBoardService {\r\n    constructor() {\r\n        this.componentMethodCallSource = new Subject();\r\n        this.componentMethodCalled$ = this.componentMethodCallSource.asObservable();\r\n    }\r\n    reset() {\r\n        this.componentMethodCallSource.next();\r\n    }\r\n}\r\nNgxChessBoardService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxChessBoardService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nNgxChessBoardService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxChessBoardService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxChessBoardService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root',\r\n                }]\r\n        }] });\n\nclass PiecePromotionModalComponent {\r\n    constructor() {\r\n        this.color = 'white';\r\n        this.opened = false;\r\n    }\r\n    open(closeCallback) {\r\n        this.opened = true;\r\n        this.onCloseCallback = closeCallback;\r\n        this.modal.nativeElement.style.display = 'block';\r\n    }\r\n    changeSelection(index) {\r\n        this.modal.nativeElement.style.display = 'none';\r\n        this.opened = false;\r\n        this.onCloseCallback(index);\r\n    }\r\n    getPieceIcon(piece) {\r\n        let coloredPiece = '';\r\n        switch (piece.toLowerCase()) {\r\n            case 'queen':\r\n                coloredPiece = this.color === 'white' ? this.pieceIconInput.whiteQueenUrl : this.pieceIconInput.blackQueenUrl;\r\n                break;\r\n            case 'rook':\r\n                coloredPiece = this.color === 'white' ? this.pieceIconInput.whiteRookUrl : this.pieceIconInput.blackRookUrl;\r\n                break;\r\n            case 'bishop':\r\n                coloredPiece = this.color === 'white' ? this.pieceIconInput.whiteBishopUrl : this.pieceIconInput.blackBishopUrl;\r\n                break;\r\n            case 'knight':\r\n                coloredPiece = this.color === 'white' ? this.pieceIconInput.whiteKnightUrl : this.pieceIconInput.blackKnightUrl;\r\n                break;\r\n        }\r\n        return coloredPiece;\r\n    }\r\n}\r\nPiecePromotionModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: PiecePromotionModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nPiecePromotionModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: PiecePromotionModalComponent, selector: \"app-piece-promotion-modal\", inputs: { pieceIconInput: \"pieceIconInput\", color: \"color\" }, viewQueries: [{ propertyName: \"modal\", first: true, predicate: [\"myModal\"], descendants: true }], ngImport: i0, template: \"<div #myModal class=\\\"container\\\">\\r\\n    <div class=\\\"wrapper\\\">\\r\\n        <div class=\\\"content\\\">\\r\\n            <div class=\\\"piece-wrapper\\\" *ngIf=\\\"pieceIconInput\\\">\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(1)\\\">\\r\\n                    <img [src]=\\\"getPieceIcon('queen')\\\" alt=\\\"Queen\\\">\\r\\n                </div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(2)\\\">\\r\\n                    <img [src]=\\\"getPieceIcon('rook')\\\" alt=\\\"Rook\\\">\\r\\n                </div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(3)\\\">\\r\\n                    <img [src]=\\\"getPieceIcon('bishop')\\\" alt=\\\"Bishop\\\">\\r\\n                </div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(4)\\\">\\r\\n                    <img [src]=\\\"getPieceIcon('knight')\\\" alt=\\\"Knight\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"piece-wrapper\\\" *ngIf=\\\"!pieceIconInput\\\">\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(1)\\\">&#x265B;</div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(2)\\\">&#x265C;</div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(3)\\\">&#x265D;</div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(4)\\\">&#x265E;</div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\", styles: [\".container{display:none;position:absolute;z-index:9999;top:0;color:#000;width:100%;height:100%;overflow:auto;background-color:#0006}.wrapper{position:relative;height:100%;width:100%}.content{background-color:#fefefe;margin:auto;position:relative;top:30%;font-size:100%;height:40%;padding:10px;border:1px solid #888;width:90%}.piece{font-size:5rem;height:100%;width:25%;cursor:pointer;display:inline-block;text-align:center}.piece img{max-width:100%}.piece:hover{background-color:#ccc;border-radius:5px}.piece-wrapper{height:80%;width:100%}#close-button{border-radius:4px;background-color:#4caf50;border:none;color:#fff;padding-left:5px;padding-right:5px;text-align:center;text-decoration:none;display:inline-block}.selected{border:2px solid #00B919;border-radius:4px;box-sizing:border-box}\\n\"], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: PiecePromotionModalComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'app-piece-promotion-modal', template: \"<div #myModal class=\\\"container\\\">\\r\\n    <div class=\\\"wrapper\\\">\\r\\n        <div class=\\\"content\\\">\\r\\n            <div class=\\\"piece-wrapper\\\" *ngIf=\\\"pieceIconInput\\\">\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(1)\\\">\\r\\n                    <img [src]=\\\"getPieceIcon('queen')\\\" alt=\\\"Queen\\\">\\r\\n                </div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(2)\\\">\\r\\n                    <img [src]=\\\"getPieceIcon('rook')\\\" alt=\\\"Rook\\\">\\r\\n                </div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(3)\\\">\\r\\n                    <img [src]=\\\"getPieceIcon('bishop')\\\" alt=\\\"Bishop\\\">\\r\\n                </div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(4)\\\">\\r\\n                    <img [src]=\\\"getPieceIcon('knight')\\\" alt=\\\"Knight\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"piece-wrapper\\\" *ngIf=\\\"!pieceIconInput\\\">\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(1)\\\">&#x265B;</div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(2)\\\">&#x265C;</div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(3)\\\">&#x265D;</div>\\r\\n                <div class=\\\"piece\\\" (click)=\\\"changeSelection(4)\\\">&#x265E;</div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\", styles: [\".container{display:none;position:absolute;z-index:9999;top:0;color:#000;width:100%;height:100%;overflow:auto;background-color:#0006}.wrapper{position:relative;height:100%;width:100%}.content{background-color:#fefefe;margin:auto;position:relative;top:30%;font-size:100%;height:40%;padding:10px;border:1px solid #888;width:90%}.piece{font-size:5rem;height:100%;width:25%;cursor:pointer;display:inline-block;text-align:center}.piece img{max-width:100%}.piece:hover{background-color:#ccc;border-radius:5px}.piece-wrapper{height:80%;width:100%}#close-button{border-radius:4px;background-color:#4caf50;border:none;color:#fff;padding-left:5px;padding-right:5px;text-align:center;text-decoration:none;display:inline-block}.selected{border:2px solid #00B919;border-radius:4px;box-sizing:border-box}\\n\"] }]\r\n        }], propDecorators: { modal: [{\r\n                type: ViewChild,\r\n                args: ['myModal', { static: false }]\r\n            }], pieceIconInput: [{\r\n                type: Input\r\n            }], color: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxChessBoardComponent {\r\n    constructor(ngxChessBoardService) {\r\n        this.ngxChessBoardService = ngxChessBoardService;\r\n        this.darkTileColor = Constants.DEFAULT_DARK_TILE_COLOR;\r\n        this.lightTileColor = Constants.DEFAULT_LIGHT_TILE_COLOR;\r\n        this.showCoords = true;\r\n        this.sourcePointColor = Constants.DEFAULT_SOURCE_POINT_COLOR;\r\n        this.destinationPointColor = Constants.DEFAULT_DESTINATION_POINT_COLOR;\r\n        this.legalMovesPointColor = Constants.DEFAULT_LEGAL_MOVE_POINT_COLOR;\r\n        this.showLastMove = true;\r\n        this.showLegalMoves = true;\r\n        this.showActivePiece = true;\r\n        this.showPossibleCaptures = true;\r\n        /**\r\n         * Enabling free mode removes turn-based restriction and allows to move any piece freely!\r\n         */\r\n        this.moveChange = new EventEmitter();\r\n        this.checkmate = new EventEmitter();\r\n        this.stalemate = new EventEmitter();\r\n        this.selected = false;\r\n        this.isDragging = false;\r\n        this.startTransition = '';\r\n        this.engineFacade = new EngineFacade(new Board(), this.moveChange);\r\n    }\r\n    set size(size) {\r\n        if (size &&\r\n            size >= Constants.MIN_BOARD_SIZE &&\r\n            size <= Constants.MAX_BOARD_SIZE) {\r\n            this.engineFacade.heightAndWidth = size;\r\n        }\r\n        else {\r\n            this.engineFacade.heightAndWidth = Constants.DEFAULT_SIZE;\r\n        }\r\n        this.engineFacade.drawProvider.clear();\r\n        this.calculatePieceSize();\r\n    }\r\n    set freeMode(freeMode) {\r\n        this.engineFacade.freeMode = freeMode;\r\n    }\r\n    set dragDisabled(dragDisabled) {\r\n        this.engineFacade.dragDisabled = dragDisabled;\r\n    }\r\n    set drawDisabled(drawDisabled) {\r\n        this.engineFacade.drawDisabled = drawDisabled;\r\n    }\r\n    set pieceIcons(pieceIcons) {\r\n        this.engineFacade.pieceIconManager.pieceIconInput = pieceIcons;\r\n    }\r\n    set lightDisabled(lightDisabled) {\r\n        this.engineFacade.lightDisabled = lightDisabled;\r\n    }\r\n    set darkDisabled(darkDisabled) {\r\n        this.engineFacade.darkDisabled = darkDisabled;\r\n    }\r\n    onRightClick(event) {\r\n        event.preventDefault();\r\n    }\r\n    ngOnChanges(changes) {\r\n        if ((changes.lightDisabled &&\r\n            this.lightDisabled &&\r\n            this.engineFacade.board.currentWhitePlayer) ||\r\n            (changes.darkDisabled &&\r\n                this.darkDisabled &&\r\n                !this.engineFacade.board.currentWhitePlayer)) {\r\n            this.engineFacade.board.possibleCaptures = [];\r\n            this.engineFacade.board.possibleMoves = [];\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        this.ngxChessBoardService.componentMethodCalled$.subscribe(() => {\r\n            this.engineFacade.reset();\r\n        });\r\n    }\r\n    ngAfterViewInit() {\r\n        this.engineFacade.modal = this.modal;\r\n        this.calculatePieceSize();\r\n    }\r\n    onMouseUp(event) {\r\n        this.engineFacade.onMouseUp(event, this.getClickPoint(event), this.boardRef.nativeElement.getBoundingClientRect().left, this.boardRef.nativeElement.getBoundingClientRect().top);\r\n    }\r\n    reverse() {\r\n        this.selected = false;\r\n        this.engineFacade.board.reverse();\r\n        this.engineFacade.coords.reverse();\r\n    }\r\n    updateBoard(board) {\r\n        this.engineFacade.board = board;\r\n        this.boardLoader.setEngineFacade(this.engineFacade);\r\n        this.engineFacade.board.possibleCaptures = [];\r\n        this.engineFacade.board.possibleMoves = [];\r\n    }\r\n    setFEN(fen) {\r\n        try {\r\n            this.engineFacade.boardLoader.setNotationProcessor(NotationProcessorFactory.getProcessor(NotationType.FEN));\r\n            this.engineFacade.boardLoader.loadFEN(fen);\r\n            this.engineFacade.board.possibleCaptures = [];\r\n            this.engineFacade.board.possibleMoves = [];\r\n            this.engineFacade.coords.reset();\r\n        }\r\n        catch (exception) {\r\n            this.engineFacade.boardLoader.addPieces();\r\n        }\r\n    }\r\n    setPGN(pgn) {\r\n        try {\r\n            this.engineFacade.pgnProcessor.reset();\r\n            this.engineFacade.boardLoader.setNotationProcessor(NotationProcessorFactory.getProcessor(NotationType.PGN));\r\n            this.engineFacade.boardLoader.loadPGN(pgn);\r\n            this.engineFacade.board.possibleCaptures = [];\r\n            this.engineFacade.board.possibleMoves = [];\r\n            this.engineFacade.coords.reset();\r\n        }\r\n        catch (exception) {\r\n            console.log(exception);\r\n            this.engineFacade.boardLoader.addPieces();\r\n        }\r\n    }\r\n    getFEN() {\r\n        return this.engineFacade.board.fen;\r\n    }\r\n    dragEnded(event) {\r\n        this.isDragging = false;\r\n        this.engineFacade.dragEndStrategy.process(event, this.engineFacade.moveDone, this.startTransition);\r\n    }\r\n    dragStart(event) {\r\n        this.isDragging = true;\r\n        let trans = event.source.getRootElement().style.transform.split(') ');\r\n        //   this.startTrans= trans;\r\n        this.startTransition = trans.length === 2 ? trans[1] : trans[0];\r\n        this.engineFacade.dragStartStrategy.process(event);\r\n    }\r\n    onMouseDown(event) {\r\n        this.engineFacade.onMouseDown(event, this.getClickPoint(event), this.boardRef.nativeElement.getBoundingClientRect().left, this.boardRef.nativeElement.getBoundingClientRect().top);\r\n    }\r\n    getClickPoint(event) {\r\n        return ClickUtils.getClickPoint(event, this.boardRef.nativeElement.getBoundingClientRect().top, this.boardRef.nativeElement.getBoundingClientRect().height, this.boardRef.nativeElement.getBoundingClientRect().left, this.boardRef.nativeElement.getBoundingClientRect().width);\r\n    }\r\n    calculatePieceSize() {\r\n        this.pieceSize = this.engineFacade.heightAndWidth / 8;\r\n    }\r\n    getCustomPieceIcons(piece) {\r\n        return JSON.parse(`{ \"background-image\": \"url('${this.engineFacade.pieceIconManager.getPieceIcon(piece)}')\"}`);\r\n    }\r\n    move(coords) {\r\n        this.engineFacade.move(coords);\r\n    }\r\n    getMoveHistory() {\r\n        return this.engineFacade.getMoveHistory();\r\n    }\r\n    reset() {\r\n        this.engineFacade.reset();\r\n    }\r\n    undo() {\r\n        this.engineFacade.undo();\r\n    }\r\n    addPiece(pieceTypeInput, colorInput, coords) {\r\n        this.engineFacade.addPiece(pieceTypeInput, colorInput, coords);\r\n    }\r\n    getPGN() {\r\n        return this.engineFacade.pgnProcessor.getPGN();\r\n    }\r\n    dragMoved($event) {\r\n        let x = ($event.pointerPosition.x - $event.source.getRootElement().parentElement.getBoundingClientRect().left) - (this.pieceSize / 2);\r\n        let y = ($event.pointerPosition.y - $event.source.getRootElement().parentElement.getBoundingClientRect().top) - (this.pieceSize / 2);\r\n        $event.source.getRootElement().style.transform = 'translate3d(' + x + 'px, '\r\n            + (y) + 'px,0px)';\r\n    }\r\n    getTileBackgroundColor(i, j) {\r\n        let color = ((i + j) % 2 === 0) ? this.lightTileColor : this.darkTileColor;\r\n        if (this.showLastMove) {\r\n            if (this.engineFacade.board.isXYInSourceMove(i, j)) {\r\n                color = this.sourcePointColor;\r\n            }\r\n            if (this.engineFacade.board.isXYInDestMove(i, j)) {\r\n                color = this.destinationPointColor;\r\n            }\r\n        }\r\n        return color;\r\n    }\r\n}\r\nNgxChessBoardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxChessBoardComponent, deps: [{ token: NgxChessBoardService }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxChessBoardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: NgxChessBoardComponent, selector: \"ngx-chess-board\", inputs: { darkTileColor: \"darkTileColor\", lightTileColor: \"lightTileColor\", showCoords: \"showCoords\", sourcePointColor: \"sourcePointColor\", destinationPointColor: \"destinationPointColor\", legalMovesPointColor: \"legalMovesPointColor\", showLastMove: \"showLastMove\", showLegalMoves: \"showLegalMoves\", showActivePiece: \"showActivePiece\", showPossibleCaptures: \"showPossibleCaptures\", size: \"size\", freeMode: \"freeMode\", dragDisabled: \"dragDisabled\", drawDisabled: \"drawDisabled\", pieceIcons: \"pieceIcons\", lightDisabled: \"lightDisabled\", darkDisabled: \"darkDisabled\" }, outputs: { moveChange: \"moveChange\", checkmate: \"checkmate\", stalemate: \"stalemate\" }, host: { listeners: { \"contextmenu\": \"onRightClick($event)\" } }, viewQueries: [{ propertyName: \"boardRef\", first: true, predicate: [\"boardRef\"], descendants: true }, { propertyName: \"modal\", first: true, predicate: [\"modal\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div\\n    id=\\\"board\\\"\\n    [style.height.px]=\\\"engineFacade.heightAndWidth\\\"\\n    [style.width.px]=\\\"engineFacade.heightAndWidth\\\"\\n    (pointerdown)=\\\"!modal.opened && onMouseDown($event)\\\"\\n    (pointerup)=\\\"!modal.opened && onMouseUp($event)\\\"\\n    #boardRef\\n>\\n    <div id=\\\"drag\\\">\\n        <div\\n            [cdkDragDisabled]=\\\"engineFacade.dragDisabled\\\"\\n            (cdkDragEnded)=\\\"dragEnded($event)\\\"\\n            (cdkDragMoved)=\\\"dragMoved($event)\\\"\\n            (cdkDragStarted)=\\\"dragStart($event)\\\"\\n            class=\\\"single-piece\\\" [innerHTML]=\\\"engineFacade.pieceIconManager.isDefaultIcons() ? piece.constant.icon : ''\\\"\\n            [ngStyle]=\\\"engineFacade.pieceIconManager.isDefaultIcons() ? '' : getCustomPieceIcons(piece)\\\"\\n            [style.transform]=\\\"'translate3d(' + piece.point.col * pieceSize + 'px, ' + piece.point.row * pieceSize + 'px,0px)'\\\"\\n            [style.max-height]=\\\"pieceSize + 'px'\\\"\\n            [style.font-size]=\\\"pieceSize * 0.8 + 'px'\\\"\\n            [style.width]=\\\"pieceSize + 'px'\\\"\\n            [style.height]=\\\"pieceSize + 'px'\\\"\\n            cdkDrag\\n            *ngFor=\\\"let piece of engineFacade.board.pieces; let i = index\\\"\\n        >\\n        </div>\\n        <div\\n            class=\\\"board-row\\\"\\n            *ngFor=\\\"let row of engineFacade.board.board; let i = index\\\"\\n        >\\n            <div\\n                class=\\\"board-col\\\"\\n                [class.current-selection]=\\\"showActivePiece && engineFacade.board.isXYInActiveMove(i,j)\\\"\\n                [class.king-check]=\\\" engineFacade.board.isKingChecked(engineFacade.board.getPieceByPoint(i,j))\\\"\\n                [class.point-circle]=\\\"engineFacade.board.isXYInPointSelection(i, j)\\\"\\n                [class.possible-capture]=\\\"showPossibleCaptures && engineFacade.board.isXYInPossibleCaptures(i, j)\\\"\\n                [class.possible-point]=\\\"engineFacade.board.isXYInPossibleMoves(i, j) && showLegalMoves\\\"\\n                [style.background-color]=\\\"getTileBackgroundColor(i, j)\\\"\\n                *ngFor=\\\"let col of row; let j = index\\\"\\n            >\\n                <span\\n                    class=\\\"yCoord\\\"\\n                    [style.color]=\\\"(i % 2 === 0) ? lightTileColor : darkTileColor\\\"\\n                    [style.font-size.px]=\\\"pieceSize / 4\\\"\\n                    *ngIf=\\\"showCoords && j === 7\\\"\\n                >\\n                    {{engineFacade.coords.yCoords[i]}}\\n                </span>\\n                <span\\n                    class=\\\"xCoord\\\"\\n                    [style.color]=\\\"(j % 2 === 0) ? lightTileColor : darkTileColor\\\"\\n                    [style.font-size.px]=\\\"pieceSize / 4\\\"\\n                    *ngIf=\\\"showCoords && i === 7\\\"\\n                >\\n                    {{engineFacade.coords.xCoords[j]}}\\n                </span>\\n                <div\\n                    *ngIf=\\\"engineFacade.board.getPieceByPoint(i, j) as piece\\\"\\n                    style=\\\"height:100%; width:100%\\\"\\n                >\\n                    <div\\n                        [ngClass]=\\\"'piece'\\\"\\n                        [style.font-size]=\\\"pieceSize + 'px'\\\"\\n\\n                    >\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <svg\\n        [attr.height]=\\\"engineFacade.heightAndWidth\\\"\\n        [attr.width]=\\\"engineFacade.heightAndWidth\\\"\\n        style=\\\"position:absolute; top:0; pointer-events: none\\\"\\n    >\\n        <defs *ngFor=\\\"let color of ['red', 'green', 'blue', 'orange']\\\">\\n            <marker\\n                [id]=\\\"color + 'Arrow'\\\"\\n                markerHeight=\\\"13\\\"\\n                markerWidth=\\\"13\\\"\\n                orient=\\\"auto\\\"\\n                refX=\\\"9\\\"\\n                refY=\\\"6\\\"\\n            >\\n                <path\\n                    [style.fill]=\\\"color\\\"\\n                    d=\\\"M2,2 L2,11 L10,6 L2,2\\\"\\n                ></path>\\n            </marker>\\n        </defs>\\n        <line\\n            class=\\\"arrow\\\"\\n            [attr.marker-end]=\\\"'url(#' + arrow.end.color + 'Arrow)'\\\"\\n            [attr.stroke]=\\\"arrow.end.color\\\"\\n            [attr.x1]=\\\"arrow.start.x\\\"\\n            [attr.x2]=\\\"arrow.end.x\\\"\\n            [attr.y1]=\\\"arrow.start.y\\\"\\n            [attr.y2]=\\\"arrow.end.y\\\"\\n            *ngFor=\\\"let arrow of engineFacade.drawProvider.arrows$ | async\\\"\\n        ></line>\\n        <circle\\n            [attr.cx]=\\\"circle.drawPoint.x\\\"\\n            [attr.cy]=\\\"circle.drawPoint.y\\\"\\n            [attr.r]=\\\"engineFacade.heightAndWidth / 18\\\"\\n            [attr.stroke]=\\\"circle.drawPoint.color\\\"\\n            *ngFor=\\\"let circle of engineFacade.drawProvider.circles$ | async\\\"\\n            fill-opacity=\\\"0.0\\\"\\n            stroke-width=\\\"2\\\"\\n        ></circle>\\n    </svg>\\n    <app-piece-promotion-modal #modal\\n                               [pieceIconInput]=\\\"engineFacade.pieceIconManager.pieceIconInput\\\"\\n                               [color]=\\\"engineFacade.board.getCurrentPlayerColor() ? 'white' : 'black'\\\"></app-piece-promotion-modal>\\n</div>\\n\", styles: [\"@charset \\\"UTF-8\\\";#board{font-family:Courier New,serif;position:relative}.board-row{display:block;width:100%;height:12.5%;position:relative}.board-col{position:relative;display:inline-block;width:12.5%;vertical-align:top;cursor:default;height:100%}.piece{height:100%;cursor:-webkit-grab;cursor:grab;width:100%;-moz-user-select:none;user-select:none;-webkit-user-select:none;background-size:cover;justify-content:center;text-align:center;color:#000!important;box-sizing:border-box}.piece:after{content:\\\"\\\\200b\\\";box-sizing:border-box}#drag{height:100%;width:100%}.possible-point{background:radial-gradient(#13262F 15%,transparent 20%)}.possible-point:hover,.possible-capture:hover{opacity:.4}.possible-capture{background:radial-gradient(transparent 0%,transparent 80%,#13262F 80%);opacity:.5;box-sizing:border-box;margin:0;padding:0}.king-check{background:radial-gradient(ellipse at center,red 0%,#e70000 25%,rgba(169,0,0,0) 89%,rgba(158,0,0,0) 100%)}.current-selection{background-color:#72620b!important}.yCoord{position:absolute;-moz-user-select:none;user-select:none;-webkit-user-select:none;cursor:pointer;right:.2em;font-family:Lucida Console,Courier,monospace;box-sizing:border-box}.xCoord{position:absolute;-moz-user-select:none;user-select:none;-webkit-user-select:none;cursor:pointer;left:.2em;bottom:0;font-family:Lucida Console,Courier,monospace;box-sizing:border-box}.hovering{background-color:red!important}.arrow{stroke-width:2}svg{filter:drop-shadow(1px 1px 0px #111) drop-shadow(-1px 1px 0px #111) drop-shadow(1px -1px 0px #111) drop-shadow(-1px -1px 0px #111)}:host{display:inline-block!important}.single-piece{position:absolute;z-index:999;justify-content:center;text-align:center;-moz-user-select:none;user-select:none;-webkit-user-select:none;color:#000!important;cursor:-webkit-grab;cursor:grab;background-size:cover}.single-piece:after{content:\\\"\\\\200b\\\";box-sizing:border-box}.cdk-drag:not(.cdk-drag-dragging){transition:transform .2s cubic-bezier(0,.3,.14,.49)}\\n\"], components: [{ type: PiecePromotionModalComponent, selector: \"app-piece-promotion-modal\", inputs: [\"pieceIconInput\", \"color\"] }], directives: [{ type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i4.CdkDrag, selector: \"[cdkDrag]\", inputs: [\"cdkDragData\", \"cdkDragLockAxis\", \"cdkDragRootElement\", \"cdkDragBoundary\", \"cdkDragStartDelay\", \"cdkDragFreeDragPosition\", \"cdkDragDisabled\", \"cdkDragConstrainPosition\", \"cdkDragPreviewClass\", \"cdkDragPreviewContainer\"], outputs: [\"cdkDragStarted\", \"cdkDragReleased\", \"cdkDragEnded\", \"cdkDragEntered\", \"cdkDragExited\", \"cdkDragDropped\", \"cdkDragMoved\"], exportAs: [\"cdkDrag\"] }, { type: i3.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], pipes: { \"async\": i3.AsyncPipe } });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxChessBoardComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-chess-board', template: \"<div\\n    id=\\\"board\\\"\\n    [style.height.px]=\\\"engineFacade.heightAndWidth\\\"\\n    [style.width.px]=\\\"engineFacade.heightAndWidth\\\"\\n    (pointerdown)=\\\"!modal.opened && onMouseDown($event)\\\"\\n    (pointerup)=\\\"!modal.opened && onMouseUp($event)\\\"\\n    #boardRef\\n>\\n    <div id=\\\"drag\\\">\\n        <div\\n            [cdkDragDisabled]=\\\"engineFacade.dragDisabled\\\"\\n            (cdkDragEnded)=\\\"dragEnded($event)\\\"\\n            (cdkDragMoved)=\\\"dragMoved($event)\\\"\\n            (cdkDragStarted)=\\\"dragStart($event)\\\"\\n            class=\\\"single-piece\\\" [innerHTML]=\\\"engineFacade.pieceIconManager.isDefaultIcons() ? piece.constant.icon : ''\\\"\\n            [ngStyle]=\\\"engineFacade.pieceIconManager.isDefaultIcons() ? '' : getCustomPieceIcons(piece)\\\"\\n            [style.transform]=\\\"'translate3d(' + piece.point.col * pieceSize + 'px, ' + piece.point.row * pieceSize + 'px,0px)'\\\"\\n            [style.max-height]=\\\"pieceSize + 'px'\\\"\\n            [style.font-size]=\\\"pieceSize * 0.8 + 'px'\\\"\\n            [style.width]=\\\"pieceSize + 'px'\\\"\\n            [style.height]=\\\"pieceSize + 'px'\\\"\\n            cdkDrag\\n            *ngFor=\\\"let piece of engineFacade.board.pieces; let i = index\\\"\\n        >\\n        </div>\\n        <div\\n            class=\\\"board-row\\\"\\n            *ngFor=\\\"let row of engineFacade.board.board; let i = index\\\"\\n        >\\n            <div\\n                class=\\\"board-col\\\"\\n                [class.current-selection]=\\\"showActivePiece && engineFacade.board.isXYInActiveMove(i,j)\\\"\\n                [class.king-check]=\\\" engineFacade.board.isKingChecked(engineFacade.board.getPieceByPoint(i,j))\\\"\\n                [class.point-circle]=\\\"engineFacade.board.isXYInPointSelection(i, j)\\\"\\n                [class.possible-capture]=\\\"showPossibleCaptures && engineFacade.board.isXYInPossibleCaptures(i, j)\\\"\\n                [class.possible-point]=\\\"engineFacade.board.isXYInPossibleMoves(i, j) && showLegalMoves\\\"\\n                [style.background-color]=\\\"getTileBackgroundColor(i, j)\\\"\\n                *ngFor=\\\"let col of row; let j = index\\\"\\n            >\\n                <span\\n                    class=\\\"yCoord\\\"\\n                    [style.color]=\\\"(i % 2 === 0) ? lightTileColor : darkTileColor\\\"\\n                    [style.font-size.px]=\\\"pieceSize / 4\\\"\\n                    *ngIf=\\\"showCoords && j === 7\\\"\\n                >\\n                    {{engineFacade.coords.yCoords[i]}}\\n                </span>\\n                <span\\n                    class=\\\"xCoord\\\"\\n                    [style.color]=\\\"(j % 2 === 0) ? lightTileColor : darkTileColor\\\"\\n                    [style.font-size.px]=\\\"pieceSize / 4\\\"\\n                    *ngIf=\\\"showCoords && i === 7\\\"\\n                >\\n                    {{engineFacade.coords.xCoords[j]}}\\n                </span>\\n                <div\\n                    *ngIf=\\\"engineFacade.board.getPieceByPoint(i, j) as piece\\\"\\n                    style=\\\"height:100%; width:100%\\\"\\n                >\\n                    <div\\n                        [ngClass]=\\\"'piece'\\\"\\n                        [style.font-size]=\\\"pieceSize + 'px'\\\"\\n\\n                    >\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <svg\\n        [attr.height]=\\\"engineFacade.heightAndWidth\\\"\\n        [attr.width]=\\\"engineFacade.heightAndWidth\\\"\\n        style=\\\"position:absolute; top:0; pointer-events: none\\\"\\n    >\\n        <defs *ngFor=\\\"let color of ['red', 'green', 'blue', 'orange']\\\">\\n            <marker\\n                [id]=\\\"color + 'Arrow'\\\"\\n                markerHeight=\\\"13\\\"\\n                markerWidth=\\\"13\\\"\\n                orient=\\\"auto\\\"\\n                refX=\\\"9\\\"\\n                refY=\\\"6\\\"\\n            >\\n                <path\\n                    [style.fill]=\\\"color\\\"\\n                    d=\\\"M2,2 L2,11 L10,6 L2,2\\\"\\n                ></path>\\n            </marker>\\n        </defs>\\n        <line\\n            class=\\\"arrow\\\"\\n            [attr.marker-end]=\\\"'url(#' + arrow.end.color + 'Arrow)'\\\"\\n            [attr.stroke]=\\\"arrow.end.color\\\"\\n            [attr.x1]=\\\"arrow.start.x\\\"\\n            [attr.x2]=\\\"arrow.end.x\\\"\\n            [attr.y1]=\\\"arrow.start.y\\\"\\n            [attr.y2]=\\\"arrow.end.y\\\"\\n            *ngFor=\\\"let arrow of engineFacade.drawProvider.arrows$ | async\\\"\\n        ></line>\\n        <circle\\n            [attr.cx]=\\\"circle.drawPoint.x\\\"\\n            [attr.cy]=\\\"circle.drawPoint.y\\\"\\n            [attr.r]=\\\"engineFacade.heightAndWidth / 18\\\"\\n            [attr.stroke]=\\\"circle.drawPoint.color\\\"\\n            *ngFor=\\\"let circle of engineFacade.drawProvider.circles$ | async\\\"\\n            fill-opacity=\\\"0.0\\\"\\n            stroke-width=\\\"2\\\"\\n        ></circle>\\n    </svg>\\n    <app-piece-promotion-modal #modal\\n                               [pieceIconInput]=\\\"engineFacade.pieceIconManager.pieceIconInput\\\"\\n                               [color]=\\\"engineFacade.board.getCurrentPlayerColor() ? 'white' : 'black'\\\"></app-piece-promotion-modal>\\n</div>\\n\", styles: [\"@charset \\\"UTF-8\\\";#board{font-family:Courier New,serif;position:relative}.board-row{display:block;width:100%;height:12.5%;position:relative}.board-col{position:relative;display:inline-block;width:12.5%;vertical-align:top;cursor:default;height:100%}.piece{height:100%;cursor:-webkit-grab;cursor:grab;width:100%;-moz-user-select:none;user-select:none;-webkit-user-select:none;background-size:cover;justify-content:center;text-align:center;color:#000!important;box-sizing:border-box}.piece:after{content:\\\"\\\\200b\\\";box-sizing:border-box}#drag{height:100%;width:100%}.possible-point{background:radial-gradient(#13262F 15%,transparent 20%)}.possible-point:hover,.possible-capture:hover{opacity:.4}.possible-capture{background:radial-gradient(transparent 0%,transparent 80%,#13262F 80%);opacity:.5;box-sizing:border-box;margin:0;padding:0}.king-check{background:radial-gradient(ellipse at center,red 0%,#e70000 25%,rgba(169,0,0,0) 89%,rgba(158,0,0,0) 100%)}.current-selection{background-color:#72620b!important}.yCoord{position:absolute;-moz-user-select:none;user-select:none;-webkit-user-select:none;cursor:pointer;right:.2em;font-family:Lucida Console,Courier,monospace;box-sizing:border-box}.xCoord{position:absolute;-moz-user-select:none;user-select:none;-webkit-user-select:none;cursor:pointer;left:.2em;bottom:0;font-family:Lucida Console,Courier,monospace;box-sizing:border-box}.hovering{background-color:red!important}.arrow{stroke-width:2}svg{filter:drop-shadow(1px 1px 0px #111) drop-shadow(-1px 1px 0px #111) drop-shadow(1px -1px 0px #111) drop-shadow(-1px -1px 0px #111)}:host{display:inline-block!important}.single-piece{position:absolute;z-index:999;justify-content:center;text-align:center;-moz-user-select:none;user-select:none;-webkit-user-select:none;color:#000!important;cursor:-webkit-grab;cursor:grab;background-size:cover}.single-piece:after{content:\\\"\\\\200b\\\";box-sizing:border-box}.cdk-drag:not(.cdk-drag-dragging){transition:transform .2s cubic-bezier(0,.3,.14,.49)}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: NgxChessBoardService }]; }, propDecorators: { darkTileColor: [{\r\n                type: Input\r\n            }], lightTileColor: [{\r\n                type: Input\r\n            }], showCoords: [{\r\n                type: Input\r\n            }], sourcePointColor: [{\r\n                type: Input\r\n            }], destinationPointColor: [{\r\n                type: Input\r\n            }], legalMovesPointColor: [{\r\n                type: Input\r\n            }], showLastMove: [{\r\n                type: Input\r\n            }], showLegalMoves: [{\r\n                type: Input\r\n            }], showActivePiece: [{\r\n                type: Input\r\n            }], showPossibleCaptures: [{\r\n                type: Input\r\n            }], moveChange: [{\r\n                type: Output\r\n            }], checkmate: [{\r\n                type: Output\r\n            }], stalemate: [{\r\n                type: Output\r\n            }], boardRef: [{\r\n                type: ViewChild,\r\n                args: ['boardRef']\r\n            }], modal: [{\r\n                type: ViewChild,\r\n                args: ['modal']\r\n            }], size: [{\r\n                type: Input,\r\n                args: ['size']\r\n            }], freeMode: [{\r\n                type: Input,\r\n                args: ['freeMode']\r\n            }], dragDisabled: [{\r\n                type: Input,\r\n                args: ['dragDisabled']\r\n            }], drawDisabled: [{\r\n                type: Input,\r\n                args: ['drawDisabled']\r\n            }], pieceIcons: [{\r\n                type: Input,\r\n                args: ['pieceIcons']\r\n            }], lightDisabled: [{\r\n                type: Input,\r\n                args: ['lightDisabled']\r\n            }], darkDisabled: [{\r\n                type: Input,\r\n                args: ['darkDisabled']\r\n            }], onRightClick: [{\r\n                type: HostListener,\r\n                args: ['contextmenu', ['$event']]\r\n            }] } });\n\nclass NgxChessBoardModule {\r\n    static forRoot() {\r\n        return {\r\n            ngModule: NgxChessBoardModule,\r\n            providers: [NgxChessBoardService],\r\n        };\r\n    }\r\n}\r\nNgxChessBoardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxChessBoardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxChessBoardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxChessBoardModule, declarations: [NgxChessBoardComponent, PiecePromotionModalComponent], imports: [CommonModule, DragDropModule], exports: [NgxChessBoardComponent] });\r\nNgxChessBoardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxChessBoardModule, imports: [[CommonModule, DragDropModule]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxChessBoardModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [NgxChessBoardComponent, PiecePromotionModalComponent],\r\n                    imports: [CommonModule, DragDropModule],\r\n                    exports: [NgxChessBoardComponent],\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-chess-board\r\n */\r\n/*\r\n * Public API Surface of im-grid\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { HistoryMove, NgxChessBoardComponent, NgxChessBoardModule, NgxChessBoardService, PiecePromotionModalComponent };\n"]},"metadata":{},"sourceType":"module"}