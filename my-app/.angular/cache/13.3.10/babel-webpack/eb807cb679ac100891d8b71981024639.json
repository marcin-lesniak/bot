{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\Lesiu\\\\Documents\\\\ChessEngineJS\\\\my-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { Game } from \"./Game\";\nexport class RobotUser {\n  /**\r\n   * Initialise with access token to lichess and a player algorithm.\r\n   */\n  constructor(api, replyChat, getNextMove) {\n    this.api = api;\n    this.replyChat = replyChat;\n    this.getNextMove = getNextMove;\n  }\n\n  start() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.account = yield _this.api.accountInfo();\n      console.log(\"Playing as \" + _this.account.data.username);\n\n      _this.api.streamEvents(event => _this.eventHandler(event));\n\n      return _this.account;\n    })();\n  }\n\n  eventHandler(event) {\n    switch (event.type) {\n      case \"challenge\":\n        this.handleChallenge(event.challenge);\n        break;\n\n      case \"gameStart\":\n        this.handleGameStart(event.game.id);\n        break;\n\n      default:\n        console.log(\"Unhandled event : \" + JSON.stringify(event));\n    }\n  }\n\n  handleGameStart(id) {\n    const game = new Game(this.api, this.account.data.username, this.replyChat, this.getNextMove);\n    game.start(id);\n  }\n\n  handleChallenge(challenge) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (challenge.challenger.id === \"marcinlebot\") return;\n\n      if (challenge.rated) {\n        console.log(\"Declining rated challenge from \" + challenge.challenger.id);\n        const response = yield _this2.api.declineChallenge(challenge.id);\n        console.log(\"Declined\", response.data || response);\n      } else {\n        console.log(\"Accepting unrated challenge from \" + challenge.challenger.id);\n        const response = yield _this2.api.acceptChallenge(challenge.id);\n        console.log(\"Accepted\", response.data || response);\n      }\n    })();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Lesiu/Documents/ChessEngineJS/my-app/src/app/api/RobotUser.ts"],"names":["Game","RobotUser","constructor","api","replyChat","getNextMove","start","account","accountInfo","console","log","data","username","streamEvents","event","eventHandler","type","handleChallenge","challenge","handleGameStart","game","id","JSON","stringify","challenger","rated","response","declineChallenge","acceptChallenge"],"mappings":";AAAA,SAASA,IAAT,QAAqB,QAArB;AACA,OAAO,MAAMC,SAAN,CAAgB;AACnB;AACJ;AACA;AACIC,EAAAA,WAAW,CAACC,GAAD,EAAMC,SAAN,EAAiBC,WAAjB,EAA8B;AACrC,SAAKF,GAAL,GAAWA,GAAX;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACH;;AACKC,EAAAA,KAAK,GAAG;AAAA;;AAAA;AACV,MAAA,KAAI,CAACC,OAAL,SAAqB,KAAI,CAACJ,GAAL,CAASK,WAAT,EAArB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgB,KAAI,CAACH,OAAL,CAAaI,IAAb,CAAkBC,QAA9C;;AACA,MAAA,KAAI,CAACT,GAAL,CAASU,YAAT,CAAuBC,KAAD,IAAW,KAAI,CAACC,YAAL,CAAkBD,KAAlB,CAAjC;;AACA,aAAO,KAAI,CAACP,OAAZ;AAJU;AAKb;;AACDQ,EAAAA,YAAY,CAACD,KAAD,EAAQ;AAChB,YAAQA,KAAK,CAACE,IAAd;AACI,WAAK,WAAL;AACI,aAAKC,eAAL,CAAqBH,KAAK,CAACI,SAA3B;AACA;;AACJ,WAAK,WAAL;AACI,aAAKC,eAAL,CAAqBL,KAAK,CAACM,IAAN,CAAWC,EAAhC;AACA;;AACJ;AACIZ,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBY,IAAI,CAACC,SAAL,CAAeT,KAAf,CAAnC;AARR;AAUH;;AACDK,EAAAA,eAAe,CAACE,EAAD,EAAK;AAChB,UAAMD,IAAI,GAAG,IAAIpB,IAAJ,CAAS,KAAKG,GAAd,EAAmB,KAAKI,OAAL,CAAaI,IAAb,CAAkBC,QAArC,EAA+C,KAAKR,SAApD,EAA+D,KAAKC,WAApE,CAAb;AACAe,IAAAA,IAAI,CAACd,KAAL,CAAWe,EAAX;AACH;;AACKJ,EAAAA,eAAe,CAACC,SAAD,EAAY;AAAA;;AAAA;AAC7B,UAAIA,SAAS,CAACM,UAAV,CAAqBH,EAArB,KAA4B,aAAhC,EACI;;AACJ,UAAIH,SAAS,CAACO,KAAd,EAAqB;AACjBhB,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCQ,SAAS,CAACM,UAAV,CAAqBH,EAArE;AACA,cAAMK,QAAQ,SAAS,MAAI,CAACvB,GAAL,CAASwB,gBAAT,CAA0BT,SAAS,CAACG,EAApC,CAAvB;AACAZ,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBgB,QAAQ,CAACf,IAAT,IAAiBe,QAAzC;AACH,OAJD,MAKK;AACDjB,QAAAA,OAAO,CAACC,GAAR,CAAY,sCAAsCQ,SAAS,CAACM,UAAV,CAAqBH,EAAvE;AACA,cAAMK,QAAQ,SAAS,MAAI,CAACvB,GAAL,CAASyB,eAAT,CAAyBV,SAAS,CAACG,EAAnC,CAAvB;AACAZ,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBgB,QAAQ,CAACf,IAAT,IAAiBe,QAAzC;AACH;AAZ4B;AAahC;;AA5CkB","sourcesContent":["import { Game } from \"./Game\";\r\nexport class RobotUser {\r\n    /**\r\n     * Initialise with access token to lichess and a player algorithm.\r\n     */\r\n    constructor(api, replyChat, getNextMove) {\r\n        this.api = api;\r\n        this.replyChat = replyChat;\r\n        this.getNextMove = getNextMove;\r\n    }\r\n    async start() {\r\n        this.account = await this.api.accountInfo();\r\n        console.log(\"Playing as \" + this.account.data.username);\r\n        this.api.streamEvents((event) => this.eventHandler(event));\r\n        return this.account;\r\n    }\r\n    eventHandler(event) {\r\n        switch (event.type) {\r\n            case \"challenge\":\r\n                this.handleChallenge(event.challenge);\r\n                break;\r\n            case \"gameStart\":\r\n                this.handleGameStart(event.game.id);\r\n                break;\r\n            default:\r\n                console.log(\"Unhandled event : \" + JSON.stringify(event));\r\n        }\r\n    }\r\n    handleGameStart(id) {\r\n        const game = new Game(this.api, this.account.data.username, this.replyChat, this.getNextMove);\r\n        game.start(id);\r\n    }\r\n    async handleChallenge(challenge) {\r\n        if (challenge.challenger.id === \"marcinlebot\")\r\n            return;\r\n        if (challenge.rated) {\r\n            console.log(\"Declining rated challenge from \" + challenge.challenger.id);\r\n            const response = await this.api.declineChallenge(challenge.id);\r\n            console.log(\"Declined\", response.data || response);\r\n        }\r\n        else {\r\n            console.log(\"Accepting unrated challenge from \" + challenge.challenger.id);\r\n            const response = await this.api.acceptChallenge(challenge.id);\r\n            console.log(\"Accepted\", response.data || response);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}